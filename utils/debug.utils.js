const fileHandle = require("fs/promises");
const {prisma} = require("../prisma-client");
const {generateCard, setCardPosition, generateStartCardsSet} = require("../modules/players");
const {avatarDefying} = require("../data/avatars");
const {createLastTeam} = require("./bots.utils");
const MathService = require('../services/MathService');

// weekend_league functions ==============================================================================================
async function playPhaseMatches_debug(phase) {
    switch (phase) {
        case 1:
            await playMatches1Phase();
            await calcMatches1Phase();
            break;

        case 2:
            await playMatches2Phase();
            await calcMatches2Phase();
            break;

        case 3:
            await playMatches3Phase();
            await calcMatches3Phase();
            break;

        case 4:
            await playMatches4Phase();
            await calcMatches4Phase();
            break;

        case 5:
            await playMatches5Phase();
            await calcMatches5Phase();
            break;

        case 6:
            await playMatches6Phase();
            await calcMatches6Phase();
            break;

        case 7:
            await playMatches7Phase();
            await calcMatches7Phase();
            break;

        case 8:
            await playMatches8Phase();
            await calcMatches8Phase();
            break;

        case 9:
            await playMatches9Phase();
            await calcMatches9Phase();
            break;

        case 10:
            await playMatches10Phase();
            await calcMatches10Phase();
            break;

        default:
            console.log(`(modules/weekend_leagues.js) Such phase doesn't exists!`);
            break;
    }
}

async function playWeekendLeagues_debug() {
    await createLeaguesNMatches();

    await playMatches1Phase();
    await calcMatches1Phase();

    await playMatches2Phase();
    await calcMatches2Phase();

    await playMatches3Phase();
    await calcMatches3Phase();

    await playMatches4Phase();
    await calcMatches4Phase();

    await playMatches5Phase();
    await calcMatches5Phase();

    await playMatches6Phase();
    await calcMatches6Phase();

    await playMatches7Phase();
    await calcMatches7Phase();

    await playMatches8Phase();
    await calcMatches8Phase();

    await playMatches9Phase();
    await calcMatches9Phase();

    await playMatches10Phase();
    await calcMatches10Phase();
}
// weekend_league functions ==============================================================================================


// playing matches ======================================================================================================
async function playDebugMatch_17otr_v3_09I19(matchId, saveToDB) {
    // debug functions ===================================================================================
    function getPlayerAsmParts(player) {
        let technicalSkills = {},
            physicalSkills = {};

        for (let skill in player.card.physicalSkills) physicalSkills[skill] = player.card.physicalSkills[skill];
        for (let skill in player.card.technicalSkills) technicalSkills[skill] = player.card.technicalSkills[skill];

        switch (player.position) {
            case 'FW':
                technicalSkills.shoot *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.agility *= 3;
                physicalSkills.jump *= 3;
                break;

            case 'WG':
                technicalSkills.cross *= 3;
                technicalSkills.shoot *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.agility *= 3;
                break;

            case 'CM':
                technicalSkills.pass *= 3;
                physicalSkills.agility *= 3;
                physicalSkills.strength *= 3;
                break;

            case 'CD':
                technicalSkills.tackling *= 3;
                physicalSkills.strength *= 3;
                physicalSkills.jump *= 3;
                break;

            case 'WB':
                technicalSkills.cross *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.jump *= 3;
                break;
        }


        //получение asm игрока =============================================
        let phy = 0, te = 0, skillsSum, positionBonus = -2, asm;

        for (let skill in physicalSkills) phy += physicalSkills[skill];
        for (let skill in technicalSkills) te += technicalSkills[skill];

        phy = Math.min(Math.max(-5, phy), 5);
        te = Math.min(Math.max(-5, te), 5);
        skillsSum = Math.min(Math.max(1, phy + te), 10);


        // если текущая игрока позиция подходит "preferedPosition" - бонус = +2
        switch (player.card.preferedPosition) {
            case 'ATT':
                if (player.position === 'FW' || player.position === 'WG') positionBonus = 2;
                break;

            case 'MID':
                if (player.position === 'CM') positionBonus = 2;
                break;

            case 'DEF':
                if (player.position === 'CD' || player.position === 'WB') positionBonus = 2;
                break;

            case 'GK':
                if (player.position === 'GK') positionBonus = 2;
                break;
        }


        // asm = skillsSum(phy + te [1-10]) + card mood [-3 - 3] + positionBonus[-2/2] + card reputation [-2/0/2] = [1-10]
        asm = Math.min(Math.max(1, skillsSum + player.card.mood + positionBonus + ((match.league.level - player.card.playerReputation) * 2)), 10);

        if (asm % 1 !== 0) asm += 0.5 * (player.card.mood < 0 ? -1 : 1);
        //получение asm игрока =============================================

        let asmString =
            `phy=${phy}, te=${te}, mood=${player.card.mood}, ` +
            `reputationBonus=${((match.league.level - player.card.playerReputation) * 2)}, ` +
            `positionBonus=${positionBonus} ==> ` +
            `playerAsm=${asm}`;

        return asmString;
    }

    // debug functions ===================================================================================


    function sortPlayersByAverageRating(a, b) {
        if (a.card.isGoalKeeper) return 1;
        if (b.card.isGoalKeeper) return -1;

        if (a.card.averageRating < b.card.averageRating) return -1;
        if (a.card.averageRating > b.card.averageRating) return 1;

        return 0;
    }

    function findInjured_111(eventedUser, playersWithSkills, injuredPlayers) {
        let STAmPlayersCount = playersWithSkills.STAm.length,
            STAzPlayersCount = playersWithSkills.STAz.length,
            possibleInjuredPlayers = [],
            injuredPlayer;

        if (STAmPlayersCount) {
            for (let j = 0; j < playersWithSkills.STAm.length; j++) {
                let currPlayer = playersWithSkills.STAm[j];
                if (!injuredPlayers.includes(currPlayer.card.playerId)) possibleInjuredPlayers.push(currPlayer);
            }
        }

        if (!possibleInjuredPlayers.length && STAzPlayersCount) {
            for (let j = 0; j < playersWithSkills.STAz.length; j++) {
                let currPlayer = playersWithSkills.STAz[j];
                if (!injuredPlayers.includes(currPlayer.card.playerId)) possibleInjuredPlayers.push(currPlayer);
            }
        }

        if (!possibleInjuredPlayers.length) {
            for (let j = 0; j < 5; j++) {
                let currPlayer = eventedUser.players[j];
                if (!injuredPlayers.includes(currPlayer.card.playerId)) possibleInjuredPlayers.push(currPlayer);
            }

            if (!possibleInjuredPlayers.length) {
                for (let j = 0; j < 5; j++) possibleInjuredPlayers.push(eventedUser.players[j]);
            }
        }

        injuredPlayer = possibleInjuredPlayers[MathService.randomInteger(0, possibleInjuredPlayers.length - 1)];

        return injuredPlayer;
    }

    function findActed_111(anotherUser) {
        let actedPlayer = anotherUser.players[MathService.randomInteger(0, anotherUser.players.length - 2)];

        return actedPlayer;
    }

    function calculatePlayerAsm(player) {
        let technicalSkills = {},
            physicalSkills = {};

        for (let skill in player.card.physicalSkills) physicalSkills[skill] = player.card.physicalSkills[skill];
        for (let skill in player.card.technicalSkills) technicalSkills[skill] = player.card.technicalSkills[skill];

        switch (player.position) {
            case 'FW':
                technicalSkills.shoot *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.agility *= 3;
                physicalSkills.jump *= 3;
                break;

            case 'WG':
                technicalSkills.cross *= 3;
                technicalSkills.shoot *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.agility *= 3;
                break;

            case 'CM':
                technicalSkills.pass *= 3;
                physicalSkills.agility *= 3;
                physicalSkills.strength *= 3;
                break;

            case 'CD':
                technicalSkills.tackling *= 3;
                physicalSkills.strength *= 3;
                physicalSkills.jump *= 3;
                break;

            case 'WB':
                technicalSkills.cross *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.jump *= 3;
                break;
        }


        //получение asm игрока =============================================
        let phy = 0, te = 0, skillsSum, positionBonus = -2, asm;

        for (let skill in physicalSkills) phy += physicalSkills[skill];
        for (let skill in technicalSkills) te += technicalSkills[skill];

        phy = Math.min(Math.max(-5, phy), 5);
        te = Math.min(Math.max(-5, te), 5);
        skillsSum = Math.min(Math.max(1, phy + te), 10);


        // если текущая игрока позиция подходит "preferedPosition" - бонус = +2
        switch (player.card.preferedPosition) {
            case 'ATT':
                if (player.position === 'FW' || player.position === 'WG') positionBonus = 2;
                break;

            case 'MID':
                if (player.position === 'CM') positionBonus = 2;
                break;

            case 'DEF':
                if (player.position === 'CD' || player.position === 'WB') positionBonus = 2;
                break;

            case 'GK':
                if (player.position === 'GK') positionBonus = 2;
                break;
        }


        // asm = skillsSum(phy + te [1-10]) + card mood [-3 - 3] + positionBonus[-2/2] + card reputation [-2/0/2] = [1-10]
        asm = Math.min(Math.max(1, skillsSum + player.card.mood + positionBonus + ((match.league.level - player.card.playerReputation) * 2)), 10);

        if (asm % 1 !== 0) asm += 0.5 * (player.card.mood < 0 ? -1 : 1);
        //получение asm игрока =============================================

        return asm;
    }


    const match = await prisma.match.findFirst({
        select: {
            id: true,
            player1: {
                select: {
                    id: true,
                    avatar: true,
                    lastTactic: true,
                    lastTeam: true,
                    players: {
                        select: {
                            playersJson: true
                        }
                    },
                },
            },
            player2: {
                select: {
                    id: true,
                    avatar: true,
                    lastTactic: true,
                    lastTeam: true,
                    players: {
                        select: {
                            playersJson: true
                        }
                    },
                }
            },
            league: {
                select: {
                    level: true
                }
            }
        },
        where: {
            id: matchId
        },
    });

    let
        matchLogs = [],
        user1 = {
            id: match.player1.id,
            avatar: match.player1.avatar,
            tactic: JSON.parse(match.player1.lastTactic),
            players: [],
            resultLastTeam: JSON.parse(match.player1.lastTeam),
            resultAllPlayers: JSON.parse(match.player1.players.playersJson),
        },
        user2 = {
            id: match.player2.id,
            avatar: match.player2.avatar,
            tactic: JSON.parse(match.player2.lastTactic),
            players: [],
            resultLastTeam: JSON.parse(match.player2.lastTeam),
            resultAllPlayers: JSON.parse(match.player2.players.playersJson),
        },
        playersOnPositions = [
            {
                'FW': [],
                'WG': [],
                'CM': [],
                'WB': [],
                'CD': [],
                'GK': [],
            },
            {
                'FW': [],
                'WG': [],
                'CM': [],
                'WB': [],
                'CD': [],
                'GK': [],
            }
        ],
        playersWithSkills = [
            {
                AGIp: [],
                TCKLp: [],
                PASp: [],
                STAz: [],
                STAm: [],
                AGIm: [],
            },
            {
                AGIp: [],
                TCKLp: [],
                PASp: [],
                STAz: [],
                STAm: [],
                AGIm: [],
            },
        ],
        T = [0, 0],
        goals = [0, 0],
        eventsArrs = [[], []], //d
        debugLogs = {
            matchId: match.id,
            score: null,
            user1: {
                id: user1.id,
                players: user1.players,
                playersAsm: [],
                homeBonus: 3,
                avatarBonus: 0,
                T: 0,
            },
            user2: {
                id: user2.id,
                players: user2.players,
                playersAsm: [],
                homeBonus: 0,
                avatarBonus: 0,
                T: 0,
            },
        }; //d


    // заполнение массивов players ссылками на этих же игроков из resultAllPlayers =====================================
    function sortPlayersById_1(a, b) {
        if (a.playerId < b.playerId) return -1;
        if (a.playerId > b.playerId) return 1;
        return 0;
    }

    user1.resultLastTeam.sort(sortPlayersById_1);
    user2.resultLastTeam.sort(sortPlayersById_1);
    user1.resultAllPlayers.sort(sortPlayersById_1);
    user2.resultAllPlayers.sort(sortPlayersById_1);

    let rapPlIdx = 0;
    for (let ltPlIdx = 0; ltPlIdx < user1.resultLastTeam.length; ltPlIdx++) {
        while (user1.resultAllPlayers[rapPlIdx].playerId !== user1.resultLastTeam[ltPlIdx].playerId) rapPlIdx++;

        user1.resultAllPlayers[rapPlIdx].seasonRatingMarks.push(6.6); //начальная оценка за матч

        user1.players.push({
            card: user1.resultAllPlayers[rapPlIdx],
            position: {
                name: user1.resultLastTeam[ltPlIdx].position.split(':')[0],
                index: user1.resultLastTeam[ltPlIdx].position.split(':')[1],
            },
            asm: undefined,
        });
    }

    rapPlIdx = 0;
    for (let ltPlIdx = 0; ltPlIdx < user2.resultLastTeam.length; ltPlIdx++) {
        while (user2.resultAllPlayers[rapPlIdx].playerId !== user2.resultLastTeam[ltPlIdx].playerId) rapPlIdx++;

        user2.resultAllPlayers[rapPlIdx].seasonRatingMarks.push(6.6); //начальная оценка за матч

        user2.players.push({
            card: user2.resultAllPlayers[rapPlIdx],
            position: {
                name: user2.resultLastTeam[ltPlIdx].position.split(':')[0],
                index: user2.resultLastTeam[ltPlIdx].position.split(':')[1],
            },
            asm: undefined,
        });
    }


    user1.players.sort(sortPlayersByAverageRating);
    user2.players.sort(sortPlayersByAverageRating);
    // заполнение массивов players ссылками на этих же игроков из resultAllPlayers =====================================


    user1.players.forEach((player) => {
        // добавление игрока в массив игроков на {позиции}
        playersOnPositions[0][player.position.name].push(player);

        // добавление игрока в массивы со скиллами =========================================
        if (player.card.physicalSkills.agility > 0) playersWithSkills[0].AGIp.push(player);
        else if (player.card.physicalSkills.agility < 0) playersWithSkills[0].AGIm.push(player);

        if (player.card.technicalSkills.tackling > 0) playersWithSkills[0].TCKLp.push(player);

        if (player.card.technicalSkills.pass > 0) playersWithSkills[0].PASp.push(player);

        if (player.card.physicalSkills.stamina < 0) playersWithSkills[0].STAm.push(player);
        else if (player.card.physicalSkills.stamina === 0) playersWithSkills[0].STAz.push(player);
        // добавление игрока в массивы со скиллами =========================================

        let playerAsm = calculatePlayerAsm(player);
        T[0] += playerAsm;
        player.asm = playerAsm;

        debugLogs.user1.playersAsm.push({
            playerId: player.card.playerId,
            playerName: player.card.playerName,
            asmCalc: getPlayerAsmParts(player),
            asmSum: playerAsm,
        }); //d
    });
    user2.players.forEach((player) => {
        //распределение в массивах игроков на позициях
        playersOnPositions[1][player.position.name].push(player);

        // добавление игрока в массивы со скиллами =========================================
        if (player.card.physicalSkills.agility > 0) playersWithSkills[1].AGIp.push(player);
        else if (player.card.physicalSkills.agility < 0) playersWithSkills[1].AGIm.push(player);

        if (player.card.technicalSkills.tackling > 0) playersWithSkills[1].TCKLp.push(player);

        if (player.card.technicalSkills.pass > 0) playersWithSkills[1].PASp.push(player);

        if (player.card.physicalSkills.stamina < 0) playersWithSkills[1].STAm.push(player);
        else if (player.card.physicalSkills.stamina === 0) playersWithSkills[1].STAz.push(player);
        // добавление игрока в массивы со скиллами =========================================

        let playerAsm = calculatePlayerAsm(player);
        T[1] += playerAsm;
        player.asm = playerAsm;

        debugLogs.user2.playersAsm.push({
            playerId: player.card.playerId,
            playerName: player.card.playerName,
            asmCalc: getPlayerAsmParts(player),
            asmSum: playerAsm,
        }); //d
    });

    debugLogs.user1.T_players = T[0]; //d
    debugLogs.user2.T_players = T[1]; //d


    T[0] += 3; //доп очки за домашнюю тиму
    if (user1.avatar !== user2.avatar) {
        if (avatarDefying[user1.avatar].includes(user2.avatar)) {
            T[0] += 6;

            debugLogs.user1.avatarBonus = 3;//debug
        }
        else if (avatarDefying[user2.avatar].includes(user1.avatar)) {
            T[1] += 6;

            debugLogs.user2.avatarBonus = 3;//debug
        }
    } // доп очки за контр тренеров

    debugLogs.user1.T_players_bonuses = T[0]; //d
    debugLogs.user2.T_players_bonuses = T[1]; //d


    let advantage = Math.abs(T[0] - T[1]),
        momentsCount1 = {
            firstTime: [0, 0],
            secondTime: [0, 0]
        };


    let user1MomCount = Math.round(T[0] / ((T[0] + T[1]) / 16));
    momentsCount1.firstTime = [user1MomCount, 16 - user1MomCount];


    debugLogs.user1.T_players_bonuses_adv = T[0]; //d
    debugLogs.user2.T_players_bonuses_adv = T[1]; //d


    function changeRating(player, ratingDiff) {
        player.card.seasonRatingMarks[player.card.seasonRatingMarks.length - 1] = Number((player.card.seasonRatingMarks[player.card.seasonRatingMarks.length - 1] + ratingDiff).toFixed(2));
    }

    let xG = [0, 0], xG1 = [0, 0], xG2 = [0, 0], lastPotGoalMinute = null;


    matchLogs.push({
        minute: '0',
        user: null,
        momentType: null,
        result: 'Match started!'
    });


    function getMoment(minute, availableMomentsCount, T, xG, xgTime, matchLogs) {
        let player = MathService.randomFloat(0, T[0] + T[1]) <= T[0] ? 0 : 1,
            randNum = MathService.randomInteger(1, 10),
            momentType = randNum >= 1 && randNum <= 2 ? 13 : randNum >= 3 && randNum <= 6 ? 12 : 11,
            momentWeight = 0.5 * (momentType - 9);

        if (availableMomentsCount[player] === 0) player = (player + 1) % 2;
        availableMomentsCount[player]--;


        T[player] += momentWeight; // чтобы получить вес 1/1.5/2 (11 -9. 12 - 9, 13 - 9)
        xG[player] += momentWeight;
        xgTime[player] += momentWeight;

        eventsArrs[player].push(momentType); //d

        matchLogs.push({
            minute,
            user: player,
            momentType,
            result: ''
        });
    }

    //первый тайм ===================================================================
    for (let i = 3; i <= 45; i += 3) getMoment(i.toString(), momentsCount1.firstTime, T, xG, xG1, matchLogs);
    getMoment(`45'add`, momentsCount1.firstTime, T, xG, xG1, matchLogs);

    xG1[0] /= 10;
    xG1[1] /= 10;
    //первый тайм ===================================================================

    eventsArrs[0].push("==="); //d
    eventsArrs[1].push("==="); //d


    advantage = Math.abs(T[0] - T[1]);

    user1MomCount = Math.round(T[0] / ((T[0] + T[1]) / 16));
    momentsCount1.secondTime = [user1MomCount, 16 - user1MomCount];

    if (momentsCount1.secondTime[0] > momentsCount1.secondTime[1]) momentsCount1.secondTime[1]++;
    else momentsCount1.secondTime[0]++;


    //второй тайм ===================================================================
    for (let i = 45; i <= 90; i += 3) getMoment(i.toString(), momentsCount1.secondTime, T, xG, xG2, matchLogs);
    if (momentsCount1.secondTime[0] + momentsCount1.secondTime[1]) getMoment(`90'add`, momentsCount1.secondTime, T, xG, xG2, matchLogs);

    xG2[0] /= 10;
    xG2[1] /= 10;
    //второй тайм ===================================================================


    // получение ивентов в матче ===============================================================================
    for (let i = matchLogs.length - 1; i > 0; i--) {
        if (matchLogs[i].momentType === 13) {
            lastPotGoalMinute = matchLogs[i].minute;
            break;
        }
    }

    let playersWithYellowCards = [[], []], injuredPlayers = [[], []], kickedPlayers = [[], []];

    xG[0] = xG1[0];
    xG[1] = xG1[1];

    for (let i = 1; i < matchLogs.length; i++) {
        // добавляем xG первого тайма
        if (i === 17) {
            xG[0] += xG2[0];
            xG[1] += xG2[1];
        }

        let event = matchLogs[i],
            eventCode,
            eventedUser, scoredUser, anotherUser,
            AGIpPlayersCount, TCKLpPlayersCount, PASpPlayersCount, AGImPlayersCount, // для удобства
            actedPlayer, possibleActedPlayers, injuredPlayer;

        switch (event.momentType) {
            case 11:
                eventedUser = event.user === 0 ? user1 : user2;
                anotherUser = event.user === 0 ? user2 : user1;

                eventCode = MathService.randomInteger(111, 115);

                switch (eventCode) {
                    case 111:
                        injuredPlayer = findInjured_111(eventedUser, playersWithSkills[event.user], injuredPlayers[event.user]);
                        injuredPlayers[event.user].push(injuredPlayer.card.playerId);
                        changeRating(injuredPlayer, -0.2);

                        actedPlayer = findActed_111(anotherUser);
                        actedPlayer.card.seasonYellowCardsCount++;
                        changeRating(actedPlayer, -0.4);


                        if (playersWithYellowCards[(event.user + 1) % 2].includes(actedPlayer.card.playerId)) {
                            kickedPlayers[(event.user + 1) % 2].push(actedPlayer);
                            actedPlayer.card.unavailableMatchesCount = 2; // на 1 больше, ибо вконце разыгровки будет декремент

                            // удаление из массива игроков
                            for (let plIdx = 0; plIdx < anotherUser.players.length; plIdx++) {
                                if (anotherUser.players[plIdx].card.playerId === actedPlayer.card.playerId) {
                                    anotherUser.players.splice(plIdx, 1);
                                    break;
                                }
                            }

                            // удаление из игроков на позициях
                            for (let plIdx = 0; plIdx < playersOnPositions[(event.user + 1) % 2][actedPlayer.position.name].length; plIdx++) {
                                if (playersOnPositions[(event.user + 1) % 2][actedPlayer.position.name][plIdx].card.playerId === actedPlayer.card.playerId) {
                                    playersOnPositions[(event.user + 1) % 2][actedPlayer.position.name].splice(plIdx, 1);
                                    break;
                                }
                            }

                            // удаление из игроков по скиллах ===========================================================================
                            if (actedPlayer.card.physicalSkills.agility > 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].AGIp.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].AGIp[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].AGIp.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }
                            else if (actedPlayer.card.physicalSkills.agility < 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].AGIm.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].AGIm[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].AGIm.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }

                            if (actedPlayer.card.physicalSkills.stamina === 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].STAz.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].STAz[plIdx].playerId === actedPlayer.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].STAz.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }
                            else if (actedPlayer.card.physicalSkills.stamina < 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].STAm.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].STAm[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].STAm.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }

                            if (actedPlayer.card.technicalSkills.tackling > 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].TCKLp.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].TCKLp[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].TCKLp.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }

                            if (actedPlayer.card.technicalSkills.pass > 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].PASp.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].PASp[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].PASp.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }
                            // удаление из игроков по скиллах ===========================================================================


                            // замена игрока в "последнем составе" ========================================================
                            anotherUser.resultLastTeam.sort(sortPlayersById_1);
                            anotherUser.resultAllPlayers.sort(sortPlayersById_1);

                            let replacementPlayers = {
                                    ATT: [],
                                    MID: [],
                                    DEF: [],
                                },
                                allPlIdx = 0,
                                replacedPlayer = null;

                            for (let ltPlIdx = 0; ltPlIdx < anotherUser.resultLastTeam.length; ltPlIdx++) {
                                while (anotherUser.resultAllPlayers[allPlIdx].playerId !== anotherUser.resultLastTeam[ltPlIdx].playerId) {
                                    if (anotherUser.resultAllPlayers[allPlIdx].unavailableMatchesCount <= 1) replacementPlayers[anotherUser.resultAllPlayers[allPlIdx].preferedPosition].push(anotherUser.resultAllPlayers[allPlIdx]);
                                    allPlIdx++;
                                }
                                allPlIdx++;
                            }

                            if (actedPlayer.position.name === "FW" || actedPlayer.position.name === "WG") {
                                if (replacementPlayers.ATT.length) replacedPlayer = replacementPlayers.ATT[MathService.randomInteger(0, replacementPlayers.ATT.length - 1)];
                                else {
                                    let availablePlayers = [...replacementPlayers.MID, ...replacementPlayers.DEF];
                                    replacedPlayer = availablePlayers[MathService.randomInteger(0, availablePlayers.length - 1)];
                                }
                            }
                            else if (actedPlayer.position.name === "CM") {
                                if (replacementPlayers.MID.length) replacedPlayer = replacementPlayers.MID[MathService.randomInteger(0, replacementPlayers.MID.length - 1)];
                                else {
                                    let availablePlayers = [...replacementPlayers.ATT, ...replacementPlayers.DEF];
                                    replacedPlayer = availablePlayers[MathService.randomInteger(0, availablePlayers.length - 1)];
                                }
                            }
                            else if (actedPlayer.position.name === "CD" || actedPlayer.position.name === "WB") {
                                if (replacementPlayers.DEF.length) replacedPlayer = replacementPlayers.DEF[MathService.randomInteger(0, replacementPlayers.DEF.length - 1)];
                                else {
                                    let availablePlayers = [...replacementPlayers.ATT, ...replacementPlayers.MID];
                                    replacedPlayer = availablePlayers[MathService.randomInteger(0, availablePlayers.length - 1)];
                                }
                            }

                            replacedPlayer = JSON.parse(JSON.stringify(replacedPlayer));
                            replacedPlayer.position = actedPlayer.position.name + ':' + actedPlayer.position.index;

                            for (let plIdx = 0; plIdx < anotherUser.resultLastTeam.length; plIdx++) {
                                if (anotherUser.resultLastTeam[plIdx].playerId === actedPlayer.card.playerId) {
                                    anotherUser.resultLastTeam[plIdx] = replacedPlayer;
                                    break;
                                }
                            }
                            // замена игрока в "последнем составе" ========================================================


                            // отдача всех 13 моментов противоположной команде ============================================
                            for (let evIdx = i + 1; evIdx < matchLogs.length; evIdx++)
                                if (matchLogs[evIdx].momentType === 13 &&
                                    matchLogs[evIdx].user === ((event.user + 1) % 2)) matchLogs[evIdx].user = event.user;
                            // отдача всех 13 моментов противоположной команде ============================================
                        }
                        else {
                            playersWithYellowCards[(event.user + 1) % 2].push(actedPlayer.card.playerId);
                            if (actedPlayer.card.seasonYellowCardsCount === 8) {
                                actedPlayer.card.seasonYellowCardsCount = 0;
                                actedPlayer.card.unavailableMatchesCount = 2; // на 1 больше, ибо вконце разыгровки будет декремент

                                // замена игрока в "последнем составе" ========================================================
                                anotherUser.resultLastTeam.sort(sortPlayersById_1);
                                anotherUser.resultAllPlayers.sort(sortPlayersById_1);

                                let replacementPlayers = {
                                        ATT: [],
                                        MID: [],
                                        DEF: [],
                                    },
                                    allPlIdx = 0,
                                    replacedPlayer = null;

                                for (let ltPlIdx = 0; ltPlIdx < anotherUser.resultLastTeam.length; ltPlIdx++) {
                                    while (anotherUser.resultAllPlayers[allPlIdx].playerId !== anotherUser.resultLastTeam[ltPlIdx].playerId) {
                                        if (anotherUser.resultAllPlayers[allPlIdx].unavailableMatchesCount <= 1) replacementPlayers[anotherUser.resultAllPlayers[allPlIdx].preferedPosition].push(anotherUser.resultAllPlayers[allPlIdx]);
                                        allPlIdx++;
                                    }
                                    allPlIdx++;
                                }

                                if (actedPlayer.position.name === "FW" || actedPlayer.position.name === "WG") {
                                    if (replacementPlayers.ATT.length) replacedPlayer = replacementPlayers.ATT[MathService.randomInteger(0, replacementPlayers.ATT.length - 1)];
                                    else {
                                        let availablePlayers = [...replacementPlayers.MID, ...replacementPlayers.DEF];
                                        replacedPlayer = availablePlayers[MathService.randomInteger(0, availablePlayers.length - 1)];
                                    }
                                }
                                else if (actedPlayer.position.name === "CM") {
                                    if (replacementPlayers.MID.length) replacedPlayer = replacementPlayers.MID[MathService.randomInteger(0, replacementPlayers.MID.length - 1)];
                                    else {
                                        let availablePlayers = [...replacementPlayers.ATT, ...replacementPlayers.DEF];
                                        replacedPlayer = availablePlayers[MathService.randomInteger(0, availablePlayers.length - 1)];
                                    }
                                }
                                else if (actedPlayer.position.name === "CD" || actedPlayer.position.name === "WB") {
                                    if (replacementPlayers.DEF.length) replacedPlayer = replacementPlayers.DEF[MathService.randomInteger(0, replacementPlayers.DEF.length - 1)];
                                    else {
                                        let availablePlayers = [...replacementPlayers.ATT, ...replacementPlayers.MID];
                                        replacedPlayer = availablePlayers[MathService.randomInteger(0, availablePlayers.length - 1)];
                                    }
                                }

                                replacedPlayer = JSON.parse(JSON.stringify(replacedPlayer));
                                replacedPlayer.position = actedPlayer.position.name + ':' + actedPlayer.position.index;

                                for (let plIdx = 0; plIdx < anotherUser.resultLastTeam.length; plIdx++) {
                                    if (anotherUser.resultLastTeam[plIdx].playerId === actedPlayer.card.playerId) {
                                        anotherUser.resultLastTeam[plIdx] = replacedPlayer;
                                        break;
                                    }
                                }
                                // замена игрока в "последнем составе" ========================================================
                            }
                        }


                        event.result = `${injuredPlayer.card.playerName} is injured - ${actedPlayer.card.playerName} will be punished by a yellow card`;
                        event.players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position.name,
                                ratingDiff: -0.4,
                            },
                            {
                                playerId: injuredPlayer.card.playerId,
                                playerName: injuredPlayer.card.playerName,
                                position: injuredPlayer.position.name,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;

                    case 112:
                        AGImPlayersCount = playersWithSkills[event.user].AGIm.length;

                        if (AGImPlayersCount) actedPlayer = playersWithSkills[event.user].AGIm[MathService.randomInteger(0, AGImPlayersCount - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        event.result = `Unlucky dribbling - ${actedPlayer.card.playerName}`;
                        event.players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position.name,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;

                    case 113:
                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];

                        if (possibleActedPlayers.length) actedPlayer = possibleActedPlayers[MathService.randomInteger(0, possibleActedPlayers.length - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(0, eventedUser.players.length - 2)];
                        changeRating(actedPlayer, -0.2);

                        event.result = `Unlucky cross - ${actedPlayer.card.playerName}`;
                        event.players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position.name,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;

                    case 114:
                        event.result = `Slow passing in the midfield`;
                        event.players = [];
                        break;

                    case 115:
                        actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        event.result = `${actedPlayer.card.playerName} made a mistake`;
                        event.players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position.name,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;
                }
                break;

            case 12:
                eventedUser = event.user === 0 ? user1 : user2;
                anotherUser = event.user === 0 ? user2 : user1;

                eventCode = MathService.randomInteger(121, 125);

                switch (eventCode) {
                    case 121:
                        actedPlayer = eventedUser.players[MathService.randomInteger(0, eventedUser.players.length - 2)];

                        event.result = `Shot off target`;
                        event.players = [{
                            playerId: actedPlayer.card.playerId,
                            playerName: actedPlayer.card.playerName,
                            position: actedPlayer.position.name,
                            ratingDiff: 0,
                        }];
                        break;

                    case 122:
                        AGIpPlayersCount = playersWithSkills[event.user].AGIp.length;

                        if (AGIpPlayersCount) actedPlayer = playersWithSkills[event.user].AGIp[MathService.randomInteger(0, AGIpPlayersCount - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(eventedUser.players.length - 6, eventedUser.players.length - 2)];
                        changeRating(actedPlayer, 0.2);

                        event.result = `Successful dribbling by ${actedPlayer.card.playerName}`;
                        event.players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position.name,
                                ratingDiff: 0.2,
                            }
                        ];
                        break;

                    case 123:
                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];
                        possibleActedPlayers.sort(function (a, b) {
                            if (a.card.averageRating < b.card.averageRating) return -1;
                            if (a.card.averageRating > b.card.averageRating) return 1;
                            return 0;
                        });

                        actedPlayer = possibleActedPlayers[possibleActedPlayers.length - 1];
                        changeRating(actedPlayer, 0.2);

                        event.result = `Promising cross by ${actedPlayer.card.playerName}`;
                        event.players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position.name,
                                ratingDiff: 0.2,
                            }
                        ];
                        break;

                    case 124:
                        TCKLpPlayersCount = playersWithSkills[event.user].TCKLp.length;

                        if (TCKLpPlayersCount) actedPlayer = playersWithSkills[event.user].TCKLp[MathService.randomInteger(0, TCKLpPlayersCount - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(eventedUser.players.length - 6, eventedUser.players.length - 2)];
                        changeRating(actedPlayer, 0.2);

                        injuredPlayer = anotherUser.players[MathService.randomInteger(0, anotherUser.players.length - 2)];

                        event.result = `${actedPlayer.card.playerName} light injured ${injuredPlayer.card.playerName}`;
                        event.players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position.name,
                                ratingDiff: -0.2,
                            },
                            {
                                playerId: injuredPlayer.card.playerId,
                                playerName: injuredPlayer.card.playerName,
                                position: injuredPlayer.position.name,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;

                    case 125:
                        PASpPlayersCount = playersWithSkills[event.user].PASp.length;

                        if (PASpPlayersCount) actedPlayer = playersWithSkills[event.user].PASp[MathService.randomInteger(0, PASpPlayersCount - 1)];
                        else {
                            playersOnPositions[event.user].CM.sort(function (a, b) {
                                if (a.card.averageRating < b.card.averageRating) return -1;
                                if (a.card.averageRating > b.card.averageRating) return 1;
                                return 0;
                            });
                            actedPlayer = playersOnPositions[event.user].CM[playersOnPositions[event.user].CM.length - 1];
                        }

                        changeRating(actedPlayer, 0.2);

                        event.result = `Promising through pass by ${actedPlayer.card.playerName}`;
                        event.players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position.name,
                                ratingDiff: 0.2,
                            }
                        ];
                        break;
                }
                break;

            case 13:
                let chanceNumbers = Math.floor(xG[event.user] / 0.25);

                if (event.minute === lastPotGoalMinute && goals[0] === goals[1]) chanceNumbers++;

                let randNumbers = MathService.randomInteger(1, 10),
                    goal = randNumbers <= chanceNumbers ? 1 : 0;

                if (goal) {
                    let scoredPlayer, assistantPlayer, possibleScoredPlayers;

                    scoredUser = event.user === 0 ? user1 : user2;
                    anotherUser = event.user === 0 ? user2 : user1;

                    goals[event.user]++;
                    xG[event.user] = Math.max(0, xG[event.user] - 1); //чтобы xG игрока не был меньше 0

                    switch (scoredUser.tactic.teamFocus) {
                        case 'wing-play':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                eventCode = 131;


                                if (playersOnPositions[event.user].FW.length) {
                                    scoredPlayer = playersOnPositions[event.user].FW[0];

                                    let avgTeamAsm = 0;
                                    for (let j = 0; j < scoredUser.players.length; j++) avgTeamAsm += scoredUser.players[j].asm;
                                    avgTeamAsm /= scoredUser.players.length;

                                    if (scoredPlayer.asm > avgTeamAsm) {
                                        if (playersOnPositions[event.user].WG.length) {
                                            let scPlIdx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);

                                            scoredPlayer = playersOnPositions[event.user].WG[scPlIdx];

                                            if (playersOnPositions[event.user].WG.length >= 2) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [scPlIdx])];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                        }
                                        else if (playersOnPositions[event.user].CM.length) {
                                            let scPlIdx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);

                                            scoredPlayer = playersOnPositions[event.user].CM[scPlIdx];

                                            if (playersOnPositions[event.user].CM.length >= 2) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [scPlIdx])];
                                            else if (playersOnPositions[event.user].WB.length) assistantPlayer = playersOnPositions[event.user].WB[MathService.randomInteger(0, playersOnPositions[event.user].WB.length - 1)];
                                        }
                                    }
                                    else {
                                        if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                    }
                                }
                                else if (playersOnPositions[event.user].WG.length) {
                                    let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                    scoredPlayer = playersOnPositions[event.user].WG[idx];

                                    if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                    else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                }
                                else if (playersOnPositions[event.user].CM.length) {
                                    let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                    scoredPlayer = playersOnPositions[event.user].CM[idx];

                                    if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                    else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                        let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                    }
                                }

                                changeRating(scoredPlayer, 0.8);
                                changeRating(assistantPlayer, 0.8);


                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }

                                event.result = `${scoredPlayer.card.playerName} scores a header delivered by ${assistantPlayer.card.playerName}`;
                                event.players = [
                                    {
                                        playerId: scoredPlayer.card.playerId,
                                        playerName: scoredPlayer.card.playerName,
                                        position: scoredPlayer.position.name,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerId: assistantPlayer.card.playerId,
                                        playerName: assistantPlayer.card.playerName,
                                        position: assistantPlayer.position.name,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    },
                                ];
                            }
                            else {
                                eventCode = MathService.randomInteger(131, 136);

                                switch (eventCode) {
                                    case 131:
                                        if (playersOnPositions[event.user].FW.length) {
                                            scoredPlayer = playersOnPositions[event.user].FW[0];

                                            let avgTeamAsm = 0;
                                            for (let j = 0; j < scoredUser.players.length; j++) avgTeamAsm += scoredUser.players[j].asm;
                                            avgTeamAsm /= scoredUser.players.length;

                                            if (scoredPlayer.asm > avgTeamAsm) {
                                                if (playersOnPositions[event.user].WG.length) {
                                                    let scPlIdx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);

                                                    scoredPlayer = playersOnPositions[event.user].WG[scPlIdx];

                                                    if (playersOnPositions[event.user].WG.length >= 2) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [scPlIdx])];
                                                    else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                                }
                                                else if (playersOnPositions[event.user].CM.length) {
                                                    let scPlIdx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);

                                                    scoredPlayer = playersOnPositions[event.user].CM[scPlIdx];

                                                    if (playersOnPositions[event.user].CM.length >= 2) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [scPlIdx])];
                                                    else if (playersOnPositions[event.user].WB.length) assistantPlayer = playersOnPositions[event.user].WB[MathService.randomInteger(0, playersOnPositions[event.user].WB.length - 1)];
                                                }
                                            }
                                            else {
                                                if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                                else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                            }
                                        }
                                        else if (playersOnPositions[event.user].WG.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].WG[idx];

                                            if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        }
                                        else if (playersOnPositions[event.user].CM.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];

                                            if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        event.result = `${scoredPlayer.card.playerName} scores a header delivered by ${assistantPlayer.card.playerName}`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.card.playerId,
                                                playerName: assistantPlayer.card.playerName,
                                                position: assistantPlayer.position.name,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        break;

                                    case 132:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.4);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        event.result = `Spectacular powershot by ${scoredPlayer.card.playerName}`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 0.4,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 133:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        event.result = `${scoredPlayer.card.playerName} scores after solo breakthrough`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 134:
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            // scoredPlayer = (FW|WG)
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                            // assistantPlayer = CM
                                            if (playersOnPositions[event.user].CM.length) {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                            }
                                            // assistantPlayer = (CD|WB)
                                            else {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                        }
                                        else {
                                            // scoredPlayer = CM
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];


                                            // assistantPlayer = (CD|WB)
                                            if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                            // assistantPlayer = CM
                                            else {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        event.result = `Goal! ${scoredPlayer.card.playerName} runs and ${assistantPlayer.card.playerName} provides an assist`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.card.playerId,
                                                playerName: assistantPlayer.card.playerName,
                                                position: assistantPlayer.position.name,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 135:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        event.result = `Goal! ${scoredPlayer.card.playerName} used opponent’s silly mistake`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 136:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        event.result = `Goal! Brilliant team-play finished by ${scoredPlayer.card.playerName}`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.5,
                                            }
                                        ];
                                        break;
                                }
                            }
                            break;

                        case 'midfield':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                eventCode = 134;


                                if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                    // scoredPlayer = (FW|WG)
                                    possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                    scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                    // assistantPlayer = CM
                                    if (playersOnPositions[event.user].CM.length) {
                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                    }
                                    // assistantPlayer = (CD|WB)
                                    else {
                                        let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                    }
                                }
                                else {
                                    // scoredPlayer = CM
                                    let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                    scoredPlayer = playersOnPositions[event.user].CM[idx];


                                    // assistantPlayer = (CD|WB)
                                    if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                        let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                    }
                                    // assistantPlayer = CM
                                    else {
                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                    }
                                }

                                changeRating(scoredPlayer, 0.8);
                                changeRating(assistantPlayer, 0.8);


                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }

                                event.result = `Goal! ${scoredPlayer.card.playerName} runs and ${assistantPlayer.card.playerName} provides an assist`;
                                event.players = [
                                    {
                                        playerId: scoredPlayer.card.playerId,
                                        playerName: scoredPlayer.card.playerName,
                                        position: scoredPlayer.position.name,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerId: assistantPlayer.card.playerId,
                                        playerName: assistantPlayer.card.playerName,
                                        position: assistantPlayer.position.name,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    }
                                ];
                            }
                            else {
                                eventCode = MathService.randomInteger(131, 136);

                                switch (eventCode) {
                                    case 131:
                                        if (playersOnPositions[event.user].FW.length) {
                                            scoredPlayer = playersOnPositions[event.user].FW[0];

                                            let avgTeamAsm = 0;
                                            for (let j = 0; j < scoredUser.players.length; j++) avgTeamAsm += scoredUser.players[j].asm;
                                            avgTeamAsm /= scoredUser.players.length;

                                            if (scoredPlayer.asm > avgTeamAsm) {
                                                if (playersOnPositions[event.user].WG.length) {
                                                    let scPlIdx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);

                                                    scoredPlayer = playersOnPositions[event.user].WG[scPlIdx];

                                                    if (playersOnPositions[event.user].WG.length >= 2) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [scPlIdx])];
                                                    else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                                }
                                                else if (playersOnPositions[event.user].CM.length) {
                                                    let scPlIdx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);

                                                    scoredPlayer = playersOnPositions[event.user].CM[scPlIdx];

                                                    if (playersOnPositions[event.user].CM.length >= 2) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [scPlIdx])];
                                                    else if (playersOnPositions[event.user].WB.length) assistantPlayer = playersOnPositions[event.user].WB[MathService.randomInteger(0, playersOnPositions[event.user].WB.length - 1)];
                                                }
                                            }
                                            else {
                                                if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                                else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                            }
                                        }
                                        else if (playersOnPositions[event.user].WG.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].WG[idx];

                                            if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        }
                                        else if (playersOnPositions[event.user].CM.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];

                                            if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        event.result = `${scoredPlayer.card.playerName} scores a header delivered by ${assistantPlayer.card.playerName}`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.card.playerId,
                                                playerName: assistantPlayer.card.playerName,
                                                position: assistantPlayer.position.name,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        break;

                                    case 132:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.4);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        event.result = `Spectacular powershot by ${scoredPlayer.card.playerName}`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 0.4,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 133:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        event.result = `${scoredPlayer.card.playerName} scores after solo breakthrough`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 134:
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            // scoredPlayer = (FW|WG)
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                            // assistantPlayer = CM
                                            if (playersOnPositions[event.user].CM.length) {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                            }
                                            // assistantPlayer = (CD|WB)
                                            else {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                        }
                                        else {
                                            // scoredPlayer = CM
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];


                                            // assistantPlayer = (CD|WB)
                                            if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                            // assistantPlayer = CM
                                            else {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        event.result = `Goal! ${scoredPlayer.card.playerName} runs and ${assistantPlayer.card.playerName} provides an assist`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.card.playerId,
                                                playerName: assistantPlayer.card.playerName,
                                                position: assistantPlayer.position.name,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 135:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        event.result = `Goal! ${scoredPlayer.card.playerName} used opponent’s silly mistake`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 136:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        event.result = `Goal! Brilliant team-play finished by ${scoredPlayer.card.playerName}`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.5,
                                            }
                                        ];
                                        break;
                                }
                            }
                            break;

                        case 'stepUp':
                            eventCode = MathService.randomInteger(131, 136);

                            switch (eventCode) {
                                case 131:
                                    if (playersOnPositions[event.user].FW.length) {
                                        scoredPlayer = playersOnPositions[event.user].FW[0];

                                        let avgTeamAsm = 0;
                                        for (let j = 0; j < scoredUser.players.length; j++) avgTeamAsm += scoredUser.players[j].asm;
                                        avgTeamAsm /= scoredUser.players.length;

                                        if (scoredPlayer.asm > avgTeamAsm) {
                                            if (playersOnPositions[event.user].WG.length) {
                                                let scPlIdx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);

                                                scoredPlayer = playersOnPositions[event.user].WG[scPlIdx];

                                                if (playersOnPositions[event.user].WG.length >= 2) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [scPlIdx])];
                                                else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                            }
                                            else if (playersOnPositions[event.user].CM.length) {
                                                let scPlIdx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);

                                                scoredPlayer = playersOnPositions[event.user].CM[scPlIdx];

                                                if (playersOnPositions[event.user].CM.length >= 2) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [scPlIdx])];
                                                else if (playersOnPositions[event.user].WB.length) assistantPlayer = playersOnPositions[event.user].WB[MathService.randomInteger(0, playersOnPositions[event.user].WB.length - 1)];
                                            }
                                        }
                                        else {
                                            if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                        }
                                    }
                                    else if (playersOnPositions[event.user].WG.length) {
                                        let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                        scoredPlayer = playersOnPositions[event.user].WG[idx];

                                        if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                        else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                    }
                                    else if (playersOnPositions[event.user].CM.length) {
                                        let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                        scoredPlayer = playersOnPositions[event.user].CM[idx];

                                        if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                        else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                            let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                        }
                                    }

                                    changeRating(scoredPlayer, 0.8);
                                    changeRating(assistantPlayer, 0.8);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    event.result = `${scoredPlayer.card.playerName} scores a header delivered by ${assistantPlayer.card.playerName}`;
                                    event.players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position.name,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerId: assistantPlayer.card.playerId,
                                            playerName: assistantPlayer.card.playerName,
                                            position: assistantPlayer.position.name,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        },
                                    ];
                                    break;

                                case 132:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 0.4);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    event.result = `Spectacular powershot by ${scoredPlayer.card.playerName}`;
                                    event.players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position.name,
                                            role: 'player',
                                            ratingDiff: 0.4,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 133:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 1);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    event.result = `${scoredPlayer.card.playerName} scores after solo breakthrough`;
                                    event.players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position.name,
                                            role: 'player',
                                            ratingDiff: 1,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 134:
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        // scoredPlayer = (FW|WG)
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                        // assistantPlayer = CM
                                        if (playersOnPositions[event.user].CM.length) {
                                            assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                        }
                                        // assistantPlayer = (CD|WB)
                                        else {
                                            let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                        }
                                    }
                                    else {
                                        // scoredPlayer = CM
                                        let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                        scoredPlayer = playersOnPositions[event.user].CM[idx];


                                        // assistantPlayer = (CD|WB)
                                        if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                            let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                        }
                                        // assistantPlayer = CM
                                        else {
                                            assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                        }
                                    }

                                    changeRating(scoredPlayer, 0.8);
                                    changeRating(assistantPlayer, 0.8);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    event.result = `Goal! ${scoredPlayer.card.playerName} runs and ${assistantPlayer.card.playerName} provides an assist`;
                                    event.players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position.name,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerId: assistantPlayer.card.playerId,
                                            playerName: assistantPlayer.card.playerName,
                                            position: assistantPlayer.position.name,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 135:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 1);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    event.result = `Goal! ${scoredPlayer.card.playerName} used opponent’s silly mistake`;
                                    event.players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position.name,
                                            role: 'player',
                                            ratingDiff: 1,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 136:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 0.8);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                    }

                                    event.result = `Goal! Brilliant team-play finished by ${scoredPlayer.card.playerName}`;
                                    event.players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position.name,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.5,
                                        }
                                    ];
                                    break;
                            }
                            break;
                    }


                    //поиск виноватого игрока ================================================
                    let value = Math.random(),
                        anotherUserIdx = (event.user + 1) % 2,
                        guiltPlayer;

                    if (value <= 0.15) guiltPlayer = playersOnPositions[anotherUserIdx].GK[0];
                    else if (value <= 0.30) {
                        let possibleGuiltPlayers = [...playersOnPositions[anotherUserIdx].FW, ...playersOnPositions[anotherUserIdx].WG];
                        guiltPlayer = possibleGuiltPlayers[MathService.randomInteger(0, possibleGuiltPlayers.length - 1)];
                    }
                    else if (value <= 0.60) guiltPlayer = playersOnPositions[anotherUserIdx].CM[MathService.randomInteger(0, playersOnPositions[anotherUserIdx].CM.length - 1)];
                    else {
                        let possibleGuiltPlayers = [...playersOnPositions[anotherUserIdx].CD, ...playersOnPositions[anotherUserIdx].WB];
                        guiltPlayer = possibleGuiltPlayers[MathService.randomInteger(0, possibleGuiltPlayers.length - 1)];
                    }

                    changeRating(guiltPlayer, -0.2);

                    event.players.push({
                        playerId: guiltPlayer.card.playerId,
                        playerName: guiltPlayer.card.playerName,
                        position: guiltPlayer.position.name,
                        role: 'guilt',
                        ratingDiff: -0.2,
                    });
                    //поиск виноватого игрока ================================================

                    // -0.2 пропустившим гол игрокам
                    for (let playerIndex = 0; playerIndex < anotherUser.players.length; playerIndex++) changeRating(anotherUser.players[playerIndex], -0.2);
                    event.players.push({
                        playerName: 'Another team players',
                        position: 'Another team positions',
                        role: 'none',
                        ratingDiff: -0.2,
                    });
                }
                else {
                    eventCode = 130;

                    let anotherUser = event.user === 0 ? user2 : user1;

                    actedPlayer = anotherUser.players[anotherUser.players.length - 1];
                    changeRating(actedPlayer, 0.4);

                    event.result = `Shot on target`;
                    event.players = [
                        {
                            playerId: actedPlayer.card.playerId,
                            playerName: actedPlayer.card.playerName,
                            position: actedPlayer.position.name,
                            ratingDiff: 0.4,
                        }
                    ];
                }
                break;
        }

        event.code = eventCode;
        event.score = goals[0] + '-' + goals[1];
    }
    // получение ивентов в матче ===============================================================================


    // рассчёт рейтинга игроков за сезон (среднее арифм)===========================
    for (let playerIndex = 0; playerIndex < user1.players.length; playerIndex++) {
        let sumOfMarks = 0;

        for (let marksIndex = 0; marksIndex < user1.players[playerIndex].card.seasonRatingMarks.length; marksIndex++) {
            sumOfMarks += user1.players[playerIndex].card.seasonRatingMarks[marksIndex];
        }

        user1.players[playerIndex].card.averageRating = Number((sumOfMarks / user1.players[playerIndex].card.seasonRatingMarks.length).toFixed(2));
    }

    for (let playerIndex = 0; playerIndex < kickedPlayers[0].length; playerIndex++) {
        let sumOfMarks = 0;

        for (let marksIndex = 0; marksIndex < kickedPlayers[0][playerIndex].card.seasonRatingMarks.length; marksIndex++) {
            sumOfMarks += kickedPlayers[0][playerIndex].card.seasonRatingMarks[marksIndex];
        }

        kickedPlayers[0][playerIndex].card.averageRating = Number((sumOfMarks / kickedPlayers[0][playerIndex].card.seasonRatingMarks.length).toFixed(2));
    }


    for (let playerIndex = 0; playerIndex < user2.players.length; playerIndex++) {
        let sumOfMarks = 0;

        for (let marksIndex = 0; marksIndex < user2.players[playerIndex].card.seasonRatingMarks.length; marksIndex++) {
            sumOfMarks += user2.players[playerIndex].card.seasonRatingMarks[marksIndex];
        }

        user2.players[playerIndex].card.averageRating = Number((sumOfMarks / user2.players[playerIndex].card.seasonRatingMarks.length).toFixed(2));
    }

    for (let playerIndex = 0; playerIndex < kickedPlayers[1].length; playerIndex++) {
        let sumOfMarks = 0;

        for (let marksIndex = 0; marksIndex < kickedPlayers[1][playerIndex].card.seasonRatingMarks.length; marksIndex++) {
            sumOfMarks += kickedPlayers[1][playerIndex].card.seasonRatingMarks[marksIndex];
        }

        kickedPlayers[1][playerIndex].card.averageRating = Number((sumOfMarks / kickedPlayers[1][playerIndex].card.seasonRatingMarks.length).toFixed(2));
    }
    // рассчёт рейтинга игроков за сезон (среднее арифм)===========================


    // изменение статуса unavailable для всех игроков юзеров===========================
    for (let plIdx = 0; plIdx < user1.resultAllPlayers.length; plIdx++) {
        let currPlayer = user1.resultAllPlayers[plIdx];
        if (currPlayer.unavailableMatchesCount > 0) currPlayer.unavailableMatchesCount--;
    }

    for (let plIdx = 0; plIdx < user2.resultAllPlayers.length; plIdx++) {
        let currPlayer = user2.resultAllPlayers[plIdx];
        if (currPlayer.unavailableMatchesCount > 0) currPlayer.unavailableMatchesCount--;
    }
    // изменение статуса unavailable для всех игроков юзеров===========================


    user1.players = user1.players.concat(kickedPlayers[0]);
    user2.players = user2.players.concat(kickedPlayers[1]);

    let resultLogs = {
        user1: {
            id: user1.id,
            players: user1.players.map(player => {
                return {
                    playerId: player.card.playerId,
                    playerName: player.card.playerName,
                    head: player.card.head,
                    body: player.card.body,
                    clothing: player.card.clothing,
                    hair: player.card.hair,
                };
            })
        },
        user2: {
            id: user2.id,
            players: user2.players.map(player => {
                return {
                    playerId: player.card.playerId,
                    playerName: player.card.playerName,
                    head: player.card.head,
                    body: player.card.body,
                    clothing: player.card.clothing,
                    hair: player.card.hair,
                };
            })
        },
        matchEvents: matchLogs
    };


    //debug===========================================================================
    debugLogs.logs = resultLogs; //d
    debugLogs.score = goals[0] + '-' + goals[1]; //d
    debugLogs.user1.totalEvents = eventsArrs[0].join(' '); //d
    debugLogs.user2.totalEvents = eventsArrs[1].join(' '); //d


    function getLogsText_debug(user1, user2, debugLogs, matchLogs) {
        let logsText = '';

        logsText += 'Звёзды игроков:\n=============================\n';

        logsText += 'Игрок 1:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${debugLogs.user1.playersAsm[i].playerName}: ${debugLogs.user1.playersAsm[i].asmSum}\n`;
        }
        logsText += '=================\n';

        logsText += 'Игрок 2:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${debugLogs.user2.playersAsm[i].playerName}: ${debugLogs.user2.playersAsm[i].asmSum}\n`;
        }
        logsText += '=================\n';


        logsText += '\n\nРейтинг карточек перед матчем:\n=============================\n';

        logsText += 'Игрок 1:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${user1.players[i].card.playerName}: 6.6\n`;
        }
        logsText += '=================\n';

        logsText += 'Игрок 2:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${user2.players[i].card.playerName}: 6.6\n`;
        }
        logsText += '=================\n';


        logsText += '\n\nЛоги матча:\n=============================\n';
        for (let i = 1; i < matchLogs.length; i++) {
            let playersRatingString = '';

            for (let j = 0; j < matchLogs[i].players.length; j++) {
                playersRatingString += `${matchLogs[i].players[j].playerName} (${matchLogs[i].players[j].ratingDiff}), `;
            }

            playersRatingString = playersRatingString.substring(0, playersRatingString.length - 2);

            logsText += `${matchLogs[i].minute} минута, игрок ${matchLogs[i].user + 1}, событие ${matchLogs[i].momentType}.\nРезультат: ${matchLogs[i].result}.\nИзменение рейтинга: ${playersRatingString}.\n====================================\n`;
        }


        logsText += `\n\nСчёт: ${goals[0]}-${goals[1]}\n`;


        let yellowCards = [[], []], violations = [[], []], offendingPlayerIds = [[], []];
        for (let i = 1; i < matchLogs.length; i++) {
            let event = matchLogs[i];
            if (event.momentType === 11 && event.result.endsWith('card')) {
                let actedPlayer = event.players[0],
                    injuredPlayer = event.players[1],
                    cardType = 'Yellow';

                if (offendingPlayerIds[event.user].includes(actedPlayer.playerId)) cardType = 'Red';
                else offendingPlayerIds[event.user].push(actedPlayer.playerId);

                violations[event.user].push({
                    cardType,
                    actedPlayer,
                    injuredPlayer,
                });
                yellowCards[event.user].push({
                    actedPlayer,
                    injuredPlayer,
                });
            }
        }

        logsText += `\n\nНарушения:\n\n`;

        logsText += `Игрок 1:\n===============\n`;
        for (let i = 0; i < violations[0].length; i++) {
            logsText += `(${violations[0][i].cardType} card) Injured: ${yellowCards[0][i].injuredPlayer.playerName}, Acted: ${yellowCards[0][i].actedPlayer.playerName}`;

            if (violations[0][i].cardType === 'Red') logsText += ' (kicked)';

            logsText += '\n';
        }
        logsText += `===============\n`;

        logsText += `\nИгрок 2:\n===============\n`;
        for (let i = 0; i < violations[1].length; i++) {
            logsText += `(${violations[1][i].cardType} card) Injured: ${yellowCards[1][i].injuredPlayer.playerName}, Acted: ${yellowCards[1][i].actedPlayer.playerName}`;

            if (violations[1][i].cardType === 'Red') logsText += ' (kicked)';

            logsText += '\n';
        }
        logsText += `===============\n`;


        logsText += '\n\nРейтинг карточек после матча:\n=============================\n';

        logsText += 'Игрок 1:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${user1.players[i].card.playerName}: ${user1.players[i].card.seasonRatingMarks[user1.players[i].card.seasonRatingMarks.length - 1]}\n`;
        }
        logsText += '=================\n';

        logsText += 'Игрок 2:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${user2.players[i].card.playerName}: ${user2.players[i].card.seasonRatingMarks[user2.players[i].card.seasonRatingMarks.length - 1]}\n`;
        }
        logsText += '=================\n';

        return logsText;
    }

    debugLogs.logsText = getLogsText_debug(user1, user2, debugLogs, matchLogs);
    //debug===========================================================================

    if (saveToDB) {
        let
            user1UpdateLastTeamQuery = prisma.user.update({
                where: {
                    id: user1.id,
                },
                data: {
                    lastTeam: JSON.stringify(user1.resultLastTeam)
                }
            }),
            user1UpdateAllPlayersQuery = prisma.user_players.update({
                where: {
                    userId: user1.id,
                },
                data: {
                    playersJson: JSON.stringify(user1.resultAllPlayers)
                }
            }),
            user2UpdateLastTeamQuery = prisma.user.update({
                where: {
                    id: user2.id,
                },
                data: {
                    lastTeam: JSON.stringify(user2.resultLastTeam)
                }
            }),
            user2UpdateAllPlayersQuery = prisma.user_players.update({
                where: {
                    userId: user2.id,
                },
                data: {
                    playersJson: JSON.stringify(user2.resultAllPlayers)
                }
            }),
            matchUpdateQuery = prisma.match.update({
                where: {
                    id: match.id
                },
                data: {
                    logs: JSON.stringify(resultLogs),
                    score: goals[0] + ':' + goals[1],
                }
            });

        // await prisma.$transaction([user1UpdateLastTeamQuery, user1UpdateAllPlayersQuery, user2UpdateLastTeamQuery, user2UpdateAllPlayersQuery, matchUpdateQuery]);
        return [user1UpdateLastTeamQuery, user1UpdateAllPlayersQuery, user2UpdateLastTeamQuery, user2UpdateAllPlayersQuery, matchUpdateQuery];
    }

    return debugLogs;
}

async function playMatchManyTimes_17otr_v3_09I19(matchId, count, saveToDb) {
    let debugLogs = []; //d

    let overall = {
        winFirst: 0,
        winSecond: 0,
        draw: 0,
        allGoalsCount: 0,
        '0:0 count': 0
    };

    for (let i = 0; i < count; i++) {
        debugLogs.push((await playDebugMatch_17otr_v3_09I19(matchId, saveToDb)));

        let goals = debugLogs[i].score.split('-').map(item => {
            return +item;
        });


        if (goals[0] > goals[1]) overall.winFirst++;
        else if (goals[0] < goals[1]) overall.winSecond++;
        else overall.draw++;

        overall.allGoalsCount += goals[0] + goals[1];

        if (goals[0] === 0 && goals[1] === 0) overall['0:0 count']++;
    }

    debugLogs.push(overall);

    return debugLogs;
}


async function playDebugMatch_17otr_v2(matchId, saveToDB) {
    // debug functions ===================================================================================
    function getPlayerAsmParts(player) {
        let technicalSkills = {},
            physicalSkills = {};

        for (let skill in player.card.physicalSkills) physicalSkills[skill] = player.card.physicalSkills[skill];
        for (let skill in player.card.technicalSkills) technicalSkills[skill] = player.card.technicalSkills[skill];

        switch (player.position) {
            case 'FW':
                technicalSkills.shoot *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.agility *= 3;
                physicalSkills.jump *= 3;
                break;

            case 'WG':
                technicalSkills.cross *= 3;
                technicalSkills.shoot *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.agility *= 3;
                break;

            case 'CM':
                technicalSkills.pass *= 3;
                physicalSkills.agility *= 3;
                physicalSkills.strength *= 3;
                break;

            case 'CD':
                technicalSkills.tackling *= 3;
                physicalSkills.strength *= 3;
                physicalSkills.jump *= 3;
                break;

            case 'WB':
                technicalSkills.cross *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.jump *= 3;
                break;
        }


        //получение asm игрока =============================================
        let phy = 0, te = 0, skillsSum, positionBonus = -2, asm;

        for (let skill in physicalSkills) phy += physicalSkills[skill];
        for (let skill in technicalSkills) te += technicalSkills[skill];

        phy = Math.min(Math.max(-5, phy), 5);
        te = Math.min(Math.max(-5, te), 5);
        skillsSum = Math.min(Math.max(1, phy + te), 10);


        // если текущая игрока позиция подходит "preferedPosition" - бонус = +2
        switch (player.card.preferedPosition) {
            case 'ATT':
                if (player.position === 'FW' || player.position === 'WG') positionBonus = 2;
                break;

            case 'MID':
                if (player.position === 'CM') positionBonus = 2;
                break;

            case 'DEF':
                if (player.position === 'CD' || player.position === 'WB') positionBonus = 2;
                break;

            case 'GK':
                if (player.position === 'GK') positionBonus = 2;
                break;
        }


        // asm = skillsSum(phy + te [1-10]) + card mood [-3 - 3] + positionBonus[-2/2] + card reputation [-2/0/2] = [1-10]
        asm = Math.min(Math.max(1, skillsSum + player.card.mood + positionBonus + ((match.league.level - player.card.playerReputation) * 2)), 10);

        if (asm % 1 !== 0) asm += 0.5 * (player.card.mood < 0 ? -1 : 1);
        //получение asm игрока =============================================

        let asmString =
            `phy=${phy}, te=${te}, mood=${player.card.mood}, ` +
            `reputationBonus=${((match.league.level - player.card.playerReputation) * 2)}, ` +
            `positionBonus=${positionBonus} ==> ` +
            `playerAsm=${asm}`;

        return asmString;
    }

    // debug functions ===================================================================================


    function sortPlayersByAverageRating(a, b) {
        if (a.card.isGoalKeeper) return 1;
        if (b.card.isGoalKeeper) return -1;

        if (a.card.averageRating < b.card.averageRating) return -1;
        if (a.card.averageRating > b.card.averageRating) return 1;

        return 0;
    }

    function findInjured_111(eventedUser, playersWithSkills, injuredPlayers) {
        let STAmPlayersCount = playersWithSkills.STAm.length,
            STAzPlayersCount = playersWithSkills.STAz.length,
            possibleInjuredPlayers = [],
            injuredPlayer;

        if (STAmPlayersCount) {
            for (let j = 0; j < playersWithSkills.STAm.length; j++) {
                let currPlayer = playersWithSkills.STAm[j];
                if (!injuredPlayers.includes(currPlayer.card.playerId)) possibleInjuredPlayers.push(currPlayer);
            }
        }

        if (!possibleInjuredPlayers.length && STAzPlayersCount) {
            for (let j = 0; j < playersWithSkills.STAz.length; j++) {
                let currPlayer = playersWithSkills.STAz[j];
                if (!injuredPlayers.includes(currPlayer.card.playerId)) possibleInjuredPlayers.push(currPlayer);
            }
        }

        if (!possibleInjuredPlayers.length) {
            for (let j = 0; j < 5; j++) {
                let currPlayer = eventedUser.players[j];
                if (!injuredPlayers.includes(currPlayer.card.playerId)) possibleInjuredPlayers.push(currPlayer);
            }

            if (!possibleInjuredPlayers.length) {
                for (let j = 0; j < 5; j++) possibleInjuredPlayers.push(eventedUser.players[j]);
            }
        }

        injuredPlayer = possibleInjuredPlayers[MathService.randomInteger(0, possibleInjuredPlayers.length - 1)];

        return injuredPlayer;
    }

    function findActed_111(anotherUser) {
        let actedPlayer = anotherUser.players[MathService.randomInteger(0, anotherUser.players.length - 2)];

        return actedPlayer;
    }

    function calculatePlayerAsm(player) {
        let technicalSkills = {},
            physicalSkills = {};

        for (let skill in player.card.physicalSkills) physicalSkills[skill] = player.card.physicalSkills[skill];
        for (let skill in player.card.technicalSkills) technicalSkills[skill] = player.card.technicalSkills[skill];

        switch (player.position) {
            case 'FW':
                technicalSkills.shoot *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.agility *= 3;
                physicalSkills.jump *= 3;
                break;

            case 'WG':
                technicalSkills.cross *= 3;
                technicalSkills.shoot *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.agility *= 3;
                break;

            case 'CM':
                technicalSkills.pass *= 3;
                physicalSkills.agility *= 3;
                physicalSkills.strength *= 3;
                break;

            case 'CD':
                technicalSkills.tackling *= 3;
                physicalSkills.strength *= 3;
                physicalSkills.jump *= 3;
                break;

            case 'WB':
                technicalSkills.cross *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.jump *= 3;
                break;
        }


        //получение asm игрока =============================================
        let phy = 0, te = 0, skillsSum, positionBonus = -2, asm;

        for (let skill in physicalSkills) phy += physicalSkills[skill];
        for (let skill in technicalSkills) te += technicalSkills[skill];

        phy = Math.min(Math.max(-5, phy), 5);
        te = Math.min(Math.max(-5, te), 5);
        skillsSum = Math.min(Math.max(1, phy + te), 10);


        // если текущая игрока позиция подходит "preferedPosition" - бонус = +2
        switch (player.card.preferedPosition) {
            case 'ATT':
                if (player.position === 'FW' || player.position === 'WG') positionBonus = 2;
                break;

            case 'MID':
                if (player.position === 'CM') positionBonus = 2;
                break;

            case 'DEF':
                if (player.position === 'CD' || player.position === 'WB') positionBonus = 2;
                break;

            case 'GK':
                if (player.position === 'GK') positionBonus = 2;
                break;
        }


        // asm = skillsSum(phy + te [1-10]) + card mood [-3 - 3] + positionBonus[-2/2] + card reputation [-2/0/2] = [1-10]
        asm = Math.min(Math.max(1, skillsSum + player.card.mood + positionBonus + ((match.league.level - player.card.playerReputation) * 2)), 10);

        if (asm % 1 !== 0) asm += 0.5 * (player.card.mood < 0 ? -1 : 1);
        //получение asm игрока =============================================

        return asm;
    }


    const match = await prisma.match.findFirst({
        select: {
            id: true,
            player1: {
                select: {
                    id: true,
                    avatar: true,
                    lastTactic: true,
                    lastTeam: true,
                    players: {
                        select: {
                            playersJson: true
                        }
                    },
                },
            },
            player2: {
                select: {
                    id: true,
                    avatar: true,
                    lastTactic: true,
                    lastTeam: true,
                    players: {
                        select: {
                            playersJson: true
                        }
                    },
                }
            },
            league: {
                select: {
                    level: true
                }
            }
        },
        where: {
            id: matchId
        },
    });

    let
        matchLogs = [],
        user1 = {
            id: match.player1.id,
            avatar: match.player1.avatar,
            tactic: JSON.parse(match.player1.lastTactic),
            players: [],
            resultLastTeam: JSON.parse(match.player1.lastTeam),
            resultAllPlayers: JSON.parse(match.player1.players.playersJson),
        },
        user2 = {
            id: match.player2.id,
            avatar: match.player2.avatar,
            tactic: JSON.parse(match.player2.lastTactic),
            players: [],
            resultLastTeam: JSON.parse(match.player2.lastTeam),
            resultAllPlayers: JSON.parse(match.player2.players.playersJson),
        },
        playersOnPositions = [
            {
                'FW': [],
                'WG': [],
                'CM': [],
                'WB': [],
                'CD': [],
                'GK': [],
            },
            {
                'FW': [],
                'WG': [],
                'CM': [],
                'WB': [],
                'CD': [],
                'GK': [],
            }
        ],
        playersWithSkills = [
            {
                AGIp: [],
                TCKLp: [],
                PASp: [],
                STAz: [],
                STAm: [],
                AGIm: [],
            },
            {
                AGIp: [],
                TCKLp: [],
                PASp: [],
                STAz: [],
                STAm: [],
                AGIm: [],
            },
        ],
        T = [0, 0],
        goals = [0, 0],
        eventsArrs = [[], []], //d
        debugLogs = {
            matchId: match.id,
            score: null,
            user1: {
                id: user1.id,
                players: user1.players,
                playersAsm: [],
                homeBonus: 3,
                avatarBonus: 0,
                T: 0,
            },
            user2: {
                id: user2.id,
                players: user2.players,
                playersAsm: [],
                homeBonus: 0,
                avatarBonus: 0,
                T: 0,
            },
        }; //d


    // заполнение массивов players ссылками на этих же игроков из resultAllPlayers =====================================
    function sortPlayersById_1(a, b) {
        if (a.playerId < b.playerId) return -1;
        if (a.playerId > b.playerId) return 1;
        return 0;
    }

    user1.resultLastTeam.sort(sortPlayersById_1);
    user2.resultLastTeam.sort(sortPlayersById_1);
    user1.resultAllPlayers.sort(sortPlayersById_1);
    user2.resultAllPlayers.sort(sortPlayersById_1);

    let rapPlIdx = 0;
    for (let ltPlIdx = 0; ltPlIdx < user1.resultLastTeam.length; ltPlIdx++) {
        while (user1.resultAllPlayers[rapPlIdx].playerId !== user1.resultLastTeam[ltPlIdx].playerId) rapPlIdx++;

        user1.resultAllPlayers[rapPlIdx].seasonRatingMarks.push(6.6); //начальная оценка за матч

        user1.players.push({
            card: user1.resultAllPlayers[rapPlIdx],
            position: {
                name: user1.resultLastTeam[ltPlIdx].position.split(':')[0],
                index: user1.resultLastTeam[ltPlIdx].position.split(':')[1],
            },
            asm: undefined,
        });
    }

    rapPlIdx = 0;
    for (let ltPlIdx = 0; ltPlIdx < user2.resultLastTeam.length; ltPlIdx++) {
        while (user2.resultAllPlayers[rapPlIdx].playerId !== user2.resultLastTeam[ltPlIdx].playerId) rapPlIdx++;

        user2.resultAllPlayers[rapPlIdx].seasonRatingMarks.push(6.6); //начальная оценка за матч

        user2.players.push({
            card: user2.resultAllPlayers[rapPlIdx],
            position: {
                name: user2.resultLastTeam[ltPlIdx].position.split(':')[0],
                index: user2.resultLastTeam[ltPlIdx].position.split(':')[1],
            },
            asm: undefined,
        });
    }


    user1.players.sort(sortPlayersByAverageRating);
    user2.players.sort(sortPlayersByAverageRating);
    // заполнение массивов players ссылками на этих же игроков из resultAllPlayers =====================================


    user1.players.forEach((player) => {
        // добавление игрока в массив игроков на {позиции}
        playersOnPositions[0][player.position.name].push(player);

        // добавление игрока в массивы со скиллами =========================================
        if (player.card.physicalSkills.agility > 0) playersWithSkills[0].AGIp.push(player);
        else if (player.card.physicalSkills.agility < 0) playersWithSkills[0].AGIm.push(player);

        if (player.card.technicalSkills.tackling > 0) playersWithSkills[0].TCKLp.push(player);

        if (player.card.technicalSkills.pass > 0) playersWithSkills[0].PASp.push(player);

        if (player.card.physicalSkills.stamina < 0) playersWithSkills[0].STAm.push(player);
        else if (player.card.physicalSkills.stamina === 0) playersWithSkills[0].STAz.push(player);
        // добавление игрока в массивы со скиллами =========================================

        let playerAsm = calculatePlayerAsm(player);
        T[0] += playerAsm;
        player.asm = playerAsm;

        debugLogs.user1.playersAsm.push({
            playerId: player.card.playerId,
            playerName: player.card.playerName,
            asmCalc: getPlayerAsmParts(player),
            asmSum: playerAsm,
        }); //d
    });
    user2.players.forEach((player) => {
        //распределение в массивах игроков на позициях
        playersOnPositions[1][player.position.name].push(player);

        // добавление игрока в массивы со скиллами =========================================
        if (player.card.physicalSkills.agility > 0) playersWithSkills[1].AGIp.push(player);
        else if (player.card.physicalSkills.agility < 0) playersWithSkills[1].AGIm.push(player);

        if (player.card.technicalSkills.tackling > 0) playersWithSkills[1].TCKLp.push(player);

        if (player.card.technicalSkills.pass > 0) playersWithSkills[1].PASp.push(player);

        if (player.card.physicalSkills.stamina < 0) playersWithSkills[1].STAm.push(player);
        else if (player.card.physicalSkills.stamina === 0) playersWithSkills[1].STAz.push(player);
        // добавление игрока в массивы со скиллами =========================================

        let playerAsm = calculatePlayerAsm(player);
        T[1] += playerAsm;
        player.asm = playerAsm;

        debugLogs.user2.playersAsm.push({
            playerId: player.card.playerId,
            playerName: player.card.playerName,
            asmCalc: getPlayerAsmParts(player),
            asmSum: playerAsm,
        }); //d
    });

    debugLogs.user1.T_players = T[0]; //d
    debugLogs.user2.T_players = T[1]; //d


    T[0] += 3; //доп очки за домашнюю тиму
    if (user1.avatar !== user2.avatar) {
        if (avatarDefying[user1.avatar].includes(user2.avatar)) {
            T[0] += 6;

            debugLogs.user1.avatarBonus = 3;//debug
        }
        else if (avatarDefying[user2.avatar].includes(user1.avatar)) {
            T[1] += 6;

            debugLogs.user2.avatarBonus = 3;//debug
        }
    } // доп очки за контр тренеров

    debugLogs.user1.T_players_bonuses = T[0]; //d
    debugLogs.user2.T_players_bonuses = T[1]; //d


    let advantage = Math.abs(T[0] - T[1]),
        momentsCount1 = {
            firstTime: [0, 0],
            secondTime: [0, 0]
        };


    let user1MomCount = Math.round(T[0] / ((T[0] + T[1]) / 16));
    momentsCount1.firstTime = [user1MomCount, 16 - user1MomCount];


    debugLogs.user1.T_players_bonuses_adv = T[0]; //d
    debugLogs.user2.T_players_bonuses_adv = T[1]; //d


    function changeRating(player, ratingDiff) {
        player.card.seasonRatingMarks[player.card.seasonRatingMarks.length - 1] = Number((player.card.seasonRatingMarks[player.card.seasonRatingMarks.length - 1] + ratingDiff).toFixed(2));
    }

    let xG = [0, 0], xG1 = [0, 0], xG2 = [0, 0], lastPotGoalMinute = null;


    matchLogs.push({
        minute: '0',
        user: null,
        momentType: null,
        result: 'Match started!'
    });


    function getMoment(minute, availableMomentsCount, T, xG, xgTime, matchLogs) {
        let player = MathService.randomFloat(0, T[0] + T[1]) <= T[0] ? 0 : 1,
            randNum = MathService.randomInteger(1, 10),
            momentType = randNum >= 1 && randNum <= 2 ? 13 : randNum >= 3 && randNum <= 6 ? 12 : 11,
            momentWeight = 0.5 * (momentType - 9);

        if (availableMomentsCount[player] === 0) player = (player + 1) % 2;
        availableMomentsCount[player]--;


        T[player] += momentWeight; // чтобы получить вес 1/1.5/2 (11 -9. 12 - 9, 13 - 9)
        xG[player] += momentWeight;
        xgTime[player] += momentWeight;

        eventsArrs[player].push(momentType); //d

        matchLogs.push({
            minute,
            user: player,
            momentType,
            result: ''
        });
    }

    //первый тайм ===================================================================
    for (let i = 3; i <= 45; i += 3) getMoment(i.toString(), momentsCount1.firstTime, T, xG, xG1, matchLogs);
    getMoment(`45'add`, momentsCount1.firstTime, T, xG, xG1, matchLogs);

    xG1[0] /= 10;
    xG1[1] /= 10;
    //первый тайм ===================================================================

    eventsArrs[0].push("==="); //d
    eventsArrs[1].push("==="); //d


    advantage = Math.abs(T[0] - T[1]);

    user1MomCount = Math.round(T[0] / ((T[0] + T[1]) / 16));
    momentsCount1.secondTime = [user1MomCount, 16 - user1MomCount];

    if (momentsCount1.secondTime[0] > momentsCount1.secondTime[1]) momentsCount1.secondTime[1]++;
    else momentsCount1.secondTime[0]++;


    //второй тайм ===================================================================
    for (let i = 45; i <= 90; i += 3) getMoment(i.toString(), momentsCount1.secondTime, T, xG, xG2, matchLogs);
    if (momentsCount1.secondTime[0] + momentsCount1.secondTime[1]) getMoment(`90'add`, momentsCount1.secondTime, T, xG, xG2, matchLogs);

    xG2[0] /= 10;
    xG2[1] /= 10;
    //второй тайм ===================================================================


    // получение ивентов в матче ===============================================================================
    for (let i = matchLogs.length - 1; i > 0; i--) {
        if (matchLogs[i].momentType === 13) {
            lastPotGoalMinute = matchLogs[i].minute;
            break;
        }
    }

    let playersWithYellowCards = [[], []], injuredPlayers = [[], []], kickedPlayers = [[], []];

    xG[0] = xG1[0];
    xG[1] = xG1[1];

    for (let i = 1; i < matchLogs.length; i++) {
        // добавляем xG первого тайма
        if (i === 17) {
            xG[0] += xG2[0];
            xG[1] += xG2[1];
        }

        let event = matchLogs[i],
            eventCode,
            eventedUser, scoredUser, anotherUser,
            AGIpPlayersCount, TCKLpPlayersCount, PASpPlayersCount, AGImPlayersCount, // для удобства
            actedPlayer, possibleActedPlayers, injuredPlayer;

        switch (event.momentType) {
            case 11:
                eventedUser = event.user === 0 ? user1 : user2;
                anotherUser = event.user === 0 ? user2 : user1;

                eventCode = MathService.randomInteger(111, 115);

                switch (eventCode) {
                    case 111:
                        injuredPlayer = findInjured_111(eventedUser, playersWithSkills[event.user], injuredPlayers[event.user]);
                        injuredPlayers[event.user].push(injuredPlayer.card.playerId);
                        changeRating(injuredPlayer, -0.2);

                        actedPlayer = findActed_111(anotherUser);
                        actedPlayer.card.seasonYellowCardsCount++;
                        changeRating(actedPlayer, -0.4);


                        if (playersWithYellowCards[(event.user + 1) % 2].includes(actedPlayer.card.playerId)) {
                            kickedPlayers[(event.user + 1) % 2].push(actedPlayer);
                            actedPlayer.card.unavailableMatchesCount = 2; // на 1 больше, ибо вконце разыгровки будет декремент

                            // удаление из массива игроков
                            for (let plIdx = 0; plIdx < anotherUser.players.length; plIdx++) {
                                if (anotherUser.players[plIdx].card.playerId === actedPlayer.card.playerId) {
                                    anotherUser.players.splice(plIdx, 1);
                                    break;
                                }
                            }

                            // удаление из игроков на позициях
                            for (let plIdx = 0; plIdx < playersOnPositions[(event.user + 1) % 2][actedPlayer.position.name].length; plIdx++) {
                                if (playersOnPositions[(event.user + 1) % 2][actedPlayer.position.name][plIdx].card.playerId === actedPlayer.card.playerId) {
                                    playersOnPositions[(event.user + 1) % 2][actedPlayer.position.name].splice(plIdx, 1);
                                    break;
                                }
                            }

                            // удаление из игроков по скиллах ===========================================================================
                            if (actedPlayer.card.physicalSkills.agility > 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].AGIp.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].AGIp[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].AGIp.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }
                            else if (actedPlayer.card.physicalSkills.agility < 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].AGIm.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].AGIm[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].AGIm.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }

                            if (actedPlayer.card.physicalSkills.stamina === 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].STAz.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].STAz[plIdx].playerId === actedPlayer.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].STAz.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }
                            else if (actedPlayer.card.physicalSkills.stamina < 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].STAm.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].STAm[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].STAm.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }

                            if (actedPlayer.card.technicalSkills.tackling > 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].TCKLp.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].TCKLp[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].TCKLp.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }

                            if (actedPlayer.card.technicalSkills.pass > 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].PASp.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].PASp[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].PASp.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }
                            // удаление из игроков по скиллах ===========================================================================


                            // замена игрока в "последнем составе" ========================================================
                            anotherUser.resultLastTeam.sort(sortPlayersById_1);
                            anotherUser.resultAllPlayers.sort(sortPlayersById_1);

                            let replacementPlayers = {
                                    ATT: [],
                                    MID: [],
                                    DEF: [],
                                },
                                allPlIdx = 0,
                                replacedPlayer = null;

                            for (let ltPlIdx = 0; ltPlIdx < anotherUser.resultLastTeam.length; ltPlIdx++) {
                                while (anotherUser.resultAllPlayers[allPlIdx].playerId !== anotherUser.resultLastTeam[ltPlIdx].playerId) {
                                    if (anotherUser.resultAllPlayers[allPlIdx].unavailableMatchesCount <= 1) replacementPlayers[anotherUser.resultAllPlayers[allPlIdx].preferedPosition].push(anotherUser.resultAllPlayers[allPlIdx]);
                                    allPlIdx++;
                                }
                                allPlIdx++;
                            }

                            if (actedPlayer.position.name === "FW" || actedPlayer.position.name === "WG") {
                                if (replacementPlayers.ATT.length) replacedPlayer = replacementPlayers.ATT[MathService.randomInteger(0, replacementPlayers.ATT.length - 1)];
                                else {
                                    let availablePlayers = [...replacementPlayers.MID, ...replacementPlayers.DEF];
                                    replacedPlayer = availablePlayers[MathService.randomInteger(0, availablePlayers.length - 1)];
                                }
                            }
                            else if (actedPlayer.position.name === "CM") {
                                if (replacementPlayers.MID.length) replacedPlayer = replacementPlayers.MID[MathService.randomInteger(0, replacementPlayers.MID.length - 1)];
                                else {
                                    let availablePlayers = [...replacementPlayers.ATT, ...replacementPlayers.DEF];
                                    replacedPlayer = availablePlayers[MathService.randomInteger(0, availablePlayers.length - 1)];
                                }
                            }
                            else if (actedPlayer.position.name === "CD" || actedPlayer.position.name === "WB") {
                                if (replacementPlayers.DEF.length) replacedPlayer = replacementPlayers.DEF[MathService.randomInteger(0, replacementPlayers.DEF.length - 1)];
                                else {
                                    let availablePlayers = [...replacementPlayers.ATT, ...replacementPlayers.MID];
                                    replacedPlayer = availablePlayers[MathService.randomInteger(0, availablePlayers.length - 1)];
                                }
                            }

                            replacedPlayer = JSON.parse(JSON.stringify(replacedPlayer));
                            replacedPlayer.position = actedPlayer.position.name + ':' + actedPlayer.position.index;

                            for (let plIdx = 0; plIdx < anotherUser.resultLastTeam.length; plIdx++) {
                                if (anotherUser.resultLastTeam[plIdx].playerId === actedPlayer.card.playerId) {
                                    anotherUser.resultLastTeam[plIdx] = replacedPlayer;
                                    break;
                                }
                            }
                            // замена игрока в "последнем составе" ========================================================


                            // отдача всех 13 моментов противоположной команде ============================================
                            for (let evIdx = i + 1; evIdx < matchLogs.length; evIdx++)
                                if (matchLogs[evIdx].momentType === 13 &&
                                    matchLogs[evIdx].user === ((event.user + 1) % 2)) matchLogs[evIdx].user = event.user;
                            // отдача всех 13 моментов противоположной команде ============================================
                        }
                        else {
                            playersWithYellowCards[(event.user + 1) % 2].push(actedPlayer.card.playerId);
                            if (actedPlayer.card.seasonYellowCardsCount === 8) {
                                actedPlayer.card.seasonYellowCardsCount = 0;
                                actedPlayer.card.unavailableMatchesCount = 2; // на 1 больше, ибо вконце разыгровки будет декремент

                                // замена игрока в "последнем составе" ========================================================
                                anotherUser.resultLastTeam.sort(sortPlayersById_1);
                                anotherUser.resultAllPlayers.sort(sortPlayersById_1);

                                let replacementPlayers = {
                                        ATT: [],
                                        MID: [],
                                        DEF: [],
                                    },
                                    allPlIdx = 0,
                                    replacedPlayer = null;

                                for (let ltPlIdx = 0; ltPlIdx < anotherUser.resultLastTeam.length; ltPlIdx++) {
                                    while (anotherUser.resultAllPlayers[allPlIdx].playerId !== anotherUser.resultLastTeam[ltPlIdx].playerId) {
                                        if (anotherUser.resultAllPlayers[allPlIdx].unavailableMatchesCount <= 1) replacementPlayers[anotherUser.resultAllPlayers[allPlIdx].preferedPosition].push(anotherUser.resultAllPlayers[allPlIdx]);
                                        allPlIdx++;
                                    }
                                    allPlIdx++;
                                }

                                if (actedPlayer.position.name === "FW" || actedPlayer.position.name === "WG") {
                                    if (replacementPlayers.ATT.length) replacedPlayer = replacementPlayers.ATT[MathService.randomInteger(0, replacementPlayers.ATT.length - 1)];
                                    else {
                                        let availablePlayers = [...replacementPlayers.MID, ...replacementPlayers.DEF];
                                        replacedPlayer = availablePlayers[MathService.randomInteger(0, availablePlayers.length - 1)];
                                    }
                                }
                                else if (actedPlayer.position.name === "CM") {
                                    if (replacementPlayers.MID.length) replacedPlayer = replacementPlayers.MID[MathService.randomInteger(0, replacementPlayers.MID.length - 1)];
                                    else {
                                        let availablePlayers = [...replacementPlayers.ATT, ...replacementPlayers.DEF];
                                        replacedPlayer = availablePlayers[MathService.randomInteger(0, availablePlayers.length - 1)];
                                    }
                                }
                                else if (actedPlayer.position.name === "CD" || actedPlayer.position.name === "WB") {
                                    if (replacementPlayers.DEF.length) replacedPlayer = replacementPlayers.DEF[MathService.randomInteger(0, replacementPlayers.DEF.length - 1)];
                                    else {
                                        let availablePlayers = [...replacementPlayers.ATT, ...replacementPlayers.MID];
                                        replacedPlayer = availablePlayers[MathService.randomInteger(0, availablePlayers.length - 1)];
                                    }
                                }

                                replacedPlayer = JSON.parse(JSON.stringify(replacedPlayer));
                                replacedPlayer.position = actedPlayer.position.name + ':' + actedPlayer.position.index;

                                for (let plIdx = 0; plIdx < anotherUser.resultLastTeam.length; plIdx++) {
                                    if (anotherUser.resultLastTeam[plIdx].playerId === actedPlayer.card.playerId) {
                                        anotherUser.resultLastTeam[plIdx] = replacedPlayer;
                                        break;
                                    }
                                }
                                // замена игрока в "последнем составе" ========================================================
                            }
                        }


                        event.result = `${injuredPlayer.card.playerName} is injured - ${actedPlayer.card.playerName} will be punished by a yellow card`;
                        event.players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position.name,
                                ratingDiff: -0.4,
                            },
                            {
                                playerId: injuredPlayer.card.playerId,
                                playerName: injuredPlayer.card.playerName,
                                position: injuredPlayer.position.name,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;

                    case 112:
                        AGImPlayersCount = playersWithSkills[event.user].AGIm.length;

                        if (AGImPlayersCount) actedPlayer = playersWithSkills[event.user].AGIm[MathService.randomInteger(0, AGImPlayersCount - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        event.result = `Unlucky dribbling - ${actedPlayer.card.playerName}`;
                        event.players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position.name,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;

                    case 113:
                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];

                        if (possibleActedPlayers.length) actedPlayer = possibleActedPlayers[MathService.randomInteger(0, possibleActedPlayers.length - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(0, eventedUser.players.length - 2)];
                        changeRating(actedPlayer, -0.2);

                        event.result = `Unlucky cross - ${actedPlayer.card.playerName}`;
                        event.players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position.name,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;

                    case 114:
                        event.result = `Slow passing in the midfield`;
                        event.players = [];
                        break;

                    case 115:
                        actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        event.result = `${actedPlayer.card.playerName} made a mistake`;
                        event.players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position.name,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;
                }
                break;

            case 12:
                eventedUser = event.user === 0 ? user1 : user2;
                anotherUser = event.user === 0 ? user2 : user1;

                eventCode = MathService.randomInteger(121, 125);

                switch (eventCode) {
                    case 121:
                        actedPlayer = eventedUser.players[MathService.randomInteger(0, eventedUser.players.length - 2)];

                        event.result = `Shot off target`;
                        event.players = [{
                            playerId: actedPlayer.card.playerId,
                            playerName: actedPlayer.card.playerName,
                            position: actedPlayer.position.name,
                            ratingDiff: 0,
                        }];
                        break;

                    case 122:
                        AGIpPlayersCount = playersWithSkills[event.user].AGIp.length;

                        if (AGIpPlayersCount) actedPlayer = playersWithSkills[event.user].AGIp[MathService.randomInteger(0, AGIpPlayersCount - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(eventedUser.players.length - 6, eventedUser.players.length - 2)];
                        changeRating(actedPlayer, 0.2);

                        event.result = `Successful dribbling by ${actedPlayer.card.playerName}`;
                        event.players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position.name,
                                ratingDiff: 0.2,
                            }
                        ];
                        break;

                    case 123:
                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];
                        possibleActedPlayers.sort(function (a, b) {
                            if (a.card.averageRating < b.card.averageRating) return -1;
                            if (a.card.averageRating > b.card.averageRating) return 1;
                            return 0;
                        });

                        actedPlayer = possibleActedPlayers[possibleActedPlayers.length - 1];
                        changeRating(actedPlayer, 0.2);

                        event.result = `Promising cross by ${actedPlayer.card.playerName}`;
                        event.players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position.name,
                                ratingDiff: 0.2,
                            }
                        ];
                        break;

                    case 124:
                        TCKLpPlayersCount = playersWithSkills[event.user].TCKLp.length;

                        if (TCKLpPlayersCount) actedPlayer = playersWithSkills[event.user].TCKLp[MathService.randomInteger(0, TCKLpPlayersCount - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(eventedUser.players.length - 6, eventedUser.players.length - 2)];
                        changeRating(actedPlayer, 0.2);

                        event.result = `Interception by ${actedPlayer.card.playerName}`;
                        event.players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position.name,
                                ratingDiff: 0.2,
                            }
                        ];
                        break;

                    case 125:
                        PASpPlayersCount = playersWithSkills[event.user].PASp.length;

                        if (PASpPlayersCount) actedPlayer = playersWithSkills[event.user].PASp[MathService.randomInteger(0, PASpPlayersCount - 1)];
                        else {
                            playersOnPositions[event.user].CM.sort(function (a, b) {
                                if (a.card.averageRating < b.card.averageRating) return -1;
                                if (a.card.averageRating > b.card.averageRating) return 1;
                                return 0;
                            });
                            actedPlayer = playersOnPositions[event.user].CM[playersOnPositions[event.user].CM.length - 1];
                        }

                        changeRating(actedPlayer, 0.2);

                        event.result = `Promising through pass by ${actedPlayer.card.playerName}`;
                        event.players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position.name,
                                ratingDiff: 0.2,
                            }
                        ];
                        break;
                }
                break;

            case 13:
                let chanceNumbers = Math.floor(xG[event.user] / 0.25);

                if (event.minute === lastPotGoalMinute && goals[0] === goals[1]) chanceNumbers++;

                let randNumbers = MathService.randomInteger(1, 10),
                    goal = randNumbers <= chanceNumbers ? 1 : 0;

                if (goal) {
                    let scoredPlayer, assistantPlayer, possibleScoredPlayers;

                    scoredUser = event.user === 0 ? user1 : user2;
                    anotherUser = event.user === 0 ? user2 : user1;

                    goals[event.user]++;
                    xG[event.user] = Math.max(0, xG[event.user] - 1); //чтобы xG игрока не был меньше 0

                    switch (scoredUser.tactic.teamFocus) {
                        case 'wing-play':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                eventCode = 131;


                                if (playersOnPositions[event.user].FW.length) {
                                    scoredPlayer = playersOnPositions[event.user].FW[0];

                                    let avgTeamAsm = 0;
                                    for (let j = 0; j < scoredUser.players.length; j++) avgTeamAsm += scoredUser.players[j].asm;
                                    avgTeamAsm /= scoredUser.players.length;

                                    if (scoredPlayer.asm > avgTeamAsm) {
                                        if (playersOnPositions[event.user].WG.length) {
                                            let scPlIdx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);

                                            scoredPlayer = playersOnPositions[event.user].WG[scPlIdx];

                                            if (playersOnPositions[event.user].WG.length >= 2) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [scPlIdx])];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                        }
                                        else if (playersOnPositions[event.user].CM.length) {
                                            let scPlIdx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);

                                            scoredPlayer = playersOnPositions[event.user].CM[scPlIdx];

                                            if (playersOnPositions[event.user].CM.length >= 2) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [scPlIdx])];
                                            else if (playersOnPositions[event.user].WB.length) assistantPlayer = playersOnPositions[event.user].WB[MathService.randomInteger(0, playersOnPositions[event.user].WB.length - 1)];
                                        }
                                    }
                                    else {
                                        if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                    }
                                }
                                else if (playersOnPositions[event.user].WG.length) {
                                    let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                    scoredPlayer = playersOnPositions[event.user].WG[idx];

                                    if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                    else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                }
                                else if (playersOnPositions[event.user].CM.length) {
                                    let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                    scoredPlayer = playersOnPositions[event.user].CM[idx];

                                    if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                    else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                        let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                    }
                                }

                                changeRating(scoredPlayer, 0.8);
                                changeRating(assistantPlayer, 0.8);


                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }

                                event.result = `${scoredPlayer.card.playerName} scores a header delivered by ${assistantPlayer.card.playerName}`;
                                event.players = [
                                    {
                                        playerId: scoredPlayer.card.playerId,
                                        playerName: scoredPlayer.card.playerName,
                                        position: scoredPlayer.position.name,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerId: assistantPlayer.card.playerId,
                                        playerName: assistantPlayer.card.playerName,
                                        position: assistantPlayer.position.name,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    },
                                ];
                            }
                            else {
                                eventCode = MathService.randomInteger(131, 136);

                                switch (eventCode) {
                                    case 131:
                                        if (playersOnPositions[event.user].FW.length) {
                                            scoredPlayer = playersOnPositions[event.user].FW[0];

                                            let avgTeamAsm = 0;
                                            for (let j = 0; j < scoredUser.players.length; j++) avgTeamAsm += scoredUser.players[j].asm;
                                            avgTeamAsm /= scoredUser.players.length;

                                            if (scoredPlayer.asm > avgTeamAsm) {
                                                if (playersOnPositions[event.user].WG.length) {
                                                    let scPlIdx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);

                                                    scoredPlayer = playersOnPositions[event.user].WG[scPlIdx];

                                                    if (playersOnPositions[event.user].WG.length >= 2) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [scPlIdx])];
                                                    else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                                }
                                                else if (playersOnPositions[event.user].CM.length) {
                                                    let scPlIdx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);

                                                    scoredPlayer = playersOnPositions[event.user].CM[scPlIdx];

                                                    if (playersOnPositions[event.user].CM.length >= 2) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [scPlIdx])];
                                                    else if (playersOnPositions[event.user].WB.length) assistantPlayer = playersOnPositions[event.user].WB[MathService.randomInteger(0, playersOnPositions[event.user].WB.length - 1)];
                                                }
                                            }
                                            else {
                                                if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                                else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                            }
                                        }
                                        else if (playersOnPositions[event.user].WG.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].WG[idx];

                                            if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        }
                                        else if (playersOnPositions[event.user].CM.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];

                                            if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        event.result = `${scoredPlayer.card.playerName} scores a header delivered by ${assistantPlayer.card.playerName}`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.card.playerId,
                                                playerName: assistantPlayer.card.playerName,
                                                position: assistantPlayer.position.name,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        break;

                                    case 132:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.4);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        event.result = `Spectacular powershot by ${scoredPlayer.card.playerName}`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 0.4,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 133:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        event.result = `${scoredPlayer.card.playerName} scores after solo breakthrough`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 134:
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            // scoredPlayer = (FW|WG)
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                            // assistantPlayer = CM
                                            if (playersOnPositions[event.user].CM.length) {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                            }
                                            // assistantPlayer = (CD|WB)
                                            else {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                        }
                                        else {
                                            // scoredPlayer = CM
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];


                                            // assistantPlayer = (CD|WB)
                                            if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                            // assistantPlayer = CM
                                            else {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        event.result = `Goal! ${scoredPlayer.card.playerName} runs and ${assistantPlayer.card.playerName} provides an assist`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.card.playerId,
                                                playerName: assistantPlayer.card.playerName,
                                                position: assistantPlayer.position.name,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 135:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        event.result = `Goal! ${scoredPlayer.card.playerName} used opponent’s silly mistake`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 136:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        event.result = `Goal! Brilliant team-play finished by ${scoredPlayer.card.playerName}`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.5,
                                            }
                                        ];
                                        break;
                                }
                            }
                            break;

                        case 'midfield':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                eventCode = 134;


                                if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                    // scoredPlayer = (FW|WG)
                                    possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                    scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                    // assistantPlayer = CM
                                    if (playersOnPositions[event.user].CM.length) {
                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                    }
                                    // assistantPlayer = (CD|WB)
                                    else {
                                        let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                    }
                                }
                                else {
                                    // scoredPlayer = CM
                                    let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                    scoredPlayer = playersOnPositions[event.user].CM[idx];


                                    // assistantPlayer = (CD|WB)
                                    if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                        let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                    }
                                    // assistantPlayer = CM
                                    else {
                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                    }
                                }

                                changeRating(scoredPlayer, 0.8);
                                changeRating(assistantPlayer, 0.8);


                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }

                                event.result = `Goal! ${scoredPlayer.card.playerName} runs and ${assistantPlayer.card.playerName} provides an assist`;
                                event.players = [
                                    {
                                        playerId: scoredPlayer.card.playerId,
                                        playerName: scoredPlayer.card.playerName,
                                        position: scoredPlayer.position.name,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerId: assistantPlayer.card.playerId,
                                        playerName: assistantPlayer.card.playerName,
                                        position: assistantPlayer.position.name,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    }
                                ];
                            }
                            else {
                                eventCode = MathService.randomInteger(131, 136);

                                switch (eventCode) {
                                    case 131:
                                        if (playersOnPositions[event.user].FW.length) {
                                            scoredPlayer = playersOnPositions[event.user].FW[0];

                                            let avgTeamAsm = 0;
                                            for (let j = 0; j < scoredUser.players.length; j++) avgTeamAsm += scoredUser.players[j].asm;
                                            avgTeamAsm /= scoredUser.players.length;

                                            if (scoredPlayer.asm > avgTeamAsm) {
                                                if (playersOnPositions[event.user].WG.length) {
                                                    let scPlIdx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);

                                                    scoredPlayer = playersOnPositions[event.user].WG[scPlIdx];

                                                    if (playersOnPositions[event.user].WG.length >= 2) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [scPlIdx])];
                                                    else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                                }
                                                else if (playersOnPositions[event.user].CM.length) {
                                                    let scPlIdx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);

                                                    scoredPlayer = playersOnPositions[event.user].CM[scPlIdx];

                                                    if (playersOnPositions[event.user].CM.length >= 2) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [scPlIdx])];
                                                    else if (playersOnPositions[event.user].WB.length) assistantPlayer = playersOnPositions[event.user].WB[MathService.randomInteger(0, playersOnPositions[event.user].WB.length - 1)];
                                                }
                                            }
                                            else {
                                                if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                                else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                            }
                                        }
                                        else if (playersOnPositions[event.user].WG.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].WG[idx];

                                            if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        }
                                        else if (playersOnPositions[event.user].CM.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];

                                            if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        event.result = `${scoredPlayer.card.playerName} scores a header delivered by ${assistantPlayer.card.playerName}`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.card.playerId,
                                                playerName: assistantPlayer.card.playerName,
                                                position: assistantPlayer.position.name,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        break;

                                    case 132:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.4);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        event.result = `Spectacular powershot by ${scoredPlayer.card.playerName}`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 0.4,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 133:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        event.result = `${scoredPlayer.card.playerName} scores after solo breakthrough`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 134:
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            // scoredPlayer = (FW|WG)
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                            // assistantPlayer = CM
                                            if (playersOnPositions[event.user].CM.length) {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                            }
                                            // assistantPlayer = (CD|WB)
                                            else {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                        }
                                        else {
                                            // scoredPlayer = CM
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];


                                            // assistantPlayer = (CD|WB)
                                            if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                            // assistantPlayer = CM
                                            else {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        event.result = `Goal! ${scoredPlayer.card.playerName} runs and ${assistantPlayer.card.playerName} provides an assist`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.card.playerId,
                                                playerName: assistantPlayer.card.playerName,
                                                position: assistantPlayer.position.name,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 135:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        event.result = `Goal! ${scoredPlayer.card.playerName} used opponent’s silly mistake`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 136:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        event.result = `Goal! Brilliant team-play finished by ${scoredPlayer.card.playerName}`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.5,
                                            }
                                        ];
                                        break;
                                }
                            }
                            break;

                        case 'stepUp':
                            eventCode = MathService.randomInteger(131, 136);

                            switch (eventCode) {
                                case 131:
                                    if (playersOnPositions[event.user].FW.length) {
                                        scoredPlayer = playersOnPositions[event.user].FW[0];

                                        let avgTeamAsm = 0;
                                        for (let j = 0; j < scoredUser.players.length; j++) avgTeamAsm += scoredUser.players[j].asm;
                                        avgTeamAsm /= scoredUser.players.length;

                                        if (scoredPlayer.asm > avgTeamAsm) {
                                            if (playersOnPositions[event.user].WG.length) {
                                                let scPlIdx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);

                                                scoredPlayer = playersOnPositions[event.user].WG[scPlIdx];

                                                if (playersOnPositions[event.user].WG.length >= 2) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [scPlIdx])];
                                                else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                            }
                                            else if (playersOnPositions[event.user].CM.length) {
                                                let scPlIdx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);

                                                scoredPlayer = playersOnPositions[event.user].CM[scPlIdx];

                                                if (playersOnPositions[event.user].CM.length >= 2) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [scPlIdx])];
                                                else if (playersOnPositions[event.user].WB.length) assistantPlayer = playersOnPositions[event.user].WB[MathService.randomInteger(0, playersOnPositions[event.user].WB.length - 1)];
                                            }
                                        }
                                        else {
                                            if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                        }
                                    }
                                    else if (playersOnPositions[event.user].WG.length) {
                                        let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                        scoredPlayer = playersOnPositions[event.user].WG[idx];

                                        if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                        else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                    }
                                    else if (playersOnPositions[event.user].CM.length) {
                                        let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                        scoredPlayer = playersOnPositions[event.user].CM[idx];

                                        if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                        else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                            let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                        }
                                    }

                                    changeRating(scoredPlayer, 0.8);
                                    changeRating(assistantPlayer, 0.8);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    event.result = `${scoredPlayer.card.playerName} scores a header delivered by ${assistantPlayer.card.playerName}`;
                                    event.players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position.name,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerId: assistantPlayer.card.playerId,
                                            playerName: assistantPlayer.card.playerName,
                                            position: assistantPlayer.position.name,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        },
                                    ];
                                    break;

                                case 132:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 0.4);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    event.result = `Spectacular powershot by ${scoredPlayer.card.playerName}`;
                                    event.players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position.name,
                                            role: 'player',
                                            ratingDiff: 0.4,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 133:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 1);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    event.result = `${scoredPlayer.card.playerName} scores after solo breakthrough`;
                                    event.players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position.name,
                                            role: 'player',
                                            ratingDiff: 1,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 134:
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        // scoredPlayer = (FW|WG)
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                        // assistantPlayer = CM
                                        if (playersOnPositions[event.user].CM.length) {
                                            assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                        }
                                        // assistantPlayer = (CD|WB)
                                        else {
                                            let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                        }
                                    }
                                    else {
                                        // scoredPlayer = CM
                                        let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                        scoredPlayer = playersOnPositions[event.user].CM[idx];


                                        // assistantPlayer = (CD|WB)
                                        if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                            let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                        }
                                        // assistantPlayer = CM
                                        else {
                                            assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                        }
                                    }

                                    changeRating(scoredPlayer, 0.8);
                                    changeRating(assistantPlayer, 0.8);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    event.result = `Goal! ${scoredPlayer.card.playerName} runs and ${assistantPlayer.card.playerName} provides an assist`;
                                    event.players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position.name,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerId: assistantPlayer.card.playerId,
                                            playerName: assistantPlayer.card.playerName,
                                            position: assistantPlayer.position.name,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 135:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 1);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    event.result = `Goal! ${scoredPlayer.card.playerName} used opponent’s silly mistake`;
                                    event.players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position.name,
                                            role: 'player',
                                            ratingDiff: 1,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 136:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 0.8);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                    }

                                    event.result = `Goal! Brilliant team-play finished by ${scoredPlayer.card.playerName}`;
                                    event.players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position.name,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.5,
                                        }
                                    ];
                                    break;
                            }
                            break;
                    }


                    //поиск виноватого игрока ================================================
                    let value = Math.random(),
                        anotherUserIdx = (event.user + 1) % 2,
                        guiltPlayer;

                    if (value <= 0.15) guiltPlayer = playersOnPositions[anotherUserIdx].GK[0];
                    else if (value <= 0.30) {
                        let possibleGuiltPlayers = [...playersOnPositions[anotherUserIdx].FW, ...playersOnPositions[anotherUserIdx].WG];
                        guiltPlayer = possibleGuiltPlayers[MathService.randomInteger(0, possibleGuiltPlayers.length - 1)];
                    }
                    else if (value <= 0.60) guiltPlayer = playersOnPositions[anotherUserIdx].CM[MathService.randomInteger(0, playersOnPositions[anotherUserIdx].CM.length - 1)];
                    else {
                        let possibleGuiltPlayers = [...playersOnPositions[anotherUserIdx].CD, ...playersOnPositions[anotherUserIdx].WB];
                        guiltPlayer = possibleGuiltPlayers[MathService.randomInteger(0, possibleGuiltPlayers.length - 1)];
                    }

                    changeRating(guiltPlayer, -0.2);

                    event.players.push({
                        playerId: guiltPlayer.card.playerId,
                        playerName: guiltPlayer.card.playerName,
                        position: guiltPlayer.position.name,
                        role: 'guilt',
                        ratingDiff: -0.2,
                    });
                    //поиск виноватого игрока ================================================

                    // -0.2 пропустившим гол игрокам
                    for (let playerIndex = 0; playerIndex < anotherUser.players.length; playerIndex++) changeRating(anotherUser.players[playerIndex], -0.2);
                    event.players.push({
                        playerName: 'Another team players',
                        position: 'Another team positions',
                        role: 'none',
                        ratingDiff: -0.2,
                    });
                }
                else {
                    eventCode = 130;

                    let anotherUser = event.user === 0 ? user2 : user1;

                    actedPlayer = anotherUser.players[anotherUser.players.length - 1];
                    changeRating(actedPlayer, 0.4);

                    event.result = `Shot on target`;
                    event.players = [
                        {
                            playerId: actedPlayer.card.playerId,
                            playerName: actedPlayer.card.playerName,
                            position: actedPlayer.position.name,
                            ratingDiff: 0.4,
                        }
                    ];
                }
                break;
        }

        event.code = eventCode;
        event.score = goals[0] + '-' + goals[1];
    }
    // получение ивентов в матче ===============================================================================


    // рассчёт рейтинга игроков за сезон (среднее арифм)===========================
    for (let playerIndex = 0; playerIndex < user1.players.length; playerIndex++) {
        let sumOfMarks = 0;

        for (let marksIndex = 0; marksIndex < user1.players[playerIndex].card.seasonRatingMarks.length; marksIndex++) {
            sumOfMarks += user1.players[playerIndex].card.seasonRatingMarks[marksIndex];
        }

        user1.players[playerIndex].card.averageRating = Number((sumOfMarks / user1.players[playerIndex].card.seasonRatingMarks.length).toFixed(2));
    }

    for (let playerIndex = 0; playerIndex < kickedPlayers[0].length; playerIndex++) {
        let sumOfMarks = 0;

        for (let marksIndex = 0; marksIndex < kickedPlayers[0][playerIndex].card.seasonRatingMarks.length; marksIndex++) {
            sumOfMarks += kickedPlayers[0][playerIndex].card.seasonRatingMarks[marksIndex];
        }

        kickedPlayers[0][playerIndex].card.averageRating = Number((sumOfMarks / kickedPlayers[0][playerIndex].card.seasonRatingMarks.length).toFixed(2));
    }


    for (let playerIndex = 0; playerIndex < user2.players.length; playerIndex++) {
        let sumOfMarks = 0;

        for (let marksIndex = 0; marksIndex < user2.players[playerIndex].card.seasonRatingMarks.length; marksIndex++) {
            sumOfMarks += user2.players[playerIndex].card.seasonRatingMarks[marksIndex];
        }

        user2.players[playerIndex].card.averageRating = Number((sumOfMarks / user2.players[playerIndex].card.seasonRatingMarks.length).toFixed(2));
    }

    for (let playerIndex = 0; playerIndex < kickedPlayers[1].length; playerIndex++) {
        let sumOfMarks = 0;

        for (let marksIndex = 0; marksIndex < kickedPlayers[1][playerIndex].card.seasonRatingMarks.length; marksIndex++) {
            sumOfMarks += kickedPlayers[1][playerIndex].card.seasonRatingMarks[marksIndex];
        }

        kickedPlayers[1][playerIndex].card.averageRating = Number((sumOfMarks / kickedPlayers[1][playerIndex].card.seasonRatingMarks.length).toFixed(2));
    }
    // рассчёт рейтинга игроков за сезон (среднее арифм)===========================


    // изменение статуса unavailable для всех игроков юзеров===========================
    for (let plIdx = 0; plIdx < user1.resultAllPlayers.length; plIdx++) {
        let currPlayer = user1.resultAllPlayers[plIdx];
        if (currPlayer.unavailableMatchesCount > 0) currPlayer.unavailableMatchesCount--;
    }

    for (let plIdx = 0; plIdx < user2.resultAllPlayers.length; plIdx++) {
        let currPlayer = user2.resultAllPlayers[plIdx];
        if (currPlayer.unavailableMatchesCount > 0) currPlayer.unavailableMatchesCount--;
    }
    // изменение статуса unavailable для всех игроков юзеров===========================


    user1.players = user1.players.concat(kickedPlayers[0]);
    user2.players = user2.players.concat(kickedPlayers[1]);

    let resultLogs = {
        user1: {
            id: user1.id,
            players: user1.players.map(player => {
                return {
                    playerId: player.card.playerId,
                    playerName: player.card.playerName,
                    head: player.card.head,
                    body: player.card.body,
                    clothing: player.card.clothing,
                    hair: player.card.hair,
                };
            })
        },
        user2: {
            id: user2.id,
            players: user2.players.map(player => {
                return {
                    playerId: player.card.playerId,
                    playerName: player.card.playerName,
                    head: player.card.head,
                    body: player.card.body,
                    clothing: player.card.clothing,
                    hair: player.card.hair,
                };
            })
        },
        matchEvents: matchLogs
    };


    //debug===========================================================================
    debugLogs.logs = resultLogs; //d
    debugLogs.score = goals[0] + '-' + goals[1]; //d
    debugLogs.user1.totalEvents = eventsArrs[0].join(' '); //d
    debugLogs.user2.totalEvents = eventsArrs[1].join(' '); //d


    function getLogsText_debug(user1, user2, debugLogs, matchLogs) {
        let logsText = '';

        logsText += 'Звёзды игроков:\n=============================\n';

        logsText += 'Игрок 1:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${debugLogs.user1.playersAsm[i].playerName}: ${debugLogs.user1.playersAsm[i].asmSum}\n`;
        }
        logsText += '=================\n';

        logsText += 'Игрок 2:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${debugLogs.user2.playersAsm[i].playerName}: ${debugLogs.user2.playersAsm[i].asmSum}\n`;
        }
        logsText += '=================\n';


        logsText += '\n\nРейтинг карточек перед матчем:\n=============================\n';

        logsText += 'Игрок 1:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${user1.players[i].card.playerName}: 6.6\n`;
        }
        logsText += '=================\n';

        logsText += 'Игрок 2:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${user2.players[i].card.playerName}: 6.6\n`;
        }
        logsText += '=================\n';


        logsText += '\n\nЛоги матча:\n=============================\n';
        for (let i = 1; i < matchLogs.length; i++) {
            let playersRatingString = '';

            for (let j = 0; j < matchLogs[i].players.length; j++) {
                playersRatingString += `${matchLogs[i].players[j].playerName} (${matchLogs[i].players[j].ratingDiff}), `;
            }

            playersRatingString = playersRatingString.substring(0, playersRatingString.length - 2);

            logsText += `${matchLogs[i].minute} минута, игрок ${matchLogs[i].user + 1}, событие ${matchLogs[i].momentType}.\nРезультат: ${matchLogs[i].result}.\nИзменение рейтинга: ${playersRatingString}.\n====================================\n`;
        }


        logsText += `\n\nСчёт: ${goals[0]}-${goals[1]}\n`;


        let yellowCards = [[], []], violations = [[], []], offendingPlayerIds = [[], []];
        for (let i = 1; i < matchLogs.length; i++) {
            let event = matchLogs[i];
            if (event.momentType === 11 && event.result.endsWith('card')) {
                let actedPlayer = event.players[0],
                    injuredPlayer = event.players[1],
                    cardType = 'Yellow';

                if (offendingPlayerIds[event.user].includes(actedPlayer.playerId)) cardType = 'Red';
                else offendingPlayerIds[event.user].push(actedPlayer.playerId);

                violations[event.user].push({
                    cardType,
                    actedPlayer,
                    injuredPlayer,
                });
                yellowCards[event.user].push({
                    actedPlayer,
                    injuredPlayer,
                });
            }
        }

        logsText += `\n\nНарушения:\n\n`;

        logsText += `Игрок 1:\n===============\n`;
        for (let i = 0; i < violations[0].length; i++) {
            logsText += `(${violations[0][i].cardType} card) Injured: ${yellowCards[0][i].injuredPlayer.playerName}, Acted: ${yellowCards[0][i].actedPlayer.playerName}`;

            if (violations[0][i].cardType === 'Red') logsText += ' (kicked)';

            logsText += '\n';
        }
        logsText += `===============\n`;

        logsText += `\nИгрок 2:\n===============\n`;
        for (let i = 0; i < violations[1].length; i++) {
            logsText += `(${violations[1][i].cardType} card) Injured: ${yellowCards[1][i].injuredPlayer.playerName}, Acted: ${yellowCards[1][i].actedPlayer.playerName}`;

            if (violations[1][i].cardType === 'Red') logsText += ' (kicked)';

            logsText += '\n';
        }
        logsText += `===============\n`;


        logsText += '\n\nРейтинг карточек после матча:\n=============================\n';

        logsText += 'Игрок 1:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${user1.players[i].card.playerName}: ${user1.players[i].card.seasonRatingMarks[user1.players[i].card.seasonRatingMarks.length - 1]}\n`;
        }
        logsText += '=================\n';

        logsText += 'Игрок 2:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${user2.players[i].card.playerName}: ${user2.players[i].card.seasonRatingMarks[user2.players[i].card.seasonRatingMarks.length - 1]}\n`;
        }
        logsText += '=================\n';

        return logsText;
    }

    debugLogs.logsText = getLogsText_debug(user1, user2, debugLogs, matchLogs);
    //debug===========================================================================

    if (saveToDB) {
        let
            user1UpdateLastTeamQuery = prisma.user.update({
                where: {
                    id: user1.id,
                },
                data: {
                    lastTeam: JSON.stringify(user1.resultLastTeam)
                }
            }),
            user1UpdateAllPlayersQuery = prisma.user_players.update({
                where: {
                    userId: user1.id,
                },
                data: {
                    playersJson: JSON.stringify(user1.resultAllPlayers)
                }
            }),
            user2UpdateLastTeamQuery = prisma.user.update({
                where: {
                    id: user2.id,
                },
                data: {
                    lastTeam: JSON.stringify(user2.resultLastTeam)
                }
            }),
            user2UpdateAllPlayersQuery = prisma.user_players.update({
                where: {
                    userId: user2.id,
                },
                data: {
                    playersJson: JSON.stringify(user2.resultAllPlayers)
                }
            }),
            matchUpdateQuery = prisma.match.update({
                where: {
                    id: match.id
                },
                data: {
                    logs: JSON.stringify(resultLogs),
                    score: goals[0] + ':' + goals[1],
                }
            });

        await prisma.$transaction([user1UpdateLastTeamQuery, user1UpdateAllPlayersQuery, user2UpdateLastTeamQuery, user2UpdateAllPlayersQuery, matchUpdateQuery]);
    }

    return debugLogs;
}

async function playMatchManyTimes_17otr_v2(matchId, count, saveToDb) {
    let debugLogs = []; //d

    let overall = {
        winFirst: 0,
        winSecond: 0,
        draw: 0,
        allGoalsCount: 0,
        '0:0 count': 0
    };

    for (let i = 0; i < count; i++) {
        debugLogs.push((await playDebugMatch_17otr_v2(matchId, saveToDb)));

        let goals = debugLogs[i].score.split('-').map(item => {
            return +item;
        });


        if (goals[0] > goals[1]) overall.winFirst++;
        else if (goals[0] < goals[1]) overall.winSecond++;
        else overall.draw++;

        overall.allGoalsCount += goals[0] + goals[1];

        if (goals[0] === 0 && goals[1] === 0) overall['0:0 count']++;
    }

    debugLogs.push(overall);

    return debugLogs;
}


async function playDebugMatch_v_17otr_v1(matchId, saveToDB) {
    // debug functions ===================================================================================
    function getPlayerAsmParts(player) {
        let technicalSkills = {},
            physicalSkills = {};

        for (let skill in player.card.physicalSkills) physicalSkills[skill] = player.card.physicalSkills[skill];
        for (let skill in player.card.technicalSkills) technicalSkills[skill] = player.card.technicalSkills[skill];

        switch (player.position) {
            case 'FW':
                technicalSkills.shoot *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.agility *= 3;
                physicalSkills.jump *= 3;
                break;

            case 'WG':
                technicalSkills.cross *= 3;
                technicalSkills.shoot *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.agility *= 3;
                break;

            case 'CM':
                technicalSkills.pass *= 3;
                physicalSkills.agility *= 3;
                physicalSkills.strength *= 3;
                break;

            case 'CD':
                technicalSkills.tackling *= 3;
                physicalSkills.strength *= 3;
                physicalSkills.jump *= 3;
                break;

            case 'WB':
                technicalSkills.cross *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.jump *= 3;
                break;
        }


        //получение asm игрока =============================================
        let phy = 0, te = 0, skillsSum, positionBonus = -2, asm;

        for (let skill in physicalSkills) phy += physicalSkills[skill];
        for (let skill in technicalSkills) te += technicalSkills[skill];

        phy = Math.min(Math.max(-5, phy), 5);
        te = Math.min(Math.max(-5, te), 5);
        skillsSum = Math.min(Math.max(1, phy + te), 10);


        // если текущая игрока позиция подходит "preferedPosition" - бонус = +2
        switch (player.card.preferedPosition) {
            case 'ATT':
                if (player.position === 'FW' || player.position === 'WG') positionBonus = 2;
                break;

            case 'MID':
                if (player.position === 'CM') positionBonus = 2;
                break;

            case 'DEF':
                if (player.position === 'CD' || player.position === 'WB') positionBonus = 2;
                break;

            case 'GK':
                if (player.position === 'GK') positionBonus = 2;
                break;
        }


        // asm = skillsSum(phy + te [1-10]) + card mood [-3 - 3] + positionBonus[-2/2] + card reputation [-2/0/2] = [1-10]
        asm = Math.min(Math.max(1, skillsSum + player.card.mood + positionBonus + ((match.league.level - player.card.playerReputation) * 2)), 10);

        if (asm % 1 !== 0) asm += 0.5 * (player.card.mood < 0 ? -1 : 1);
        //получение asm игрока =============================================

        let asmString =
            `phy=${phy}, te=${te}, mood=${player.card.mood}, ` +
            `reputationBonus=${((match.league.level - player.card.playerReputation) * 2)}, ` +
            `positionBonus=${positionBonus} ==> ` +
            `playerAsm=${asm}`;

        return asmString;
    }

    // debug functions ===================================================================================


    function sortPlayersByAverageRating(a, b) {
        if (a.card.isGoalKeeper) return 1;
        if (b.card.isGoalKeeper) return -1;

        if (a.card.averageRating < b.card.averageRating) return -1;
        if (a.card.averageRating > b.card.averageRating) return 1;

        return 0;
    }

    function findInjured_111(eventedUser, playersWithSkills, injuredPlayers) {
        let STAmPlayersCount = playersWithSkills.STAm.length,
            STAzPlayersCount = playersWithSkills.STAz.length,
            possibleInjuredPlayers = [],
            injuredPlayer;

        if (STAmPlayersCount) {
            for (let j = 0; j < playersWithSkills.STAm.length; j++) {
                let currPlayer = playersWithSkills.STAm[j];
                if (!injuredPlayers.includes(currPlayer.card.playerId)) possibleInjuredPlayers.push(currPlayer);
            }
        }

        if (!possibleInjuredPlayers.length && STAzPlayersCount) {
            for (let j = 0; j < playersWithSkills.STAz.length; j++) {
                let currPlayer = playersWithSkills.STAz[j];
                if (!injuredPlayers.includes(currPlayer.card.playerId)) possibleInjuredPlayers.push(currPlayer);
            }
        }

        if (!possibleInjuredPlayers.length) {
            for (let j = 0; j < 5; j++) {
                let currPlayer = eventedUser.players[j];
                if (!injuredPlayers.includes(currPlayer.card.playerId)) possibleInjuredPlayers.push(currPlayer);
            }

            if (!possibleInjuredPlayers.length) {
                for (let j = 0; j < 5; j++) possibleInjuredPlayers.push(eventedUser.players[j]);
            }
        }

        injuredPlayer = possibleInjuredPlayers[MathService.randomInteger(0, possibleInjuredPlayers.length - 1)];

        return injuredPlayer;
    }

    function findActed_111(anotherUser) {
        let actedPlayer = anotherUser.players[MathService.randomInteger(0, anotherUser.players.length - 2)];

        return actedPlayer;
    }

    function calculatePlayerAsm(player) {
        let technicalSkills = {},
            physicalSkills = {};

        for (let skill in player.card.physicalSkills) physicalSkills[skill] = player.card.physicalSkills[skill];
        for (let skill in player.card.technicalSkills) technicalSkills[skill] = player.card.technicalSkills[skill];

        switch (player.position) {
            case 'FW':
                technicalSkills.shoot *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.agility *= 3;
                physicalSkills.jump *= 3;
                break;

            case 'WG':
                technicalSkills.cross *= 3;
                technicalSkills.shoot *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.agility *= 3;
                break;

            case 'CM':
                technicalSkills.pass *= 3;
                physicalSkills.agility *= 3;
                physicalSkills.strength *= 3;
                break;

            case 'CD':
                technicalSkills.tackling *= 3;
                physicalSkills.strength *= 3;
                physicalSkills.jump *= 3;
                break;

            case 'WB':
                technicalSkills.cross *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.jump *= 3;
                break;
        }


        //получение asm игрока =============================================
        let phy = 0, te = 0, skillsSum, positionBonus = -2, asm;

        for (let skill in physicalSkills) phy += physicalSkills[skill];
        for (let skill in technicalSkills) te += technicalSkills[skill];

        phy = Math.min(Math.max(-5, phy), 5);
        te = Math.min(Math.max(-5, te), 5);
        skillsSum = Math.min(Math.max(1, phy + te), 10);


        // если текущая игрока позиция подходит "preferedPosition" - бонус = +2
        switch (player.card.preferedPosition) {
            case 'ATT':
                if (player.position === 'FW' || player.position === 'WG') positionBonus = 2;
                break;

            case 'MID':
                if (player.position === 'CM') positionBonus = 2;
                break;

            case 'DEF':
                if (player.position === 'CD' || player.position === 'WB') positionBonus = 2;
                break;

            case 'GK':
                if (player.position === 'GK') positionBonus = 2;
                break;
        }


        // asm = skillsSum(phy + te [1-10]) + card mood [-3 - 3] + positionBonus[-2/2] + card reputation [-2/0/2] = [1-10]
        asm = Math.min(Math.max(1, skillsSum + player.card.mood + positionBonus + ((match.league.level - player.card.playerReputation) * 2)), 10);

        if (asm % 1 !== 0) asm += 0.5 * (player.card.mood < 0 ? -1 : 1);
        //получение asm игрока =============================================

        return asm;
    }


    const match = await prisma.match.findFirst({
        select: {
            id: true,
            player1: {
                select: {
                    id: true,
                    avatar: true,
                    lastTactic: true,
                    lastTeam: true,
                    players: {
                        select: {
                            playersJson: true
                        }
                    },
                },
            },
            player2: {
                select: {
                    id: true,
                    avatar: true,
                    lastTactic: true,
                    lastTeam: true,
                    players: {
                        select: {
                            playersJson: true
                        }
                    },
                }
            },
            league: {
                select: {
                    level: true
                }
            }
        },
        where: {
            id: matchId
        },
    });

    let
        matchLogs = [],
        user1 = {
            id: match.player1.id,
            avatar: match.player1.avatar,
            tactic: JSON.parse(match.player1.lastTactic),
            players: [],
            resultLastTeam: JSON.parse(match.player1.lastTeam),
            resultAllPlayers: JSON.parse(match.player1.players.playersJson),
        },
        user2 = {
            id: match.player2.id,
            avatar: match.player2.avatar,
            tactic: JSON.parse(match.player2.lastTactic),
            players: [],
            resultLastTeam: JSON.parse(match.player2.lastTeam),
            resultAllPlayers: JSON.parse(match.player2.players.playersJson),
        },
        playersOnPositions = [
            {
                'FW': [],
                'WG': [],
                'CM': [],
                'WB': [],
                'CD': [],
                'GK': [],
            },
            {
                'FW': [],
                'WG': [],
                'CM': [],
                'WB': [],
                'CD': [],
                'GK': [],
            }
        ],
        playersWithSkills = [
            {
                AGIp: [],
                TCKLp: [],
                PASp: [],
                STAz: [],
                STAm: [],
                AGIm: [],
            },
            {
                AGIp: [],
                TCKLp: [],
                PASp: [],
                STAz: [],
                STAm: [],
                AGIm: [],
            },
        ],
        T = [0, 0],
        goals = [0, 0],
        eventsArrs = [[], []], //d
        debugLogs = {
            matchId: match.id,
            score: null,
            user1: {
                id: user1.id,
                players: user1.players,
                playersAsm: [],
                homeBonus: 3,
                avatarBonus: 0,
                T: 0,
            },
            user2: {
                id: user2.id,
                players: user2.players,
                playersAsm: [],
                homeBonus: 0,
                avatarBonus: 0,
                T: 0,
            },
        }; //d


    // заполнение массивов players ссылками на этих же игроков из resultAllPlayers =====================================
    function sortPlayersById_1(a, b) {
        if (a.playerId < b.playerId) return -1;
        if (a.playerId > b.playerId) return 1;
        return 0;
    }

    user1.resultLastTeam.sort(sortPlayersById_1);
    user2.resultLastTeam.sort(sortPlayersById_1);
    user1.resultAllPlayers.sort(sortPlayersById_1);
    user2.resultAllPlayers.sort(sortPlayersById_1);

    let rapPlIdx = 0;
    for (let ltPlIdx = 0; ltPlIdx < user1.resultLastTeam.length; ltPlIdx++) {
        while (user1.resultAllPlayers[rapPlIdx].playerId !== user1.resultLastTeam[ltPlIdx].playerId) rapPlIdx++;

        user1.resultAllPlayers[rapPlIdx].seasonRatingMarks.push(6.6); //начальная оценка за матч

        user1.players.push({
            card: user1.resultAllPlayers[rapPlIdx],
            position: {
                name: user1.resultLastTeam[ltPlIdx].position.split(':')[0],
                index: user1.resultLastTeam[ltPlIdx].position.split(':')[1],
            },
            asm: undefined,
        });
    }

    rapPlIdx = 0;
    for (let ltPlIdx = 0; ltPlIdx < user2.resultLastTeam.length; ltPlIdx++) {
        while (user2.resultAllPlayers[rapPlIdx].playerId !== user2.resultLastTeam[ltPlIdx].playerId) rapPlIdx++;

        user2.resultAllPlayers[rapPlIdx].seasonRatingMarks.push(6.6); //начальная оценка за матч

        user2.players.push({
            card: user2.resultAllPlayers[rapPlIdx],
            position: {
                name: user2.resultLastTeam[ltPlIdx].position.split(':')[0],
                index: user2.resultLastTeam[ltPlIdx].position.split(':')[1],
            },
            asm: undefined,
        });
    }


    user1.players.sort(sortPlayersByAverageRating);
    user2.players.sort(sortPlayersByAverageRating);
    // заполнение массивов players ссылками на этих же игроков из resultAllPlayers =====================================


    user1.players.forEach((player) => {
        // добавление игрока в массив игроков на {позиции}
        playersOnPositions[0][player.position.name].push(player);

        // добавление игрока в массивы со скиллами =========================================
        if (player.card.physicalSkills.agility > 0) playersWithSkills[0].AGIp.push(player);
        else if (player.card.physicalSkills.agility < 0) playersWithSkills[0].AGIm.push(player);

        if (player.card.technicalSkills.tackling > 0) playersWithSkills[0].TCKLp.push(player);

        if (player.card.technicalSkills.pass > 0) playersWithSkills[0].PASp.push(player);

        if (player.card.physicalSkills.stamina < 0) playersWithSkills[0].STAm.push(player);
        else if (player.card.physicalSkills.stamina === 0) playersWithSkills[0].STAz.push(player);
        // добавление игрока в массивы со скиллами =========================================

        let playerAsm = calculatePlayerAsm(player);
        T[0] += playerAsm;
        player.asm = playerAsm;

        debugLogs.user1.playersAsm.push({
            playerId: player.card.playerId,
            playerName: player.card.playerName,
            asmCalc: getPlayerAsmParts(player),
            asmSum: playerAsm,
        }); //d
    });
    user2.players.forEach((player) => {
        //распределение в массивах игроков на позициях
        playersOnPositions[1][player.position.name].push(player);

        // добавление игрока в массивы со скиллами =========================================
        if (player.card.physicalSkills.agility > 0) playersWithSkills[1].AGIp.push(player);
        else if (player.card.physicalSkills.agility < 0) playersWithSkills[1].AGIm.push(player);

        if (player.card.technicalSkills.tackling > 0) playersWithSkills[1].TCKLp.push(player);

        if (player.card.technicalSkills.pass > 0) playersWithSkills[1].PASp.push(player);

        if (player.card.physicalSkills.stamina < 0) playersWithSkills[1].STAm.push(player);
        else if (player.card.physicalSkills.stamina === 0) playersWithSkills[1].STAz.push(player);
        // добавление игрока в массивы со скиллами =========================================

        let playerAsm = calculatePlayerAsm(player);
        T[1] += playerAsm;
        player.asm = playerAsm;

        debugLogs.user2.playersAsm.push({
            playerId: player.card.playerId,
            playerName: player.card.playerName,
            asmCalc: getPlayerAsmParts(player),
            asmSum: playerAsm,
        }); //d
    });

    debugLogs.user1.T_players = T[0]; //d
    debugLogs.user2.T_players = T[1]; //d


    T[0] += 3; //доп очки за домашнюю тиму
    if (user1.avatar !== user2.avatar) {
        if (avatarDefying[user1.avatar].includes(user2.avatar)) {
            T[0] += 6;

            debugLogs.user1.avatarBonus = 3;//debug
        }
        else if (avatarDefying[user2.avatar].includes(user1.avatar)) {
            T[1] += 6;

            debugLogs.user2.avatarBonus = 3;//debug
        }
    } // доп очки за контр тренеров

    debugLogs.user1.T_players_bonuses = T[0]; //d
    debugLogs.user2.T_players_bonuses = T[1]; //d


    let advantage = Math.abs(T[0] - T[1]),
        momentsCount1 = {
            firstTime: [0, 0],
            secondTime: [0, 0]
        };

    if (advantage <= 8) {
        if (T[0] > T[1]) T[1] = T[0];
        else T[0] = T[1];

        momentsCount1.firstTime = [8, 8];
    }
    else {
        let user1MomCount = Math.round(T[0] / ((T[0] + T[1]) / 16));
        momentsCount1.firstTime = [user1MomCount, 16 - user1MomCount];
    }


    debugLogs.user1.T_players_bonuses_adv = T[0]; //d
    debugLogs.user2.T_players_bonuses_adv = T[1]; //d


    function changeRating(player, ratingDiff) {
        player.card.seasonRatingMarks[player.card.seasonRatingMarks.length - 1] = Number((player.card.seasonRatingMarks[player.card.seasonRatingMarks.length - 1] + ratingDiff).toFixed(2));
    }

    let xG = [0, 0], xG1 = [0, 0], xG2 = [0, 0], lastPotGoalMinute = null;


    matchLogs.push({
        minute: '0',
        user: null,
        momentType: null,
        result: 'Match started!'
    });


    function getMoment(minute, availableMomentsCount, T, xG, xgTime, matchLogs) {
        let player = MathService.randomFloat(0, T[0] + T[1]) <= T[0] ? 0 : 1,
            randNum = MathService.randomInteger(1, 10),
            momentType = randNum >= 1 && randNum <= 2 ? 13 : randNum >= 3 && randNum <= 6 ? 12 : 11,
            momentWeight = 0.5 * (momentType - 9);

        if (availableMomentsCount[player] === 0) player = (player + 1) % 2;
        availableMomentsCount[player]--;


        T[player] += momentWeight; // чтобы получить вес 1/1.5/2 (11 -9. 12 - 9, 13 - 9)
        xG[player] += momentWeight;
        xgTime[player] += momentWeight;

        eventsArrs[player].push(momentType); //d

        matchLogs.push({
            minute,
            user: player,
            momentType,
            result: ''
        });
    }

    //первый тайм ===================================================================
    for (let i = 3; i <= 45; i += 3) getMoment(i.toString(), momentsCount1.firstTime, T, xG, xG1, matchLogs);
    getMoment(`45'add`, momentsCount1.firstTime, T, xG, xG1, matchLogs);

    xG1[0] /= 10;
    xG1[1] /= 10;
    //первый тайм ===================================================================


    eventsArrs[0].push("==="); //d
    eventsArrs[1].push("==="); //d


    advantage = Math.abs(T[0] - T[1]);
    if (advantage <= 8) momentsCount1.secondTime = [8, 8];
    else {
        let user1MomCount = Math.round(T[0] / ((T[0] + T[1]) / 16));
        momentsCount1.secondTime = [user1MomCount, 16 - user1MomCount];

        if (momentsCount1.secondTime[0] > momentsCount1.secondTime[1]) momentsCount1.secondTime[1]++;
        else momentsCount1.secondTime[0]++;
    }

    //второй тайм ===================================================================
    for (let i = 45; i <= 90; i += 3) getMoment(i.toString(), momentsCount1.secondTime, T, xG, xG2, matchLogs);
    if (advantage > 8) getMoment(`90'add`, momentsCount1.secondTime, T, xG, xG2, matchLogs);

    xG2[0] /= 10;
    xG2[1] /= 10;
    //второй тайм ===================================================================


    // получение ивентов в матче ===============================================================================
    for (let i = matchLogs.length - 1; i > 0; i--) {
        if (matchLogs[i].momentType === 13) {
            lastPotGoalMinute = matchLogs[i].minute;
            break;
        }
    }

    let playersWithYellowCards = [[], []], injuredPlayers = [[], []], kickedPlayers = [[], []];

    xG[0] = xG1[0];
    xG[1] = xG1[1];

    for (let i = 1; i < matchLogs.length; i++) {
        // добавляем xG первого тайма
        if (i === 17) {
            xG[0] += xG2[0];
            xG[1] += xG2[1];
        }

        let event = matchLogs[i],
            eventCode,
            eventedUser, scoredUser, anotherUser,
            AGIpPlayersCount, TCKLpPlayersCount, PASpPlayersCount, AGImPlayersCount, // для удобства
            actedPlayer, possibleActedPlayers, injuredPlayer;

        switch (event.momentType) {
            case 11:
                eventedUser = event.user === 0 ? user1 : user2;
                anotherUser = event.user === 0 ? user2 : user1;

                eventCode = MathService.randomInteger(111, 115);

                switch (eventCode) {
                    case 111:
                        injuredPlayer = findInjured_111(eventedUser, playersWithSkills[event.user], injuredPlayers[event.user]);
                        injuredPlayers[event.user].push(injuredPlayer.card.playerId);
                        changeRating(injuredPlayer, -0.2);

                        actedPlayer = findActed_111(anotherUser);
                        actedPlayer.card.seasonYellowCardsCount++;
                        changeRating(actedPlayer, -0.4);


                        if (playersWithYellowCards[(event.user + 1) % 2].includes(actedPlayer.card.playerId)) {
                            kickedPlayers[(event.user + 1) % 2].push(actedPlayer);
                            actedPlayer.card.unavailableMatchesCount = 2; // на 1 больше, ибо вконце разыгровки будет декремент

                            // удаление из массива игроков
                            for (let plIdx = 0; plIdx < anotherUser.players.length; plIdx++) {
                                if (anotherUser.players[plIdx].card.playerId === actedPlayer.card.playerId) {
                                    anotherUser.players.splice(plIdx, 1);
                                    break;
                                }
                            }

                            // удаление из игроков на позициях
                            for (let plIdx = 0; plIdx < playersOnPositions[(event.user + 1) % 2][actedPlayer.position.name].length; plIdx++) {
                                if (playersOnPositions[(event.user + 1) % 2][actedPlayer.position.name][plIdx].card.playerId === actedPlayer.card.playerId) {
                                    playersOnPositions[(event.user + 1) % 2][actedPlayer.position.name].splice(plIdx, 1);
                                    break;
                                }
                            }

                            // удаление из игроков по скиллах ===========================================================================
                            if (actedPlayer.card.physicalSkills.agility > 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].AGIp.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].AGIp[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].AGIp.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }
                            else if (actedPlayer.card.physicalSkills.agility < 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].AGIm.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].AGIm[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].AGIm.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }

                            if (actedPlayer.card.physicalSkills.stamina === 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].STAz.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].STAz[plIdx].playerId === actedPlayer.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].STAz.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }
                            else if (actedPlayer.card.physicalSkills.stamina < 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].STAm.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].STAm[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].STAm.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }

                            if (actedPlayer.card.technicalSkills.tackling > 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].TCKLp.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].TCKLp[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].TCKLp.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }

                            if (actedPlayer.card.technicalSkills.pass > 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].PASp.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].PASp[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].PASp.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }
                            // удаление из игроков по скиллах ===========================================================================


                            // замена игрока в "последнем составе" ========================================================
                            anotherUser.resultLastTeam.sort(sortPlayersById_1);
                            anotherUser.resultAllPlayers.sort(sortPlayersById_1);

                            let replacementPlayers = {
                                    ATT: [],
                                    MID: [],
                                    DEF: [],
                                },
                                allPlIdx = 0,
                                replacedPlayer = null;

                            for (let ltPlIdx = 0; ltPlIdx < anotherUser.resultLastTeam.length; ltPlIdx++) {
                                while (anotherUser.resultAllPlayers[allPlIdx].playerId !== anotherUser.resultLastTeam[ltPlIdx].playerId) {
                                    if (anotherUser.resultAllPlayers[allPlIdx].unavailableMatchesCount <= 1) replacementPlayers[anotherUser.resultAllPlayers[allPlIdx].preferedPosition].push(anotherUser.resultAllPlayers[allPlIdx]);
                                    allPlIdx++;
                                }
                                allPlIdx++;
                            }

                            if (actedPlayer.position.name === "FW" || actedPlayer.position.name === "WG") {
                                if (replacementPlayers.ATT.length) replacedPlayer = replacementPlayers.ATT[MathService.randomInteger(0, replacementPlayers.ATT.length - 1)];
                                else {
                                    let availablePlayers = [...replacementPlayers.MID, ...replacementPlayers.DEF];
                                    replacedPlayer = availablePlayers[MathService.randomInteger(0, availablePlayers.length - 1)];
                                }
                            }
                            else if (actedPlayer.position.name === "CM") {
                                if (replacementPlayers.MID.length) replacedPlayer = replacementPlayers.MID[MathService.randomInteger(0, replacementPlayers.MID.length - 1)];
                                else {
                                    let availablePlayers = [...replacementPlayers.ATT, ...replacementPlayers.DEF];
                                    replacedPlayer = availablePlayers[MathService.randomInteger(0, availablePlayers.length - 1)];
                                }
                            }
                            else if (actedPlayer.position.name === "CD" || actedPlayer.position.name === "WB") {
                                if (replacementPlayers.DEF.length) replacedPlayer = replacementPlayers.DEF[MathService.randomInteger(0, replacementPlayers.DEF.length - 1)];
                                else {
                                    let availablePlayers = [...replacementPlayers.ATT, ...replacementPlayers.MID];
                                    replacedPlayer = availablePlayers[MathService.randomInteger(0, availablePlayers.length - 1)];
                                }
                            }

                            replacedPlayer = JSON.parse(JSON.stringify(replacedPlayer));
                            replacedPlayer.position = actedPlayer.position.name + ':' + actedPlayer.position.index;

                            for (let plIdx = 0; plIdx < anotherUser.resultLastTeam.length; plIdx++) {
                                if (anotherUser.resultLastTeam[plIdx].playerId === actedPlayer.card.playerId) {
                                    anotherUser.resultLastTeam[plIdx] = replacedPlayer;
                                    break;
                                }
                            }
                            // замена игрока в "последнем составе" ========================================================


                            // отдача всех 13 моментов противоположной команде ============================================
                            for (let evIdx = i + 1; evIdx < matchLogs.length; evIdx++)
                                if (matchLogs[evIdx].momentType === 13 &&
                                    matchLogs[evIdx].user === ((event.user + 1) % 2)) matchLogs[evIdx].user = event.user;
                            // отдача всех 13 моментов противоположной команде ============================================
                        }
                        else {
                            playersWithYellowCards[(event.user + 1) % 2].push(actedPlayer.card.playerId);
                            if (actedPlayer.card.seasonYellowCardsCount === 8) {
                                actedPlayer.card.seasonYellowCardsCount = 0;
                                actedPlayer.card.unavailableMatchesCount = 2; // на 1 больше, ибо вконце разыгровки будет декремент

                                // замена игрока в "последнем составе" ========================================================
                                anotherUser.resultLastTeam.sort(sortPlayersById_1);
                                anotherUser.resultAllPlayers.sort(sortPlayersById_1);

                                let replacementPlayers = {
                                        ATT: [],
                                        MID: [],
                                        DEF: [],
                                    },
                                    allPlIdx = 0,
                                    replacedPlayer = null;

                                for (let ltPlIdx = 0; ltPlIdx < anotherUser.resultLastTeam.length; ltPlIdx++) {
                                    while (anotherUser.resultAllPlayers[allPlIdx].playerId !== anotherUser.resultLastTeam[ltPlIdx].playerId) {
                                        if (anotherUser.resultAllPlayers[allPlIdx].unavailableMatchesCount <= 1) replacementPlayers[anotherUser.resultAllPlayers[allPlIdx].preferedPosition].push(anotherUser.resultAllPlayers[allPlIdx]);
                                        allPlIdx++;
                                    }
                                    allPlIdx++;
                                }

                                if (actedPlayer.position.name === "FW" || actedPlayer.position.name === "WG") {
                                    if (replacementPlayers.ATT.length) replacedPlayer = replacementPlayers.ATT[MathService.randomInteger(0, replacementPlayers.ATT.length - 1)];
                                    else {
                                        let availablePlayers = [...replacementPlayers.MID, ...replacementPlayers.DEF];
                                        replacedPlayer = availablePlayers[MathService.randomInteger(0, availablePlayers.length - 1)];
                                    }
                                }
                                else if (actedPlayer.position.name === "CM") {
                                    if (replacementPlayers.MID.length) replacedPlayer = replacementPlayers.MID[MathService.randomInteger(0, replacementPlayers.MID.length - 1)];
                                    else {
                                        let availablePlayers = [...replacementPlayers.ATT, ...replacementPlayers.DEF];
                                        replacedPlayer = availablePlayers[MathService.randomInteger(0, availablePlayers.length - 1)];
                                    }
                                }
                                else if (actedPlayer.position.name === "CD" || actedPlayer.position.name === "WB") {
                                    if (replacementPlayers.DEF.length) replacedPlayer = replacementPlayers.DEF[MathService.randomInteger(0, replacementPlayers.DEF.length - 1)];
                                    else {
                                        let availablePlayers = [...replacementPlayers.ATT, ...replacementPlayers.MID];
                                        replacedPlayer = availablePlayers[MathService.randomInteger(0, availablePlayers.length - 1)];
                                    }
                                }

                                replacedPlayer = JSON.parse(JSON.stringify(replacedPlayer));
                                replacedPlayer.position = actedPlayer.position.name + ':' + actedPlayer.position.index;

                                for (let plIdx = 0; plIdx < anotherUser.resultLastTeam.length; plIdx++) {
                                    if (anotherUser.resultLastTeam[plIdx].playerId === actedPlayer.card.playerId) {
                                        anotherUser.resultLastTeam[plIdx] = replacedPlayer;
                                        break;
                                    }
                                }
                                // замена игрока в "последнем составе" ========================================================
                            }
                        }


                        event.result = `${injuredPlayer.card.playerName} is injured - ${actedPlayer.card.playerName} will be punished by a yellow card`;
                        event.players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position.name,
                                ratingDiff: -0.4,
                            },
                            {
                                playerId: injuredPlayer.card.playerId,
                                playerName: injuredPlayer.card.playerName,
                                position: injuredPlayer.position.name,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;

                    case 112:
                        AGImPlayersCount = playersWithSkills[event.user].AGIm.length;

                        if (AGImPlayersCount) actedPlayer = playersWithSkills[event.user].AGIm[MathService.randomInteger(0, AGImPlayersCount - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        event.result = `Unlucky dribbling - ${actedPlayer.card.playerName}`;
                        event.players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position.name,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;

                    case 113:
                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];

                        if (possibleActedPlayers.length) actedPlayer = possibleActedPlayers[MathService.randomInteger(0, possibleActedPlayers.length - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(0, eventedUser.players.length - 2)];
                        changeRating(actedPlayer, -0.2);

                        event.result = `Unlucky cross - ${actedPlayer.card.playerName}`;
                        event.players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position.name,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;

                    case 114:
                        event.result = `Slow passing in the midfield`;
                        event.players = [];
                        break;

                    case 115:
                        actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        event.result = `${actedPlayer.card.playerName} made a mistake`;
                        event.players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position.name,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;
                }
                break;

            case 12:
                eventedUser = event.user === 0 ? user1 : user2;
                anotherUser = event.user === 0 ? user2 : user1;

                eventCode = MathService.randomInteger(121, 125);

                switch (eventCode) {
                    case 121:
                        actedPlayer = eventedUser.players[MathService.randomInteger(0, eventedUser.players.length - 2)];

                        event.result = `Shot off target`;
                        event.players = [{
                            playerId: actedPlayer.card.playerId,
                            playerName: actedPlayer.card.playerName,
                            position: actedPlayer.position.name,
                            ratingDiff: 0,
                        }];
                        break;

                    case 122:
                        AGIpPlayersCount = playersWithSkills[event.user].AGIp.length;

                        if (AGIpPlayersCount) actedPlayer = playersWithSkills[event.user].AGIp[MathService.randomInteger(0, AGIpPlayersCount - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(eventedUser.players.length - 6, eventedUser.players.length - 2)];
                        changeRating(actedPlayer, 0.2);

                        event.result = `Successful dribbling by ${actedPlayer.card.playerName}`;
                        event.players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position.name,
                                ratingDiff: 0.2,
                            }
                        ];
                        break;

                    case 123:
                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];
                        possibleActedPlayers.sort(function (a, b) {
                            if (a.card.averageRating < b.card.averageRating) return -1;
                            if (a.card.averageRating > b.card.averageRating) return 1;
                            return 0;
                        });

                        actedPlayer = possibleActedPlayers[possibleActedPlayers.length - 1];
                        changeRating(actedPlayer, 0.2);

                        event.result = `Promising cross by ${actedPlayer.card.playerName}`;
                        event.players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position.name,
                                ratingDiff: 0.2,
                            }
                        ];
                        break;

                    case 124:
                        TCKLpPlayersCount = playersWithSkills[event.user].TCKLp.length;

                        if (TCKLpPlayersCount) actedPlayer = playersWithSkills[event.user].TCKLp[MathService.randomInteger(0, TCKLpPlayersCount - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(eventedUser.players.length - 6, eventedUser.players.length - 2)];
                        changeRating(actedPlayer, 0.2);

                        event.result = `Interception by ${actedPlayer.card.playerName}`;
                        event.players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position.name,
                                ratingDiff: 0.2,
                            }
                        ];
                        break;

                    case 125:
                        PASpPlayersCount = playersWithSkills[event.user].PASp.length;

                        if (PASpPlayersCount) actedPlayer = playersWithSkills[event.user].PASp[MathService.randomInteger(0, PASpPlayersCount - 1)];
                        else {
                            playersOnPositions[event.user].CM.sort(function (a, b) {
                                if (a.card.averageRating < b.card.averageRating) return -1;
                                if (a.card.averageRating > b.card.averageRating) return 1;
                                return 0;
                            });
                            actedPlayer = playersOnPositions[event.user].CM[playersOnPositions[event.user].CM.length - 1];
                        }

                        changeRating(actedPlayer, 0.2);

                        event.result = `Promising through pass by ${actedPlayer.card.playerName}`;
                        event.players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position.name,
                                ratingDiff: 0.2,
                            }
                        ];
                        break;
                }
                break;

            case 13:
                let chanceNumbers = Math.floor(xG[event.user] / 0.25);

                if (event.minute === lastPotGoalMinute && goals[0] === goals[1]) chanceNumbers++;

                let randNumbers = MathService.randomInteger(1, 10),
                    goal = randNumbers <= chanceNumbers ? 1 : 0;

                if (goal) {
                    let scoredPlayer, assistantPlayer, possibleScoredPlayers;

                    scoredUser = event.user === 0 ? user1 : user2;
                    anotherUser = event.user === 0 ? user2 : user1;

                    goals[event.user]++;
                    xG[event.user] = Math.max(0, xG[event.user] - 1); //чтобы xG игрока не был меньше 0

                    switch (scoredUser.tactic.teamFocus) {
                        case 'wing-play':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                eventCode = 131;


                                if (playersOnPositions[event.user].FW.length) {
                                    scoredPlayer = playersOnPositions[event.user].FW[0];

                                    let avgTeamAsm = 0;
                                    for (let j = 0; j < scoredUser.players.length; j++) avgTeamAsm += scoredUser.players[j].asm;
                                    avgTeamAsm /= scoredUser.players.length;

                                    if (scoredPlayer.asm > avgTeamAsm) {
                                        if (playersOnPositions[event.user].WG.length) {
                                            let scPlIdx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);

                                            scoredPlayer = playersOnPositions[event.user].WG[scPlIdx];

                                            if (playersOnPositions[event.user].WG.length >= 2) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [scPlIdx])];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                        }
                                        else if (playersOnPositions[event.user].CM.length) {
                                            let scPlIdx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);

                                            scoredPlayer = playersOnPositions[event.user].CM[scPlIdx];

                                            if (playersOnPositions[event.user].CM.length >= 2) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [scPlIdx])];
                                            else if (playersOnPositions[event.user].WB.length) assistantPlayer = playersOnPositions[event.user].WB[MathService.randomInteger(0, playersOnPositions[event.user].WB.length - 1)];
                                        }
                                    }
                                    else {
                                        if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                    }
                                }
                                else if (playersOnPositions[event.user].WG.length) {
                                    let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                    scoredPlayer = playersOnPositions[event.user].WG[idx];

                                    if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                    else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                }
                                else if (playersOnPositions[event.user].CM.length) {
                                    let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                    scoredPlayer = playersOnPositions[event.user].CM[idx];

                                    if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                    else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                        let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                    }
                                }

                                changeRating(scoredPlayer, 0.8);
                                changeRating(assistantPlayer, 0.8);


                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }

                                event.result = `${scoredPlayer.card.playerName} scores a header delivered by ${assistantPlayer.card.playerName}`;
                                event.players = [
                                    {
                                        playerId: scoredPlayer.card.playerId,
                                        playerName: scoredPlayer.card.playerName,
                                        position: scoredPlayer.position.name,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerId: assistantPlayer.card.playerId,
                                        playerName: assistantPlayer.card.playerName,
                                        position: assistantPlayer.position.name,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    },
                                ];
                            }
                            else {
                                eventCode = MathService.randomInteger(131, 136);

                                switch (eventCode) {
                                    case 131:
                                        if (playersOnPositions[event.user].FW.length) {
                                            scoredPlayer = playersOnPositions[event.user].FW[0];

                                            let avgTeamAsm = 0;
                                            for (let j = 0; j < scoredUser.players.length; j++) avgTeamAsm += scoredUser.players[j].asm;
                                            avgTeamAsm /= scoredUser.players.length;

                                            if (scoredPlayer.asm > avgTeamAsm) {
                                                if (playersOnPositions[event.user].WG.length) {
                                                    let scPlIdx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);

                                                    scoredPlayer = playersOnPositions[event.user].WG[scPlIdx];

                                                    if (playersOnPositions[event.user].WG.length >= 2) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [scPlIdx])];
                                                    else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                                }
                                                else if (playersOnPositions[event.user].CM.length) {
                                                    let scPlIdx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);

                                                    scoredPlayer = playersOnPositions[event.user].CM[scPlIdx];

                                                    if (playersOnPositions[event.user].CM.length >= 2) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [scPlIdx])];
                                                    else if (playersOnPositions[event.user].WB.length) assistantPlayer = playersOnPositions[event.user].WB[MathService.randomInteger(0, playersOnPositions[event.user].WB.length - 1)];
                                                }
                                            }
                                            else {
                                                if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                                else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                            }
                                        }
                                        else if (playersOnPositions[event.user].WG.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].WG[idx];

                                            if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        }
                                        else if (playersOnPositions[event.user].CM.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];

                                            if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        event.result = `${scoredPlayer.card.playerName} scores a header delivered by ${assistantPlayer.card.playerName}`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.card.playerId,
                                                playerName: assistantPlayer.card.playerName,
                                                position: assistantPlayer.position.name,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        break;

                                    case 132:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.4);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        event.result = `Spectacular powershot by ${scoredPlayer.card.playerName}`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 0.4,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 133:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        event.result = `${scoredPlayer.card.playerName} scores after solo breakthrough`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 134:
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            // scoredPlayer = (FW|WG)
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                            // assistantPlayer = CM
                                            if (playersOnPositions[event.user].CM.length) {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                            }
                                            // assistantPlayer = (CD|WB)
                                            else {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                        }
                                        else {
                                            // scoredPlayer = CM
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];


                                            // assistantPlayer = (CD|WB)
                                            if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                            // assistantPlayer = CM
                                            else {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        event.result = `Goal! ${scoredPlayer.card.playerName} runs and ${assistantPlayer.card.playerName} provides an assist`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.card.playerId,
                                                playerName: assistantPlayer.card.playerName,
                                                position: assistantPlayer.position.name,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 135:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        event.result = `Goal! ${scoredPlayer.card.playerName} used opponent’s silly mistake`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 136:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        event.result = `Goal! Brilliant team-play finished by ${scoredPlayer.card.playerName}`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.5,
                                            }
                                        ];
                                        break;
                                }
                            }
                            break;

                        case 'midfield':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                eventCode = 134;


                                if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                    // scoredPlayer = (FW|WG)
                                    possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                    scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                    // assistantPlayer = CM
                                    if (playersOnPositions[event.user].CM.length) {
                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                    }
                                    // assistantPlayer = (CD|WB)
                                    else {
                                        let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                    }
                                }
                                else {
                                    // scoredPlayer = CM
                                    let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                    scoredPlayer = playersOnPositions[event.user].CM[idx];


                                    // assistantPlayer = (CD|WB)
                                    if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                        let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                    }
                                    // assistantPlayer = CM
                                    else {
                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                    }
                                }

                                changeRating(scoredPlayer, 0.8);
                                changeRating(assistantPlayer, 0.8);


                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }

                                event.result = `Goal! ${scoredPlayer.card.playerName} runs and ${assistantPlayer.card.playerName} provides an assist`;
                                event.players = [
                                    {
                                        playerId: scoredPlayer.card.playerId,
                                        playerName: scoredPlayer.card.playerName,
                                        position: scoredPlayer.position.name,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerId: assistantPlayer.card.playerId,
                                        playerName: assistantPlayer.card.playerName,
                                        position: assistantPlayer.position.name,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    }
                                ];
                            }
                            else {
                                eventCode = MathService.randomInteger(131, 136);

                                switch (eventCode) {
                                    case 131:
                                        if (playersOnPositions[event.user].FW.length) {
                                            scoredPlayer = playersOnPositions[event.user].FW[0];

                                            let avgTeamAsm = 0;
                                            for (let j = 0; j < scoredUser.players.length; j++) avgTeamAsm += scoredUser.players[j].asm;
                                            avgTeamAsm /= scoredUser.players.length;

                                            if (scoredPlayer.asm > avgTeamAsm) {
                                                if (playersOnPositions[event.user].WG.length) {
                                                    let scPlIdx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);

                                                    scoredPlayer = playersOnPositions[event.user].WG[scPlIdx];

                                                    if (playersOnPositions[event.user].WG.length >= 2) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [scPlIdx])];
                                                    else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                                }
                                                else if (playersOnPositions[event.user].CM.length) {
                                                    let scPlIdx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);

                                                    scoredPlayer = playersOnPositions[event.user].CM[scPlIdx];

                                                    if (playersOnPositions[event.user].CM.length >= 2) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [scPlIdx])];
                                                    else if (playersOnPositions[event.user].WB.length) assistantPlayer = playersOnPositions[event.user].WB[MathService.randomInteger(0, playersOnPositions[event.user].WB.length - 1)];
                                                }
                                            }
                                            else {
                                                if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                                else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                            }
                                        }
                                        else if (playersOnPositions[event.user].WG.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].WG[idx];

                                            if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        }
                                        else if (playersOnPositions[event.user].CM.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];

                                            if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        event.result = `${scoredPlayer.card.playerName} scores a header delivered by ${assistantPlayer.card.playerName}`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.card.playerId,
                                                playerName: assistantPlayer.card.playerName,
                                                position: assistantPlayer.position.name,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        break;

                                    case 132:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.4);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        event.result = `Spectacular powershot by ${scoredPlayer.card.playerName}`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 0.4,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 133:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        event.result = `${scoredPlayer.card.playerName} scores after solo breakthrough`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 134:
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            // scoredPlayer = (FW|WG)
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                            // assistantPlayer = CM
                                            if (playersOnPositions[event.user].CM.length) {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                            }
                                            // assistantPlayer = (CD|WB)
                                            else {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                        }
                                        else {
                                            // scoredPlayer = CM
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];


                                            // assistantPlayer = (CD|WB)
                                            if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                            // assistantPlayer = CM
                                            else {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        event.result = `Goal! ${scoredPlayer.card.playerName} runs and ${assistantPlayer.card.playerName} provides an assist`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.card.playerId,
                                                playerName: assistantPlayer.card.playerName,
                                                position: assistantPlayer.position.name,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 135:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        event.result = `Goal! ${scoredPlayer.card.playerName} used opponent’s silly mistake`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 136:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        event.result = `Goal! Brilliant team-play finished by ${scoredPlayer.card.playerName}`;
                                        event.players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position.name,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.5,
                                            }
                                        ];
                                        break;
                                }
                            }
                            break;

                        case 'stepUp':
                            eventCode = MathService.randomInteger(131, 136);

                            switch (eventCode) {
                                case 131:
                                    if (playersOnPositions[event.user].FW.length) {
                                        scoredPlayer = playersOnPositions[event.user].FW[0];

                                        let avgTeamAsm = 0;
                                        for (let j = 0; j < scoredUser.players.length; j++) avgTeamAsm += scoredUser.players[j].asm;
                                        avgTeamAsm /= scoredUser.players.length;

                                        if (scoredPlayer.asm > avgTeamAsm) {
                                            if (playersOnPositions[event.user].WG.length) {
                                                let scPlIdx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);

                                                scoredPlayer = playersOnPositions[event.user].WG[scPlIdx];

                                                if (playersOnPositions[event.user].WG.length >= 2) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [scPlIdx])];
                                                else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                            }
                                            else if (playersOnPositions[event.user].CM.length) {
                                                let scPlIdx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);

                                                scoredPlayer = playersOnPositions[event.user].CM[scPlIdx];

                                                if (playersOnPositions[event.user].CM.length >= 2) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [scPlIdx])];
                                                else if (playersOnPositions[event.user].WB.length) assistantPlayer = playersOnPositions[event.user].WB[MathService.randomInteger(0, playersOnPositions[event.user].WB.length - 1)];
                                            }
                                        }
                                        else {
                                            if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                        }
                                    }
                                    else if (playersOnPositions[event.user].WG.length) {
                                        let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                        scoredPlayer = playersOnPositions[event.user].WG[idx];

                                        if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                        else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                    }
                                    else if (playersOnPositions[event.user].CM.length) {
                                        let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                        scoredPlayer = playersOnPositions[event.user].CM[idx];

                                        if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                        else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                            let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                        }
                                    }

                                    changeRating(scoredPlayer, 0.8);
                                    changeRating(assistantPlayer, 0.8);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    event.result = `${scoredPlayer.card.playerName} scores a header delivered by ${assistantPlayer.card.playerName}`;
                                    event.players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position.name,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerId: assistantPlayer.card.playerId,
                                            playerName: assistantPlayer.card.playerName,
                                            position: assistantPlayer.position.name,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        },
                                    ];
                                    break;

                                case 132:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 0.4);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    event.result = `Spectacular powershot by ${scoredPlayer.card.playerName}`;
                                    event.players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position.name,
                                            role: 'player',
                                            ratingDiff: 0.4,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 133:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 1);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    event.result = `${scoredPlayer.card.playerName} scores after solo breakthrough`;
                                    event.players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position.name,
                                            role: 'player',
                                            ratingDiff: 1,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 134:
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        // scoredPlayer = (FW|WG)
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                        // assistantPlayer = CM
                                        if (playersOnPositions[event.user].CM.length) {
                                            assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                        }
                                        // assistantPlayer = (CD|WB)
                                        else {
                                            let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                        }
                                    }
                                    else {
                                        // scoredPlayer = CM
                                        let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                        scoredPlayer = playersOnPositions[event.user].CM[idx];


                                        // assistantPlayer = (CD|WB)
                                        if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                            let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                        }
                                        // assistantPlayer = CM
                                        else {
                                            assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                        }
                                    }

                                    changeRating(scoredPlayer, 0.8);
                                    changeRating(assistantPlayer, 0.8);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    event.result = `Goal! ${scoredPlayer.card.playerName} runs and ${assistantPlayer.card.playerName} provides an assist`;
                                    event.players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position.name,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerId: assistantPlayer.card.playerId,
                                            playerName: assistantPlayer.card.playerName,
                                            position: assistantPlayer.position.name,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 135:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 1);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    event.result = `Goal! ${scoredPlayer.card.playerName} used opponent’s silly mistake`;
                                    event.players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position.name,
                                            role: 'player',
                                            ratingDiff: 1,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 136:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 0.8);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                    }

                                    event.result = `Goal! Brilliant team-play finished by ${scoredPlayer.card.playerName}`;
                                    event.players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position.name,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.5,
                                        }
                                    ];
                                    break;
                            }
                            break;
                    }


                    //поиск виноватого игрока ================================================
                    let value = Math.random(),
                        anotherUserIdx = (event.user + 1) % 2,
                        guiltPlayer;

                    if (value <= 0.15) guiltPlayer = playersOnPositions[anotherUserIdx].GK[0];
                    else if (value <= 0.30) {
                        let possibleGuiltPlayers = [...playersOnPositions[anotherUserIdx].FW, ...playersOnPositions[anotherUserIdx].WG];
                        guiltPlayer = possibleGuiltPlayers[MathService.randomInteger(0, possibleGuiltPlayers.length - 1)];
                    }
                    else if (value <= 0.60) guiltPlayer = playersOnPositions[anotherUserIdx].CM[MathService.randomInteger(0, playersOnPositions[anotherUserIdx].CM.length - 1)];
                    else {
                        let possibleGuiltPlayers = [...playersOnPositions[anotherUserIdx].CD, ...playersOnPositions[anotherUserIdx].WB];
                        guiltPlayer = possibleGuiltPlayers[MathService.randomInteger(0, possibleGuiltPlayers.length - 1)];
                    }

                    changeRating(guiltPlayer, -0.2);

                    event.players.push({
                        playerId: guiltPlayer.card.playerId,
                        playerName: guiltPlayer.card.playerName,
                        position: guiltPlayer.position.name,
                        role: 'guilt',
                        ratingDiff: -0.2,
                    });
                    //поиск виноватого игрока ================================================

                    // -0.2 пропустившим гол игрокам
                    for (let playerIndex = 0; playerIndex < anotherUser.players.length; playerIndex++) changeRating(anotherUser.players[playerIndex], -0.2);
                    event.players.push({
                        playerName: 'Another team players',
                        position: 'Another team positions',
                        role: 'none',
                        ratingDiff: -0.2,
                    });
                }
                else {
                    eventCode = 130;

                    let anotherUser = event.user === 0 ? user2 : user1;

                    actedPlayer = anotherUser.players[anotherUser.players.length - 1];
                    changeRating(actedPlayer, 0.4);

                    event.result = `Shot on target`;
                    event.players = [
                        {
                            playerId: actedPlayer.card.playerId,
                            playerName: actedPlayer.card.playerName,
                            position: actedPlayer.position.name,
                            ratingDiff: 0.4,
                        }
                    ];
                }
                break;
        }

        event.code = eventCode;
        event.score = goals[0] + '-' + goals[1];
    }
    // получение ивентов в матче ===============================================================================


    // рассчёт рейтинга игроков за сезон (среднее арифм)===========================
    for (let playerIndex = 0; playerIndex < user1.players.length; playerIndex++) {
        let sumOfMarks = 0;

        for (let marksIndex = 0; marksIndex < user1.players[playerIndex].card.seasonRatingMarks.length; marksIndex++) {
            sumOfMarks += user1.players[playerIndex].card.seasonRatingMarks[marksIndex];
        }

        user1.players[playerIndex].card.averageRating = Number((sumOfMarks / user1.players[playerIndex].card.seasonRatingMarks.length).toFixed(2));
    }

    for (let playerIndex = 0; playerIndex < kickedPlayers[0].length; playerIndex++) {
        let sumOfMarks = 0;

        for (let marksIndex = 0; marksIndex < kickedPlayers[0][playerIndex].card.seasonRatingMarks.length; marksIndex++) {
            sumOfMarks += kickedPlayers[0][playerIndex].card.seasonRatingMarks[marksIndex];
        }

        kickedPlayers[0][playerIndex].card.averageRating = Number((sumOfMarks / kickedPlayers[0][playerIndex].card.seasonRatingMarks.length).toFixed(2));
    }


    for (let playerIndex = 0; playerIndex < user2.players.length; playerIndex++) {
        let sumOfMarks = 0;

        for (let marksIndex = 0; marksIndex < user2.players[playerIndex].card.seasonRatingMarks.length; marksIndex++) {
            sumOfMarks += user2.players[playerIndex].card.seasonRatingMarks[marksIndex];
        }

        user2.players[playerIndex].card.averageRating = Number((sumOfMarks / user2.players[playerIndex].card.seasonRatingMarks.length).toFixed(2));
    }

    for (let playerIndex = 0; playerIndex < kickedPlayers[1].length; playerIndex++) {
        let sumOfMarks = 0;

        for (let marksIndex = 0; marksIndex < kickedPlayers[1][playerIndex].card.seasonRatingMarks.length; marksIndex++) {
            sumOfMarks += kickedPlayers[1][playerIndex].card.seasonRatingMarks[marksIndex];
        }

        kickedPlayers[1][playerIndex].card.averageRating = Number((sumOfMarks / kickedPlayers[1][playerIndex].card.seasonRatingMarks.length).toFixed(2));
    }
    // рассчёт рейтинга игроков за сезон (среднее арифм)===========================


    // изменение статуса unavailable для всех игроков юзеров===========================
    for (let plIdx = 0; plIdx < user1.resultAllPlayers.length; plIdx++) {
        let currPlayer = user1.resultAllPlayers[plIdx];
        if (currPlayer.unavailableMatchesCount > 0) currPlayer.unavailableMatchesCount--;
    }

    for (let plIdx = 0; plIdx < user2.resultAllPlayers.length; plIdx++) {
        let currPlayer = user2.resultAllPlayers[plIdx];
        if (currPlayer.unavailableMatchesCount > 0) currPlayer.unavailableMatchesCount--;
    }
    // изменение статуса unavailable для всех игроков юзеров===========================


    user1.players = user1.players.concat(kickedPlayers[0]);
    user2.players = user2.players.concat(kickedPlayers[1]);

    let resultLogs = {
        user1: {
            id: user1.id,
            players: user1.players.map(player => {
                return {
                    playerId: player.card.playerId,
                    playerName: player.card.playerName,
                    head: player.card.head,
                    body: player.card.body,
                    clothing: player.card.clothing,
                    hair: player.card.hair,
                };
            })
        },
        user2: {
            id: user2.id,
            players: user2.players.map(player => {
                return {
                    playerId: player.card.playerId,
                    playerName: player.card.playerName,
                    head: player.card.head,
                    body: player.card.body,
                    clothing: player.card.clothing,
                    hair: player.card.hair,
                };
            })
        },
        matchEvents: matchLogs
    };


    //debug===========================================================================
    debugLogs.logs = resultLogs; //d
    debugLogs.score = goals[0] + '-' + goals[1]; //d
    debugLogs.user1.totalEvents = eventsArrs[0].join(' '); //d
    debugLogs.user2.totalEvents = eventsArrs[1].join(' '); //d


    function getLogsText_debug(user1, user2, debugLogs, matchLogs) {
        let logsText = '';

        logsText += 'Звёзды игроков:\n=============================\n';

        logsText += 'Игрок 1:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${debugLogs.user1.playersAsm[i].playerName}: ${debugLogs.user1.playersAsm[i].asmSum}\n`;
        }
        logsText += '=================\n';

        logsText += 'Игрок 2:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${debugLogs.user2.playersAsm[i].playerName}: ${debugLogs.user2.playersAsm[i].asmSum}\n`;
        }
        logsText += '=================\n';


        logsText += '\n\nРейтинг карточек перед матчем:\n=============================\n';

        logsText += 'Игрок 1:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${user1.players[i].card.playerName}: 6.6\n`;
        }
        logsText += '=================\n';

        logsText += 'Игрок 2:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${user2.players[i].card.playerName}: 6.6\n`;
        }
        logsText += '=================\n';


        logsText += '\n\nЛоги матча:\n=============================\n';
        for (let i = 1; i < matchLogs.length; i++) {
            let playersRatingString = '';

            for (let j = 0; j < matchLogs[i].players.length; j++) {
                playersRatingString += `${matchLogs[i].players[j].playerName} (${matchLogs[i].players[j].ratingDiff}), `;
            }

            playersRatingString = playersRatingString.substring(0, playersRatingString.length - 2);

            logsText += `${matchLogs[i].minute} минута, игрок ${matchLogs[i].user + 1}, событие ${matchLogs[i].momentType}.\nРезультат: ${matchLogs[i].result}.\nИзменение рейтинга: ${playersRatingString}.\n====================================\n`;
        }


        logsText += `\n\nСчёт: ${goals[0]}-${goals[1]}\n`;


        let yellowCards = [[], []], violations = [[], []], offendingPlayerIds = [[], []];
        for (let i = 1; i < matchLogs.length; i++) {
            let event = matchLogs[i];
            if (event.momentType === 11 && event.result.endsWith('card')) {
                let actedPlayer = event.players[0],
                    injuredPlayer = event.players[1],
                    cardType = 'Yellow';

                if (offendingPlayerIds[event.user].includes(actedPlayer.playerId)) cardType = 'Red';
                else offendingPlayerIds[event.user].push(actedPlayer.playerId);

                violations[event.user].push({
                    cardType,
                    actedPlayer,
                    injuredPlayer,
                });
                yellowCards[event.user].push({
                    actedPlayer,
                    injuredPlayer,
                });
            }
        }

        logsText += `\n\nНарушения:\n\n`;

        logsText += `Игрок 1:\n===============\n`;
        for (let i = 0; i < violations[0].length; i++) {
            logsText += `(${violations[0][i].cardType} card) Injured: ${yellowCards[0][i].injuredPlayer.playerName}, Acted: ${yellowCards[0][i].actedPlayer.playerName}`;

            if (violations[0][i].cardType === 'Red') logsText += ' (kicked)';

            logsText += '\n';
        }
        logsText += `===============\n`;

        logsText += `\nИгрок 2:\n===============\n`;
        for (let i = 0; i < violations[1].length; i++) {
            logsText += `(${violations[1][i].cardType} card) Injured: ${yellowCards[1][i].injuredPlayer.playerName}, Acted: ${yellowCards[1][i].actedPlayer.playerName}`;

            if (violations[1][i].cardType === 'Red') logsText += ' (kicked)';

            logsText += '\n';
        }
        logsText += `===============\n`;


        logsText += '\n\nРейтинг карточек после матча:\n=============================\n';

        logsText += 'Игрок 1:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${user1.players[i].card.playerName}: ${user1.players[i].card.seasonRatingMarks[user1.players[i].card.seasonRatingMarks.length - 1]}\n`;
        }
        logsText += '=================\n';

        logsText += 'Игрок 2:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${user2.players[i].card.playerName}: ${user2.players[i].card.seasonRatingMarks[user2.players[i].card.seasonRatingMarks.length - 1]}\n`;
        }
        logsText += '=================\n';

        return logsText;
    }

    debugLogs.logsText = getLogsText_debug(user1, user2, debugLogs, matchLogs);
    //debug===========================================================================

    if (saveToDB) {
        let
            user1UpdateLastTeamQuery = prisma.user.update({
                where: {
                    id: user1.id,
                },
                data: {
                    lastTeam: JSON.stringify(user1.resultLastTeam)
                }
            }),
            user1UpdateAllPlayersQuery = prisma.user_players.update({
                where: {
                    userId: user1.id,
                },
                data: {
                    playersJson: JSON.stringify(user1.resultAllPlayers)
                }
            }),
            user2UpdateLastTeamQuery = prisma.user.update({
                where: {
                    id: user2.id,
                },
                data: {
                    lastTeam: JSON.stringify(user2.resultLastTeam)
                }
            }),
            user2UpdateAllPlayersQuery = prisma.user_players.update({
                where: {
                    userId: user2.id,
                },
                data: {
                    playersJson: JSON.stringify(user2.resultAllPlayers)
                }
            }),
            matchUpdateQuery = prisma.match.update({
                where: {
                    id: match.id
                },
                data: {
                    logs: JSON.stringify(resultLogs),
                    score: goals[0] + ':' + goals[1],
                }
            });

        await prisma.$transaction([user1UpdateLastTeamQuery, user1UpdateAllPlayersQuery, user2UpdateLastTeamQuery, user2UpdateAllPlayersQuery, matchUpdateQuery]);
    }

    return debugLogs;
}

async function playMatchManyTimes_v_17otr_v1(matchId, count, saveToDb) {
    let debugLogs = []; //d

    let overall = {
        winFirst: 0,
        winSecond: 0,
        draw: 0,
        allGoalsCount: 0,
        '0:0 count': 0
    };

    for (let i = 0; i < count; i++) {
        debugLogs.push((await playDebugMatch_v_17otr_v1(matchId, saveToDb)));

        let goals = debugLogs[i].score.split('-').map(item => {
            return +item;
        });


        if (goals[0] > goals[1]) overall.winFirst++;
        else if (goals[0] < goals[1]) overall.winSecond++;
        else overall.draw++;

        overall.allGoalsCount += goals[0] + goals[1];

        if (goals[0] === 0 && goals[1] === 0) overall['0:0 count']++;
    }

    debugLogs.push(overall);

    return debugLogs;
}


async function playDebugMatch_vc(matchId, saveToDB) {
    function findInjured_111(eventedUser, playersWithSkills, injuredPlayers) {
        let STAmPlayersCount = playersWithSkills.STAm.length,
            STAzPlayersCount = playersWithSkills.STAz.length,
            possibleInjuredPlayers = [],
            injuredPlayer;

        if (STAmPlayersCount) {
            for (let j = 0; j < playersWithSkills.STAm.length; j++) {
                let currPlayer = playersWithSkills.STAm[j];
                if (!injuredPlayers.includes(currPlayer.card.playerId)) possibleInjuredPlayers.push(currPlayer);
            }
        }

        if (!possibleInjuredPlayers.length && STAzPlayersCount) {
            for (let j = 0; j < playersWithSkills.STAz.length; j++) {
                let currPlayer = playersWithSkills.STAz[j];
                if (!injuredPlayers.includes(currPlayer.card.playerId)) possibleInjuredPlayers.push(currPlayer);
            }
        }

        if (!possibleInjuredPlayers.length) {
            for (let j = 0; j < 5; j++) {
                let currPlayer = eventedUser.players[j];
                if (!injuredPlayers.includes(currPlayer.card.playerId)) possibleInjuredPlayers.push(currPlayer);
            }

            if (!possibleInjuredPlayers.length) {
                for (let j = 0; j < 5; j++) possibleInjuredPlayers.push(eventedUser.players[j]);
            }
        }

        injuredPlayer = possibleInjuredPlayers[MathService.randomInteger(0, possibleInjuredPlayers.length - 1)];

        return injuredPlayer;
    }

    function findActed_111(anotherUser) {
        let actedPlayer = anotherUser.players[MathService.randomInteger(0, anotherUser.players.length - 2)];

        return actedPlayer;
    }


    const match = await prisma.match.findFirst({
        select: {
            id: true,
            player1: {
                select: {
                    id: true,
                    avatar: true,
                    lastTactic: true,
                    lastTeam: true,
                    players: {
                        select: {
                            playersJson: true
                        }
                    },
                },
            },
            player2: {
                select: {
                    id: true,
                    avatar: true,
                    lastTactic: true,
                    lastTeam: true,
                    players: {
                        select: {
                            playersJson: true
                        }
                    },
                }
            },
        },
        where: {
            id: matchId
        },
    });

    let
        matchLogs = [],
        user1 = {
            id: match.player1.id,
            avatar: match.player1.avatar,
            tactic: JSON.parse(match.player1.lastTactic),
            players: [],
            resultLastTeam: JSON.parse(match.player1.lastTeam),
            resultAllPlayers: JSON.parse(match.player1.players.playersJson),
        },
        user2 = {
            id: match.player2.id,
            avatar: match.player2.avatar,
            tactic: JSON.parse(match.player2.lastTactic),
            players: [],
            resultLastTeam: JSON.parse(match.player2.lastTeam),
            resultAllPlayers: JSON.parse(match.player2.players.playersJson),
        },
        playersOnPositions = [
            {
                'FW': [],
                'WG': [],
                'CM': [],
                'WB': [],
                'CD': [],
                'GK': [],
            },
            {
                'FW': [],
                'WG': [],
                'CM': [],
                'WB': [],
                'CD': [],
                'GK': [],
            }
        ],
        playersWithSkills = [
            {
                AGIp: [],
                TCKLp: [],
                PASp: [],
                STAz: [],
                STAm: [],
                AGIm: [],
            },
            {
                AGIp: [],
                TCKLp: [],
                PASp: [],
                STAz: [],
                STAm: [],
                AGIm: [],
            },
        ],
        T = [0, 0],
        goals = [0, 0],
        eventsArrs = [[], []], //d
        debugLogs = {
            matchId: match.id,
            score: null,
            user1: {
                id: user1.id,
                players: user1.players,
                playersAsm: [],
                homeBonus: 3,
                avatarBonus: 0,
                T: 0,
            },
            user2: {
                id: user2.id,
                players: user2.players,
                playersAsm: [],
                homeBonus: 0,
                avatarBonus: 0,
                T: 0,
            },
        }; //d


    // заполнение массивов players ссылками на этих же игроков из resultAllPlayers =====================================
    function sortPlayersById_1(a, b) {
        if (a.playerId < b.playerId) return -1;
        if (a.playerId > b.playerId) return 1;
        return 0;
    }

    user1.resultLastTeam.sort(sortPlayersById_1);
    user2.resultLastTeam.sort(sortPlayersById_1);
    user1.resultAllPlayers.sort(sortPlayersById_1);
    user2.resultAllPlayers.sort(sortPlayersById_1);

    let rapPlIdx = 0;
    for (let ltPlIdx = 0; ltPlIdx < user1.resultLastTeam.length; ltPlIdx++) {
        while (user1.resultAllPlayers[rapPlIdx].playerId !== user1.resultLastTeam[ltPlIdx].playerId) rapPlIdx++;

        user1.resultAllPlayers[rapPlIdx].seasonRatingMarks.push(6.6); //начальная оценка за матч

        user1.players.push({
            card: user1.resultAllPlayers[rapPlIdx],
            position: user1.resultLastTeam[ltPlIdx].position,
        });
    }

    rapPlIdx = 0;
    for (let ltPlIdx = 0; ltPlIdx < user2.resultLastTeam.length; ltPlIdx++) {
        while (user2.resultAllPlayers[rapPlIdx].playerId !== user2.resultLastTeam[ltPlIdx].playerId) rapPlIdx++;

        user2.resultAllPlayers[rapPlIdx].seasonRatingMarks.push(6.6); //начальная оценка за матч

        user2.players.push({
            card: user2.resultAllPlayers[rapPlIdx],
            position: user2.resultLastTeam[ltPlIdx].position,
        });
    }


    // сортировка игроков по возрастанию рейтинга (GK всегда последние)
    function sortPlayersByAverageRating(a, b) {
        if (a.card.isGoalKeeper) return 1;
        if (b.card.isGoalKeeper) return -1;

        if (a.card.averageRating < b.card.averageRating) return -1;
        if (a.card.averageRating > b.card.averageRating) return 1;

        return 0;
    }

    user1.players.sort(sortPlayersByAverageRating);
    user2.players.sort(sortPlayersByAverageRating);
    // заполнение массивов players ссылками на этих же игроков из resultAllPlayers =====================================


    user1.players.forEach((player) => {
        //распределение в массивах игроков на позициях
        playersOnPositions[0][player.position].push(player);

        let technicalSkills = {},
            physicalSkills = {};

        for (let skill in player.card.physicalSkills) physicalSkills[skill] = player.card.physicalSkills[skill];
        for (let skill in player.card.technicalSkills) technicalSkills[skill] = player.card.technicalSkills[skill];

        switch (player.position) {
            case 'FW':
                technicalSkills.shoot *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.agility *= 3;
                physicalSkills.jump *= 3;
                break;

            case 'WG':
                technicalSkills.cross *= 3;
                technicalSkills.shoot *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.agility *= 3;
                break;

            case 'CM':
                technicalSkills.pass *= 3;
                physicalSkills.agility *= 3;
                physicalSkills.strength *= 3;
                break;

            case 'CD':
                technicalSkills.tackling *= 3;
                physicalSkills.strength *= 3;
                physicalSkills.jump *= 3;
                break;

            case 'WB':
                technicalSkills.cross *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.jump *= 3;
                break;
        }

        if (player.card.physicalSkills.agility > 0) playersWithSkills[0].AGIp.push(player);
        else if (player.card.physicalSkills.agility < 0) playersWithSkills[0].AGIm.push(player);

        if (player.card.technicalSkills.tackling > 0) playersWithSkills[0].TCKLp.push(player);

        if (player.card.technicalSkills.pass > 0) playersWithSkills[0].PASp.push(player);

        if (player.card.physicalSkills.stamina < 0) playersWithSkills[0].STAm.push(player);
        else if (player.card.physicalSkills.stamina === 0) playersWithSkills[0].STAz.push(player);


        //получение asm игрока
        let phy = 0, te = 0, asm;

        for (let skill in physicalSkills) {
            phy += player.card.physicalSkills[skill];
        }
        for (let skill in technicalSkills) {
            te += player.card.technicalSkills[skill];
        }

        phy = Math.min(Math.max(1, phy), 5);
        te = Math.min(Math.max(1, te), 5);

        asm = (phy + te) + player.card.mood;
        asm = Math.min(Math.max(1, asm), 10);

        if (asm % 1 !== 0) asm += 0.5 * (player.card.mood < 0 ? -1 : 1);

        T[0] += asm;

        debugLogs.user1.playersAsm.push({
            playerId: player.card.playerId,
            playerName: player.card.playerName,
            asm,
        }); //d
    });
    user2.players.forEach((player) => {
        //распределение в массивах игроков на позициях
        playersOnPositions[1][player.position].push(player);


        let technicalSkills = {},
            physicalSkills = {};

        for (let skill in player.card.physicalSkills) physicalSkills[skill] = player.card.physicalSkills[skill];
        for (let skill in player.card.technicalSkills) technicalSkills[skill] = player.card.technicalSkills[skill];

        switch (player.position) {
            case 'FW':
                technicalSkills.shoot *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.agility *= 3;
                physicalSkills.jump *= 3;
                break;

            case 'WG':
                technicalSkills.cross *= 3;
                technicalSkills.shoot *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.agility *= 3;
                break;

            case 'CM':
                technicalSkills.pass *= 3;
                physicalSkills.agility *= 3;
                physicalSkills.strength *= 3;
                break;

            case 'CD':
                technicalSkills.tackling *= 3;
                physicalSkills.strength *= 3;
                physicalSkills.jump *= 3;
                break;

            case 'WB':
                technicalSkills.cross *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.jump *= 3;
                break;
        }


        if (player.card.physicalSkills.agility > 0) playersWithSkills[1].AGIp.push(player);
        else if (player.card.physicalSkills.agility < 0) playersWithSkills[1].AGIm.push(player);

        if (player.card.technicalSkills.tackling > 0) playersWithSkills[1].TCKLp.push(player);

        if (player.card.technicalSkills.pass > 0) playersWithSkills[1].PASp.push(player);

        if (player.card.physicalSkills.stamina < 0) playersWithSkills[1].STAm.push(player);
        else if (player.card.physicalSkills.stamina === 0) playersWithSkills[1].STAz.push(player);


        //получение asm игрока
        let phy = 0, te = 0, asm;

        for (let skill in physicalSkills) {
            phy += player.card.physicalSkills[skill];
        }
        for (let skill in technicalSkills) {
            te += player.card.technicalSkills[skill];
        }

        phy = Math.min(Math.max(1, phy), 5);
        te = Math.min(Math.max(1, te), 5);

        asm = (phy + te) + player.card.mood;
        asm = Math.min(Math.max(1, asm), 10);

        if (asm % 1 !== 0) asm += 0.5 * (player.card.mood < 0 ? -1 : 1);

        T[1] += asm;

        debugLogs.user2.playersAsm.push({
            playerId: player.card.playerId,
            playerName: player.card.playerName,
            asm,
        }); //d
    });


    T[0] += 3; //доп очки за домашнюю тиму
    if (user1.avatar !== user2.avatar) {
        if (avatarDefying[user1.avatar].includes(user2.avatar)) {
            T[0] += 3;

            debugLogs.user1.avatarBonus = 3;//debug
        }
        else if (avatarDefying[user2.avatar].includes(user1.avatar)) {
            T[1] += 3;

            debugLogs.user2.avatarBonus = 3;//debug
        }
    } // доп очки за контр тренеров

    debugLogs.user1.T = T[0]; //d
    debugLogs.user2.T = T[1]; //d


    let advantage = Math.abs(T[0] - T[1]),
        momentsCount1 = {
            firstTime: [0, 0],
            secondTime: [0, 0]
        };

    if (advantage <= 7) {
        momentsCount1.firstTime = [8, 8];
        momentsCount1.secondTime = [8, 8];
    }
    else if (advantage <= 12) {
        if (T[0] > T[1]) {
            momentsCount1.firstTime = [9, 7];
            momentsCount1.secondTime = [8, 8];
        }
        else {
            momentsCount1.firstTime = [7, 9];
            momentsCount1.secondTime = [8, 8];
        }
    }
    else if (advantage <= 19) {
        if (T[0] > T[1]) {
            momentsCount1.firstTime = [9, 7];
            momentsCount1.secondTime = [9, 7];
        }
        else {
            momentsCount1.firstTime = [7, 9];
            momentsCount1.secondTime = [7, 9];
        }
    }
    else if (advantage <= 30) {
        if (T[0] > T[1]) {
            momentsCount1.firstTime = [10, 6];
            momentsCount1.secondTime = [9, 7];
        }
        else {
            momentsCount1.firstTime = [6, 10];
            momentsCount1.secondTime = [7, 9];
        }
    }
    else {
        if (T[0] > T[1]) {
            momentsCount1.firstTime = [10, 6];
            momentsCount1.secondTime = [10, 6];
        }
        else {
            momentsCount1.firstTime = [6, 10];
            momentsCount1.secondTime = [6, 10];
        }
    }


    // + adv if <= 8, - adv if >= 9
    // 16 otr


    debugLogs.user1.T_adv = T[0]; //d
    debugLogs.user2.T_adv = T[1]; //d


    function changeRating(player, ratingDiff) {
        player.card.seasonRatingMarks[player.card.seasonRatingMarks.length - 1] = Number((player.card.seasonRatingMarks[player.card.seasonRatingMarks.length - 1] + ratingDiff).toFixed(2));
    }

    let xG = [0, 0], xG1 = [0, 0], xG2 = [0, 0], lastPotGoalMinute = null;


    matchLogs.push({
        minute: 0,
        user: null,
        momentType: null,
        result: 'Match started!'
    });


    //первый тайм ===================================================================
    for (let i = 3; i <= 48; i += 3) {
        let player = MathService.randomFloat(0, T[0] + T[1]) <= T[0] ? 0 : 1,
            randNum = MathService.randomInteger(1, 10),
            momentType = randNum >= 1 && randNum <= 2 ? 13 : randNum >= 3 && randNum <= 6 ? 12 : 11,
            momentWeight = 0.5 * (momentType - 9);

        if (momentsCount1.firstTime[player] === 0) player = (player + 1) % 2;
        momentsCount1.firstTime[player]--;


        T[player] += momentWeight; // чтобы получить вес 1/1.5/2 (11 -9. 12 - 9, 13 - 9)
        xG[player] += momentWeight;
        xG1[player] += momentWeight;

        eventsArrs[player].push(momentType); //d

        if (i === 48) {
            matchLogs.push({
                minute: `45'add`,
                user: player,
                momentType,
                result: ''
            });
            break;
        }
        matchLogs.push({
            minute: i,
            user: player,
            momentType,
            result: ''
        });
    }

    xG[0] /= 10;
    xG[1] /= 10;
    xG1[0] /= 10;
    xG1[1] /= 10;
    //первый тайм ===================================================================


    eventsArrs[0].push("==="); //d
    eventsArrs[1].push("==="); //d


    //второй тайм ===================================================================
    for (let i = 48; i <= 93; i += 3) {
        let player = MathService.randomFloat(0, T[0] + T[1]) <= T[0] ? 0 : 1,
            randNum = MathService.randomInteger(1, 10),
            momentType = randNum >= 1 && randNum <= 2 ? 13 : randNum >= 3 && randNum <= 6 ? 12 : 11,
            momentWeight = 0.5 * (momentType - 9);

        if (momentsCount1.secondTime[player] === 0) player = (player + 1) % 2;
        momentsCount1.secondTime[player]--;


        T[player] += momentWeight; // чтобы получить вес 1/1.5/2 (11 -9. 12 - 9, 13 - 9)
        xG[player] += momentWeight;
        xG2[player] += momentWeight;


        eventsArrs[player].push(momentType); //d


        if (i === 93) {
            matchLogs.push({
                minute: `90'add`,
                user: player,
                momentType,
                result: ''
            });
            break;
        }
        matchLogs.push({
            minute: i,
            user: player,
            momentType,
            result: ''
        });
    }

    xG[0] /= 10;
    xG[1] /= 10;
    xG2[0] /= 10;
    xG2[1] /= 10;
    //второй тайм ===================================================================


    for (let i = matchLogs.length - 1; i > 0; i--) {
        if (matchLogs[i].momentType === 13) {
            lastPotGoalMinute = matchLogs[i].minute;
            break;
        }
    }

    let playersWithYellowCards = [[], []], injuredPlayers = [[], []], kickedPlayers = [[], []];

    xG[0] = xG1[0];
    xG[1] = xG1[1];

    for (let i = 0; i < matchLogs.length - 1; i++) {
        // добавляем xG первого тайма
        if (i === 16) {
            xG[0] += xG2[0];
            xG[1] += xG2[1];
        }


        let event = matchLogs[i + 1];

        let eventCode,
            eventedUser, scoredUser, anotherUser,
            AGIpPlayersCount, TCKLpPlayersCount, PASpPlayersCount, AGImPlayersCount, // для удобства
            actedPlayer, possibleActedPlayers, injuredPlayer;

        switch (event.momentType) {
            case 11:
                eventedUser = event.user === 0 ? user1 : user2;
                anotherUser = event.user === 0 ? user2 : user1;

                eventCode = MathService.randomInteger(111, 115);

                switch (eventCode) {
                    case 111:
                        injuredPlayer = findInjured_111(eventedUser, playersWithSkills[event.user], injuredPlayers[event.user]);
                        injuredPlayers[event.user].push(injuredPlayer.card.playerId);
                        changeRating(injuredPlayer, -0.2);

                        actedPlayer = findActed_111(anotherUser);
                        actedPlayer.card.seasonYellowCardsCount++;
                        playersWithYellowCards[(event.user + 1) % 2].push(actedPlayer.card.playerId);
                        changeRating(actedPlayer, -0.4);

                        if (playersWithYellowCards[(event.user + 1) % 2].includes(actedPlayer.card.playerId)) {
                            kickedPlayers[(event.user + 1) % 2].push(actedPlayer);
                            actedPlayer.card.unavailableMatchesCount = 4;

                            // удаление из массива игроков
                            for (let plIdx = 0; plIdx < anotherUser.players.length; plIdx++) {
                                if (anotherUser.players[plIdx].card.playerId === actedPlayer.card.playerId) {
                                    anotherUser.players.splice(plIdx, 1);
                                    break;
                                }
                            }

                            // удаление из игроков на позициях
                            for (let plIdx = 0; plIdx < playersOnPositions[(event.user + 1) % 2][actedPlayer.position].length; plIdx++) {
                                if (playersOnPositions[(event.user + 1) % 2][actedPlayer.position][plIdx].card.playerId === actedPlayer.card.playerId) {
                                    playersOnPositions[(event.user + 1) % 2][actedPlayer.position].splice(plIdx, 1);
                                    break;
                                }
                            }

                            // удаление из игроков по скиллах ===========================================================================
                            if (actedPlayer.card.physicalSkills.agility > 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].AGIp.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].AGIp[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].AGIp.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }
                            else if (actedPlayer.card.physicalSkills.agility < 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].AGIm.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].AGIm[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].AGIm.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }

                            if (actedPlayer.card.physicalSkills.stamina === 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].STAz.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].STAz[plIdx].playerId === actedPlayer.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].STAz.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }
                            else if (actedPlayer.card.physicalSkills.stamina < 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].STAm.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].STAm[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].STAm.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }

                            if (actedPlayer.card.technicalSkills.tackling > 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].TCKLp.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].TCKLp[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].TCKLp.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }

                            if (actedPlayer.card.technicalSkills.pass > 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].PASp.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].PASp[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].PASp.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }
                            // удаление из игроков по скиллах ===========================================================================
                        }

                        if (actedPlayer.card.seasonYellowCardsCount === 8) {
                            //unavailable
                        }

                        matchLogs[i + 1].result = `${injuredPlayer.card.playerName} is injured - ${actedPlayer.card.playerName} will be punished by a yellow card`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: -0.4,
                            },
                            {
                                playerId: injuredPlayer.card.playerId,
                                playerName: injuredPlayer.card.playerName,
                                position: injuredPlayer.position,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;

                    case 112:
                        AGImPlayersCount = playersWithSkills[event.user].AGIm.length;

                        if (AGImPlayersCount) actedPlayer = playersWithSkills[event.user].AGIm[MathService.randomInteger(0, AGImPlayersCount - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].result = `Unlucky dribbling - ${actedPlayer.card.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;

                    case 113:
                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];

                        if (possibleActedPlayers.length) actedPlayer = possibleActedPlayers[MathService.randomInteger(0, possibleActedPlayers.length - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(0, eventedUser.players.length - 2)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].result = `Unlucky cross - ${actedPlayer.card.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;

                    case 114:
                        matchLogs[i + 1].result = `Slow passing in the midfield`;
                        matchLogs[i + 1].players = [];
                        break;

                    case 115:
                        actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].result = `${actedPlayer.card.playerName} made a mistake`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;
                }
                break;

            case 12:
                eventedUser = event.user === 0 ? user1 : user2;
                anotherUser = event.user === 0 ? user2 : user1;

                eventCode = MathService.randomInteger(121, 125);

                switch (eventCode) {
                    case 121:
                        actedPlayer = eventedUser.players[MathService.randomInteger(0, eventedUser.players.length - 2)];

                        matchLogs[i + 1].result = `Shot off target`;
                        matchLogs[i + 1].players = [{
                            playerId: actedPlayer.card.playerId,
                            playerName: actedPlayer.card.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0,
                        }];
                        break;

                    case 122:
                        AGIpPlayersCount = playersWithSkills[event.user].AGIp.length;

                        if (AGIpPlayersCount) actedPlayer = playersWithSkills[event.user].AGIp[MathService.randomInteger(0, AGIpPlayersCount - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(eventedUser.players.length - 6, eventedUser.players.length - 2)];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].result = `Successful dribbling by ${actedPlayer.card.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: 0.2,
                            }
                        ];
                        break;

                    case 123:
                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];
                        possibleActedPlayers.sort(function (a, b) {
                            if (a.card.averageRating < b.card.averageRating) return -1;
                            if (a.card.averageRating > b.card.averageRating) return 1;
                            return 0;
                        });

                        actedPlayer = possibleActedPlayers[possibleActedPlayers.length - 1];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].result = `Promising cross by ${actedPlayer.card.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: 0.2,
                            }
                        ];
                        break;

                    case 124:
                        TCKLpPlayersCount = playersWithSkills[event.user].TCKLp.length;

                        if (TCKLpPlayersCount) actedPlayer = playersWithSkills[event.user].TCKLp[MathService.randomInteger(0, TCKLpPlayersCount - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(eventedUser.players.length - 6, eventedUser.players.length - 2)];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].result = `Interception by ${actedPlayer.card.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: 0.2,
                            }
                        ];
                        break;

                    case 125:
                        PASpPlayersCount = playersWithSkills[event.user].PASp.length;

                        if (PASpPlayersCount) actedPlayer = playersWithSkills[event.user].PASp[MathService.randomInteger(0, PASpPlayersCount - 1)];
                        else {
                            playersOnPositions[event.user].CM.sort(function (a, b) {
                                if (a.card.averageRating < b.card.averageRating) return -1;
                                if (a.card.averageRating > b.card.averageRating) return 1;
                                return 0;
                            });
                            actedPlayer = playersOnPositions[event.user].CM[playersOnPositions[event.user].CM.length - 1];
                        }

                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].result = `Promising through pass by ${actedPlayer.card.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: 0.2,
                            }
                        ];
                        break;
                }
                break;

            case 13:
                let chanceNumbers = Math.floor(xG[event.user] / 0.25);

                if (event.minute === lastPotGoalMinute && goals[0] === goals[1]) chanceNumbers++;

                let goal = MathService.randomInteger(1, 10) <= chanceNumbers ? 1 : 0;

                if (goal) {
                    let scoredPlayer, assistantPlayer, possibleScoredPlayers;

                    scoredUser = event.user === 0 ? user1 : user2;
                    anotherUser = event.user === 0 ? user2 : user1;

                    goals[event.user]++;
                    xG[event.user] = Math.max(0, xG[event.user] - 1); //чтобы xG игрока не был меньше 0

                    switch (scoredUser.tactic.teamFocus) {
                        case 'wing-play':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                eventCode = 131;


                                if (playersOnPositions[event.user].FW.length) {
                                    scoredPlayer = playersOnPositions[event.user].FW[0];

                                    if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                    else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                }
                                else if (playersOnPositions[event.user].WG.length) {
                                    let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                    scoredPlayer = playersOnPositions[event.user].WG[idx];

                                    if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                    else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                }
                                else if (playersOnPositions[event.user].CM.length) {
                                    let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                    scoredPlayer = playersOnPositions[event.user].CM[idx];

                                    if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                    else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                        let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                    }
                                }

                                changeRating(scoredPlayer, 0.8);
                                changeRating(assistantPlayer, 0.8);


                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }

                                matchLogs[i + 1].result = `${scoredPlayer.card.playerName} scores a header delivered by ${assistantPlayer.card.playerName}`;
                                matchLogs[i + 1].players = [
                                    {
                                        playerId: scoredPlayer.card.playerId,
                                        playerName: scoredPlayer.card.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerId: assistantPlayer.card.playerId,
                                        playerName: assistantPlayer.card.playerName,
                                        position: assistantPlayer.position,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    },
                                ];
                            }
                            else {
                                eventCode = MathService.randomInteger(131, 136);

                                switch (eventCode) {
                                    case 131:
                                        if (playersOnPositions[event.user].FW.length) {
                                            scoredPlayer = playersOnPositions[event.user].FW[0];

                                            if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        }
                                        else if (playersOnPositions[event.user].WG.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].WG[idx];

                                            if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        }
                                        else if (playersOnPositions[event.user].CM.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];

                                            if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `${scoredPlayer.card.playerName} scores a header delivered by ${assistantPlayer.card.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.card.playerId,
                                                playerName: assistantPlayer.card.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        break;

                                    case 132:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.4);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.card.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.4,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 133:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `${scoredPlayer.card.playerName} scores after solo breakthrough`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 134:
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            // scoredPlayer = (FW|WG)
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                            // assistantPlayer = CM
                                            if (playersOnPositions[event.user].CM.length) {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                            }
                                            // assistantPlayer = (CD|WB)
                                            else {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                        }
                                        else {
                                            // scoredPlayer = CM
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];


                                            // assistantPlayer = (CD|WB)
                                            if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                            // assistantPlayer = CM
                                            else {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.card.playerName} runs and ${assistantPlayer.card.playerName} provides an assist`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.card.playerId,
                                                playerName: assistantPlayer.card.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 135:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.card.playerName} used opponent’s silly mistake`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 136:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.card.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.5,
                                            }
                                        ];
                                        break;
                                }
                            }
                            break;

                        case 'midfield':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                eventCode = 134;


                                if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                    // scoredPlayer = (FW|WG)
                                    possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                    scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                    // assistantPlayer = CM
                                    if (playersOnPositions[event.user].CM.length) {
                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                    }
                                    // assistantPlayer = (CD|WB)
                                    else {
                                        let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                    }
                                }
                                else {
                                    // scoredPlayer = CM
                                    let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                    scoredPlayer = playersOnPositions[event.user].CM[idx];


                                    // assistantPlayer = (CD|WB)
                                    if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                        let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                    }
                                    // assistantPlayer = CM
                                    else {
                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                    }
                                }

                                changeRating(scoredPlayer, 0.8);
                                changeRating(assistantPlayer, 0.8);


                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }

                                matchLogs[i + 1].result = `Goal! ${scoredPlayer.card.playerName} runs and ${assistantPlayer.card.playerName} provides an assist`;
                                matchLogs[i + 1].players = [
                                    {
                                        playerId: scoredPlayer.card.playerId,
                                        playerName: scoredPlayer.card.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerId: assistantPlayer.card.playerId,
                                        playerName: assistantPlayer.card.playerName,
                                        position: assistantPlayer.position,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    }
                                ];
                            }
                            else {
                                eventCode = MathService.randomInteger(131, 136);

                                switch (eventCode) {
                                    case 131:
                                        if (playersOnPositions[event.user].FW.length) {
                                            scoredPlayer = playersOnPositions[event.user].FW[0];

                                            if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        }
                                        else if (playersOnPositions[event.user].WG.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].WG[idx];

                                            if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        }
                                        else if (playersOnPositions[event.user].CM.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];

                                            if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `${scoredPlayer.card.playerName} scores a header delivered by ${assistantPlayer.card.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.card.playerId,
                                                playerName: assistantPlayer.card.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        break;

                                    case 132:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.4);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.card.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.4,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 133:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `${scoredPlayer.card.playerName} scores after solo breakthrough`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 134:
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            // scoredPlayer = (FW|WG)
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                            // assistantPlayer = CM
                                            if (playersOnPositions[event.user].CM.length) {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                            }
                                            // assistantPlayer = (CD|WB)
                                            else {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                        }
                                        else {
                                            // scoredPlayer = CM
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];


                                            // assistantPlayer = (CD|WB)
                                            if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                            // assistantPlayer = CM
                                            else {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.card.playerName} runs and ${assistantPlayer.card.playerName} provides an assist`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.card.playerId,
                                                playerName: assistantPlayer.card.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 135:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.card.playerName} used opponent’s silly mistake`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 136:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.card.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.5,
                                            }
                                        ];
                                        break;
                                }
                            }
                            break;

                        case 'stepUp':
                            eventCode = MathService.randomInteger(131, 136);
                            switch (eventCode) {
                                case 131:
                                    if (playersOnPositions[event.user].FW.length) {
                                        scoredPlayer = playersOnPositions[event.user].FW[0];

                                        if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                    }
                                    else if (playersOnPositions[event.user].WG.length) {
                                        let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                        scoredPlayer = playersOnPositions[event.user].WG[idx];

                                        if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                        else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                    }
                                    else if (playersOnPositions[event.user].CM.length) {
                                        let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                        scoredPlayer = playersOnPositions[event.user].CM[idx];

                                        if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                        else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                            let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                        }
                                    }

                                    changeRating(scoredPlayer, 0.8);
                                    changeRating(assistantPlayer, 0.8);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].result = `${scoredPlayer.card.playerName} scores a header delivered by ${assistantPlayer.card.playerName}`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerId: assistantPlayer.card.playerId,
                                            playerName: assistantPlayer.card.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        },
                                    ];
                                    break;

                                case 132:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 0.4);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.card.playerName}`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.4,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 133:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 1);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].result = `${scoredPlayer.card.playerName} scores after solo breakthrough`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 134:
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        // scoredPlayer = (FW|WG)
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                        // assistantPlayer = CM
                                        if (playersOnPositions[event.user].CM.length) {
                                            assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                        }
                                        // assistantPlayer = (CD|WB)
                                        else {
                                            let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                        }
                                    }
                                    else {
                                        // scoredPlayer = CM
                                        let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                        scoredPlayer = playersOnPositions[event.user].CM[idx];


                                        // assistantPlayer = (CD|WB)
                                        if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                            let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                        }
                                        // assistantPlayer = CM
                                        else {
                                            assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                        }
                                    }

                                    changeRating(scoredPlayer, 0.8);
                                    changeRating(assistantPlayer, 0.8);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].result = `Goal! ${scoredPlayer.card.playerName} runs and ${assistantPlayer.card.playerName} provides an assist`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerId: assistantPlayer.card.playerId,
                                            playerName: assistantPlayer.card.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 135:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 1);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].result = `Goal! ${scoredPlayer.card.playerName} used opponent’s silly mistake`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 136:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 0.8);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                    }

                                    matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.card.playerName}`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.5,
                                        }
                                    ];
                                    break;
                            }
                            break;
                    }


                    //поиск виноватого игрока ================================================
                    let value = Math.random(),
                        anotherUserIdx = (event.user + 1) % 2,
                        guiltPlayer;

                    if (value <= 0.15) guiltPlayer = playersOnPositions[anotherUserIdx].GK[0];
                    else if (value <= 0.30) {
                        let possibleGuiltPlayers = [...playersOnPositions[anotherUserIdx].FW, ...playersOnPositions[anotherUserIdx].WG];
                        guiltPlayer = possibleGuiltPlayers[MathService.randomInteger(0, possibleGuiltPlayers.length - 1)];
                    }
                    else if (value <= 0.60) guiltPlayer = playersOnPositions[anotherUserIdx].CM[MathService.randomInteger(0, playersOnPositions[anotherUserIdx].CM.length - 1)];
                    else {
                        let possibleGuiltPlayers = [...playersOnPositions[anotherUserIdx].CD, ...playersOnPositions[anotherUserIdx].WB];
                        guiltPlayer = possibleGuiltPlayers[MathService.randomInteger(0, possibleGuiltPlayers.length - 1)];
                    }

                    changeRating(guiltPlayer, -0.2);

                    matchLogs[i + 1].players.push({
                        playerId: guiltPlayer.card.playerId,
                        playerName: guiltPlayer.card.playerName,
                        position: guiltPlayer.position,
                        role: 'guilt',
                        ratingDiff: -0.2,
                    });
                    //поиск виноватого игрока ================================================

                    // -0.2 пропустившим гол игрокам
                    for (let playerIndex = 0; playerIndex < anotherUser.players.length; playerIndex++) changeRating(anotherUser.players[playerIndex], -0.2);
                    matchLogs[i + 1].players.push({
                        playerName: 'Another team players',
                        position: 'Another team positions',
                        role: 'none',
                        ratingDiff: -0.2,
                    });
                }
                else {
                    eventCode = 130;

                    let anotherUser = event.user === 0 ? user2 : user1;

                    actedPlayer = anotherUser.players[anotherUser.players.length - 1];
                    changeRating(actedPlayer, 0.4);

                    matchLogs[i + 1].result = `Shot on target`;
                    matchLogs[i + 1].players = [
                        {
                            playerId: actedPlayer.card.playerId,
                            playerName: actedPlayer.card.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.4,
                        }
                    ];
                }
                break;
        }

        matchLogs[i + 1].code = eventCode;
        matchLogs[i + 1].score = goals[0] + '-' + goals[1];
    }


    // рассчёт рейтинга игроков за сезон (среднее арифм)===========================
    for (let playerIndex = 0; playerIndex < user1.players.length; playerIndex++) {
        let sumOfMarks = 0;

        for (let marksIndex = 0; marksIndex < user1.players[playerIndex].card.seasonRatingMarks.length; marksIndex++) {
            sumOfMarks += user1.players[playerIndex].card.seasonRatingMarks[marksIndex];
        }

        user1.players[playerIndex].card.averageRating = Number((sumOfMarks / user1.players[playerIndex].card.seasonRatingMarks.length).toFixed(2));
    }

    for (let playerIndex = 0; playerIndex < kickedPlayers[0].length; playerIndex++) {
        let sumOfMarks = 0;

        for (let marksIndex = 0; marksIndex < kickedPlayers[0][playerIndex].card.seasonRatingMarks.length; marksIndex++) {
            sumOfMarks += kickedPlayers[0][playerIndex].card.seasonRatingMarks[marksIndex];
        }

        kickedPlayers[0][playerIndex].card.averageRating = Number((sumOfMarks / kickedPlayers[0][playerIndex].card.seasonRatingMarks.length).toFixed(2));
    }


    for (let playerIndex = 0; playerIndex < user2.players.length; playerIndex++) {
        let sumOfMarks = 0;

        for (let marksIndex = 0; marksIndex < user2.players[playerIndex].card.seasonRatingMarks.length; marksIndex++) {
            sumOfMarks += user2.players[playerIndex].card.seasonRatingMarks[marksIndex];
        }

        user2.players[playerIndex].card.averageRating = Number((sumOfMarks / user2.players[playerIndex].card.seasonRatingMarks.length).toFixed(2));
    }

    for (let playerIndex = 0; playerIndex < kickedPlayers[1].length; playerIndex++) {
        let sumOfMarks = 0;

        for (let marksIndex = 0; marksIndex < kickedPlayers[1][playerIndex].card.seasonRatingMarks.length; marksIndex++) {
            sumOfMarks += kickedPlayers[1][playerIndex].card.seasonRatingMarks[marksIndex];
        }

        kickedPlayers[1][playerIndex].card.averageRating = Number((sumOfMarks / kickedPlayers[1][playerIndex].card.seasonRatingMarks.length).toFixed(2));
    }
    // рассчёт рейтинга игроков за сезон (среднее арифм)===========================


    // изменение статуса unavailable для всех игроков юзеров===========================
    for (let plIdx = 0; plIdx < user1.resultAllPlayers; plIdx++) {
        let currPlayer = user1.resultAllPlayers[plIdx];
        if (currPlayer.unavailableMatchesCount > 0) currPlayer.unavailableMatchesCount--;
    }

    for (let plIdx = 0; plIdx < user2.resultAllPlayers; plIdx++) {
        let currPlayer = user2.resultAllPlayers[plIdx];
        if (currPlayer.unavailableMatchesCount > 0) currPlayer.unavailableMatchesCount--;
    }
    // изменение статуса unavailable для всех игроков юзеров===========================


    user1.players = user1.players.concat(kickedPlayers[0]);
    user2.players = user2.players.concat(kickedPlayers[1]);

    let resultLogs = {
        user1: {
            id: user1.id,
            players: user1.players.map(player => {
                return {
                    playerId: player.card.playerId,
                    playerName: player.card.playerName,
                    head: player.card.head,
                    body: player.card.body,
                    clothing: player.card.clothing,
                    hair: player.card.hair,
                };
            })
        },
        user2: {
            id: user2.id,
            players: user2.players.map(player => {
                return {
                    playerId: player.card.playerId,
                    playerName: player.card.playerName,
                    head: player.card.head,
                    body: player.card.body,
                    clothing: player.card.clothing,
                    hair: player.card.hair,
                };
            })
        },
        matchEvents: matchLogs
    };


    //debug===========================================================================
    debugLogs.logs = resultLogs; //d
    debugLogs.score = goals[0] + '-' + goals[1]; //d
    debugLogs.user1.totalEvents = eventsArrs[0].join(' '); //d
    debugLogs.user2.totalEvents = eventsArrs[1].join(' '); //d


    function getLogsText_debug(user1, user2, debugLogs, matchLogs) {
        let logsText = '';

        logsText += 'Звёзды игроков:\n=============================\n';

        logsText += 'Игрок 1:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${debugLogs.user1.playersAsm[i].playerName}: ${debugLogs.user1.playersAsm[i].asm}\n`;
        }
        logsText += '=================\n';

        logsText += 'Игрок 2:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${debugLogs.user2.playersAsm[i].playerName}: ${debugLogs.user2.playersAsm[i].asm}\n`;
        }
        logsText += '=================\n';


        logsText += '\n\nРейтинг карточек перед матчем:\n=============================\n';

        logsText += 'Игрок 1:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${user1.players[i].card.playerName}: 6.6\n`;
        }
        logsText += '=================\n';

        logsText += 'Игрок 2:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${user2.players[i].card.playerName}: 6.6\n`;
        }
        logsText += '=================\n';


        logsText += '\n\nЛоги матча:\n=============================\n';
        for (let i = 1; i < matchLogs.length; i++) {
            let playersRatingString = '';

            for (let j = 0; j < matchLogs[i].players.length; j++) {
                playersRatingString += `${matchLogs[i].players[j].playerName} (${matchLogs[i].players[j].ratingDiff}), `;
            }

            playersRatingString = playersRatingString.substring(0, playersRatingString.length - 2);

            logsText += `${matchLogs[i].minute} минута, игрок ${matchLogs[i].user + 1}, событие ${matchLogs[i].momentType}.\nРезультат: ${matchLogs[i].result}.\nИзменение рейтинга: ${playersRatingString}.\n====================================\n`;
        }


        logsText += `\n\nСчёт: ${goals[0]}-${goals[1]}\n`;


        let yellowCards = [[], []], violations = [[], []], offendingPlayerIds = [[], []];
        for (let i = 1; i < matchLogs.length; i++) {
            let event = matchLogs[i];
            if (event.momentType === 11 && event.result.endsWith('card')) {
                let actedPlayer = event.players[0],
                    injuredPlayer = event.players[1],
                    cardType = 'Yellow';

                if (offendingPlayerIds[event.user].includes(actedPlayer.playerId)) cardType = 'Red';
                else offendingPlayerIds[event.user].push(actedPlayer.playerId);

                violations[event.user].push({
                    cardType,
                    actedPlayer,
                    injuredPlayer,
                });
                yellowCards[event.user].push({
                    actedPlayer,
                    injuredPlayer,
                });
            }
        }

        logsText += `\n\nНарушения:\n\n`;

        logsText += `Игрок 1:\n===============\n`;
        for (let i = 0; i < violations[0].length; i++) {
            logsText += `(${violations[0][i].cardType} card) Injured: ${yellowCards[0][i].injuredPlayer.playerName}, Acted: ${yellowCards[0][i].actedPlayer.playerName}`;

            if (violations[0][i].cardType === 'Red') logsText += ' (kicked)';

            logsText += '\n';
        }
        logsText += `===============\n`;

        logsText += `\nИгрок 2:\n===============\n`;
        for (let i = 0; i < violations[1].length; i++) {
            logsText += `(${violations[1][i].cardType} card) Injured: ${yellowCards[1][i].injuredPlayer.playerName}, Acted: ${yellowCards[1][i].actedPlayer.playerName}`;

            if (violations[1][i].cardType === 'Red') logsText += ' (kicked)';

            logsText += '\n';
        }
        logsText += `===============\n`;


        logsText += '\n\nРейтинг карточек после матча:\n=============================\n';

        logsText += 'Игрок 1:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${user1.players[i].card.playerName}: ${user1.players[i].card.seasonRatingMarks[user1.players[i].card.seasonRatingMarks.length - 1]}\n`;
        }
        logsText += '=================\n';

        logsText += 'Игрок 2:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${user2.players[i].card.playerName}: ${user2.players[i].card.seasonRatingMarks[user2.players[i].card.seasonRatingMarks.length - 1]}\n`;
        }
        logsText += '=================\n';

        return logsText;
    }

    debugLogs.logsText = getLogsText_debug(user1, user2, debugLogs, matchLogs);
    //debug===========================================================================

    if (saveToDB) {
        let
            user1UpdateLastTeamQuery = prisma.user.update({
                where: {
                    id: user1.id,
                },
                data: {
                    lastTeam: JSON.stringify(user1.resultLastTeam)
                }
            }),
            user1UpdateAllPlayersQuery = prisma.user_players.update({
                where: {
                    userId: user1.id,
                },
                data: {
                    playersJson: JSON.stringify(user1.resultAllPlayers)
                }
            }),
            user2UpdateLastTeamQuery = prisma.user.update({
                where: {
                    id: user2.id,
                },
                data: {
                    lastTeam: JSON.stringify(user2.resultLastTeam)
                }
            }),
            user2UpdateAllPlayersQuery = prisma.user_players.update({
                where: {
                    userId: user2.id,
                },
                data: {
                    playersJson: JSON.stringify(user2.resultAllPlayers)
                }
            }),
            matchUpdateQuery = prisma.match.update({
                where: {
                    id: match.id
                },
                data: {
                    logs: JSON.stringify(resultLogs),
                    score: goals[0] + ':' + goals[1],
                }
            });

        await prisma.$transaction([user1UpdateLastTeamQuery, user1UpdateAllPlayersQuery, user2UpdateLastTeamQuery, user2UpdateAllPlayersQuery, matchUpdateQuery]);
    }

    return debugLogs;
}

async function playMatchManyTimes_vc(matchId, count) {
    let debugLogs = []; //d

    let overall = {
        winFirst: 0,
        winSecond: 0,
        draw: 0,
    };

    for (let i = 0; i < count; i++) {
        debugLogs.push((await playDebugMatch_vc(matchId, false)));

        let goals = debugLogs[i].score.split('-').map(item => {
            return +item;
        });

        if (goals[0] > goals[1]) overall.winFirst++;
        else if (goals[0] < goals[1]) overall.winSecond++;
        else overall.draw++;
    }

    debugLogs.push(overall);

    return debugLogs;
}


async function playDebugMatch_v_16otr_v1(matchId, saveToDB) {
    function findInjured_111(eventedUser, playersWithSkills, injuredPlayers) {
        let STAmPlayersCount = playersWithSkills.STAm.length,
            STAzPlayersCount = playersWithSkills.STAz.length,
            possibleInjuredPlayers = [],
            injuredPlayer;

        if (STAmPlayersCount) {
            for (let j = 0; j < playersWithSkills.STAm.length; j++) {
                let currPlayer = playersWithSkills.STAm[j];
                if (!injuredPlayers.includes(currPlayer.card.playerId)) possibleInjuredPlayers.push(currPlayer);
            }
        }

        if (!possibleInjuredPlayers.length && STAzPlayersCount) {
            for (let j = 0; j < playersWithSkills.STAz.length; j++) {
                let currPlayer = playersWithSkills.STAz[j];
                if (!injuredPlayers.includes(currPlayer.card.playerId)) possibleInjuredPlayers.push(currPlayer);
            }
        }

        if (!possibleInjuredPlayers.length) {
            for (let j = 0; j < 5; j++) {
                let currPlayer = eventedUser.players[j];
                if (!injuredPlayers.includes(currPlayer.card.playerId)) possibleInjuredPlayers.push(currPlayer);
            }

            if (!possibleInjuredPlayers.length) {
                for (let j = 0; j < 5; j++) possibleInjuredPlayers.push(eventedUser.players[j]);
            }
        }

        injuredPlayer = possibleInjuredPlayers[MathService.randomInteger(0, possibleInjuredPlayers.length - 1)];

        return injuredPlayer;
    }

    function findActed_111(anotherUser) {
        let actedPlayer = anotherUser.players[MathService.randomInteger(0, anotherUser.players.length - 2)];

        return actedPlayer;
    }


    const match = await prisma.match.findFirst({
        select: {
            id: true,
            player1: {
                select: {
                    id: true,
                    avatar: true,
                    lastTactic: true,
                    lastTeam: true,
                    players: {
                        select: {
                            playersJson: true
                        }
                    },
                },
            },
            player2: {
                select: {
                    id: true,
                    avatar: true,
                    lastTactic: true,
                    lastTeam: true,
                    players: {
                        select: {
                            playersJson: true
                        }
                    },
                }
            },
        },
        where: {
            id: matchId
        },
    });

    let
        matchLogs = [],
        user1 = {
            id: match.player1.id,
            avatar: match.player1.avatar,
            tactic: JSON.parse(match.player1.lastTactic),
            players: [],
            resultLastTeam: JSON.parse(match.player1.lastTeam),
            resultAllPlayers: JSON.parse(match.player1.players.playersJson),
        },
        user2 = {
            id: match.player2.id,
            avatar: match.player2.avatar,
            tactic: JSON.parse(match.player2.lastTactic),
            players: [],
            resultLastTeam: JSON.parse(match.player2.lastTeam),
            resultAllPlayers: JSON.parse(match.player2.players.playersJson),
        },
        playersOnPositions = [
            {
                'FW': [],
                'WG': [],
                'CM': [],
                'WB': [],
                'CD': [],
                'GK': [],
            },
            {
                'FW': [],
                'WG': [],
                'CM': [],
                'WB': [],
                'CD': [],
                'GK': [],
            }
        ],
        playersWithSkills = [
            {
                AGIp: [],
                TCKLp: [],
                PASp: [],
                STAz: [],
                STAm: [],
                AGIm: [],
            },
            {
                AGIp: [],
                TCKLp: [],
                PASp: [],
                STAz: [],
                STAm: [],
                AGIm: [],
            },
        ],
        T = [0, 0],
        goals = [0, 0],
        eventsArrs = [[], []], //d
        debugLogs = {
            matchId: match.id,
            score: null,
            user1: {
                id: user1.id,
                players: user1.players,
                playersAsm: [],
                homeBonus: 3,
                avatarBonus: 0,
                T: 0,
            },
            user2: {
                id: user2.id,
                players: user2.players,
                playersAsm: [],
                homeBonus: 0,
                avatarBonus: 0,
                T: 0,
            },
        }; //d


    // заполнение массивов players ссылками на этих же игроков из resultAllPlayers =====================================
    function sortPlayersById_1(a, b) {
        if (a.playerId < b.playerId) return -1;
        if (a.playerId > b.playerId) return 1;
        return 0;
    }

    user1.resultLastTeam.sort(sortPlayersById_1);
    user2.resultLastTeam.sort(sortPlayersById_1);
    user1.resultAllPlayers.sort(sortPlayersById_1);
    user2.resultAllPlayers.sort(sortPlayersById_1);

    let rapPlIdx = 0;
    for (let ltPlIdx = 0; ltPlIdx < user1.resultLastTeam.length; ltPlIdx++) {
        while (user1.resultAllPlayers[rapPlIdx].playerId !== user1.resultLastTeam[ltPlIdx].playerId) rapPlIdx++;

        user1.resultAllPlayers[rapPlIdx].seasonRatingMarks.push(6.6); //начальная оценка за матч

        user1.players.push({
            card: user1.resultAllPlayers[rapPlIdx],
            position: user1.resultLastTeam[ltPlIdx].position,
        });
    }

    rapPlIdx = 0;
    for (let ltPlIdx = 0; ltPlIdx < user2.resultLastTeam.length; ltPlIdx++) {
        while (user2.resultAllPlayers[rapPlIdx].playerId !== user2.resultLastTeam[ltPlIdx].playerId) rapPlIdx++;

        user2.resultAllPlayers[rapPlIdx].seasonRatingMarks.push(6.6); //начальная оценка за матч

        user2.players.push({
            card: user2.resultAllPlayers[rapPlIdx],
            position: user2.resultLastTeam[ltPlIdx].position,
        });
    }


    // сортировка игроков по возрастанию рейтинга (GK всегда последние)
    function sortPlayersByAverageRating(a, b) {
        if (a.card.isGoalKeeper) return 1;
        if (b.card.isGoalKeeper) return -1;

        if (a.card.averageRating < b.card.averageRating) return -1;
        if (a.card.averageRating > b.card.averageRating) return 1;

        return 0;
    }

    user1.players.sort(sortPlayersByAverageRating);
    user2.players.sort(sortPlayersByAverageRating);
    // заполнение массивов players ссылками на этих же игроков из resultAllPlayers =====================================


    user1.players.forEach((player) => {
        //распределение в массивах игроков на позициях
        playersOnPositions[0][player.position].push(player);


        let technicalSkills = {},
            physicalSkills = {};

        for (let skill in player.card.physicalSkills) physicalSkills[skill] = player.card.physicalSkills[skill];
        for (let skill in player.card.technicalSkills) technicalSkills[skill] = player.card.technicalSkills[skill];


        switch (player.position) {
            case 'FW':
                technicalSkills.shoot *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.agility *= 3;
                physicalSkills.jump *= 3;
                break;

            case 'WG':
                technicalSkills.cross *= 3;
                technicalSkills.shoot *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.agility *= 3;
                break;

            case 'CM':
                technicalSkills.pass *= 3;
                physicalSkills.agility *= 3;
                physicalSkills.strength *= 3;
                break;

            case 'CD':
                technicalSkills.tackling *= 3;
                physicalSkills.strength *= 3;
                physicalSkills.jump *= 3;
                break;

            case 'WB':
                technicalSkills.cross *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.jump *= 3;
                break;
        }


        if (player.card.physicalSkills.agility > 0) playersWithSkills[0].AGIp.push(player);
        else if (player.card.physicalSkills.agility < 0) playersWithSkills[0].AGIm.push(player);

        if (player.card.technicalSkills.tackling > 0) playersWithSkills[0].TCKLp.push(player);

        if (player.card.technicalSkills.pass > 0) playersWithSkills[0].PASp.push(player);

        if (player.card.physicalSkills.stamina < 0) playersWithSkills[0].STAm.push(player);
        else if (player.card.physicalSkills.stamina === 0) playersWithSkills[0].STAz.push(player);


        //получение asm игрока
        let phy = 0, te = 0, asm;

        for (let skill in physicalSkills) phy += physicalSkills[skill];
        for (let skill in technicalSkills) te += technicalSkills[skill];

        phy = Math.min(Math.max(1, phy), 5);
        te = Math.min(Math.max(1, te), 5);

        asm = (phy + te) + player.card.mood;
        asm = Math.min(Math.max(1, asm), 10);

        if (asm % 1 !== 0) asm += 0.5 * (player.card.mood < 0 ? -1 : 1);

        T[0] += asm;

        debugLogs.user1.playersAsm.push({
            playerId: player.card.playerId,
            playerName: player.card.playerName,
            asm,
        }); //d
    });
    user2.players.forEach((player) => {
        //распределение в массивах игроков на позициях
        playersOnPositions[1][player.position].push(player);


        let technicalSkills = {},
            physicalSkills = {};

        for (let skill in player.card.physicalSkills) physicalSkills[skill] = player.card.physicalSkills[skill];
        for (let skill in player.card.technicalSkills) technicalSkills[skill] = player.card.technicalSkills[skill];


        switch (player.position) {
            case 'FW':
                technicalSkills.shoot *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.agility *= 3;
                physicalSkills.jump *= 3;
                break;

            case 'WG':
                technicalSkills.cross *= 3;
                technicalSkills.shoot *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.agility *= 3;
                break;

            case 'CM':
                technicalSkills.pass *= 3;
                physicalSkills.agility *= 3;
                physicalSkills.strength *= 3;
                break;

            case 'CD':
                technicalSkills.tackling *= 3;
                physicalSkills.strength *= 3;
                physicalSkills.jump *= 3;
                break;

            case 'WB':
                technicalSkills.cross *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.jump *= 3;
                break;
        }


        if (player.card.physicalSkills.agility > 0) playersWithSkills[1].AGIp.push(player);
        else if (player.card.physicalSkills.agility < 0) playersWithSkills[1].AGIm.push(player);

        if (player.card.technicalSkills.tackling > 0) playersWithSkills[1].TCKLp.push(player);

        if (player.card.technicalSkills.pass > 0) playersWithSkills[1].PASp.push(player);

        if (player.card.physicalSkills.stamina < 0) playersWithSkills[1].STAm.push(player);
        else if (player.card.physicalSkills.stamina === 0) playersWithSkills[1].STAz.push(player);


        //получение asm игрока
        let phy = 0, te = 0, asm;

        for (let skill in physicalSkills) phy += physicalSkills[skill];
        for (let skill in technicalSkills) te += technicalSkills[skill];

        phy = Math.min(Math.max(1, phy), 5);
        te = Math.min(Math.max(1, te), 5);

        asm = (phy + te) + player.card.mood;
        asm = Math.min(Math.max(1, asm), 10);

        if (asm % 1 !== 0) asm += 0.5 * (player.card.mood < 0 ? -1 : 1);

        T[1] += asm;

        debugLogs.user2.playersAsm.push({
            playerId: player.card.playerId,
            playerName: player.card.playerName,
            asm,
        }); //d
    });

    debugLogs.user1.T_players = T[0]; //d
    debugLogs.user2.T_players = T[1]; //d


    T[0] += 3; //доп очки за домашнюю тиму
    if (user1.avatar !== user2.avatar) {
        if (avatarDefying[user1.avatar].includes(user2.avatar)) {
            T[0] += 3;

            debugLogs.user1.avatarBonus = 3;//debug
        }
        else if (avatarDefying[user2.avatar].includes(user1.avatar)) {
            T[1] += 3;

            debugLogs.user2.avatarBonus = 3;//debug
        }
    } // доп очки за контр тренеров

    debugLogs.user1.T_players_bonuses = T[0]; //d
    debugLogs.user2.T_players_bonuses = T[1]; //d


    let advantage = Math.abs(T[0] - T[1]),
        momentsCount1 = {
            firstTime: [0, 0],
            secondTime: [0, 0]
        };

    if (advantage <= 8) {
        if (T[0] > T[1]) T[1] = T[0];
        else T[0] = T[1];

        momentsCount1.firstTime = [8, 8];
    }
    else {
        let user1MomCount = Math.round(T[0] / ((T[0] + T[1]) / 16));
        momentsCount1.firstTime = [user1MomCount, 16 - user1MomCount];
    }


    debugLogs.user1.T_players_bonuses_adv = T[0]; //d
    debugLogs.user2.T_players_bonuses_adv = T[1]; //d


    function changeRating(player, ratingDiff) {
        player.card.seasonRatingMarks[player.card.seasonRatingMarks.length - 1] = Number((player.card.seasonRatingMarks[player.card.seasonRatingMarks.length - 1] + ratingDiff).toFixed(2));
    }

    let xG = [0, 0], xG1 = [0, 0], xG2 = [0, 0], lastPotGoalMinute = null;


    matchLogs.push({
        minute: 0,
        user: null,
        momentType: null,
        result: 'Match started!'
    });


    //первый тайм ===================================================================
    for (let i = 3; i <= 48; i += 3) {
        let player = MathService.randomFloat(0, T[0] + T[1]) <= T[0] ? 0 : 1,
            randNum = MathService.randomInteger(1, 10),
            momentType = randNum >= 1 && randNum <= 2 ? 13 : randNum >= 3 && randNum <= 6 ? 12 : 11,
            momentWeight = 0.5 * (momentType - 9);

        if (momentsCount1.firstTime[player] === 0) player = (player + 1) % 2;
        momentsCount1.firstTime[player]--;


        T[player] += momentWeight; // чтобы получить вес 1/1.5/2 (11 -9. 12 - 9, 13 - 9)
        xG[player] += momentWeight;
        xG1[player] += momentWeight;

        eventsArrs[player].push(momentType); //d

        if (i === 48) {
            matchLogs.push({
                minute: `45'add`,
                user: player,
                momentType,
                result: ''
            });
            break;
        }
        matchLogs.push({
            minute: i,
            user: player,
            momentType,
            result: ''
        });
    }

    xG[0] /= 10;
    xG[1] /= 10;
    xG1[0] /= 10;
    xG1[1] /= 10;
    //первый тайм ===================================================================


    eventsArrs[0].push("==="); //d
    eventsArrs[1].push("==="); //d


    advantage = Math.abs(T[0] - T[1]);
    if (advantage <= 8) {
        momentsCount1.secondTime = [8, 8];
    }
    else {
        let user1MomCount = Math.round(T[0] / ((T[0] + T[1]) / 16));
        momentsCount1.secondTime = [user1MomCount, 16 - user1MomCount];
    }

    //второй тайм ===================================================================
    for (let i = 48; i <= 93; i += 3) {
        let player = MathService.randomFloat(0, T[0] + T[1]) <= T[0] ? 0 : 1,
            randNum = MathService.randomInteger(1, 10),
            momentType = randNum >= 1 && randNum <= 2 ? 13 : randNum >= 3 && randNum <= 6 ? 12 : 11,
            momentWeight = 0.5 * (momentType - 9);

        if (momentsCount1.secondTime[player] === 0) player = (player + 1) % 2;
        momentsCount1.secondTime[player]--;


        T[player] += momentWeight; // чтобы получить вес 1/1.5/2 (11 -9. 12 - 9, 13 - 9)
        xG[player] += momentWeight;
        xG2[player] += momentWeight;


        eventsArrs[player].push(momentType); //d


        if (i === 93) {
            matchLogs.push({
                minute: `90'add`,
                user: player,
                momentType,
                result: ''
            });
            break;
        }
        matchLogs.push({
            minute: i,
            user: player,
            momentType,
            result: ''
        });
    }

    xG[0] /= 10;
    xG[1] /= 10;
    xG2[0] /= 10;
    xG2[1] /= 10;
    //второй тайм ===================================================================


    for (let i = matchLogs.length - 1; i > 0; i--) {
        if (matchLogs[i].momentType === 13) {
            lastPotGoalMinute = matchLogs[i].minute;
            break;
        }
    }

    let playersWithYellowCards = [[], []], injuredPlayers = [[], []], kickedPlayers = [[], []];

    xG[0] = xG1[0];
    xG[1] = xG1[1];

    for (let i = 0; i < matchLogs.length - 1; i++) {
        // добавляем xG первого тайма
        if (i === 16) {
            xG[0] += xG2[0];
            xG[1] += xG2[1];
        }


        let event = matchLogs[i + 1];

        let eventCode,
            eventedUser, scoredUser, anotherUser,
            AGIpPlayersCount, TCKLpPlayersCount, PASpPlayersCount, AGImPlayersCount, // для удобства
            actedPlayer, possibleActedPlayers, injuredPlayer;

        switch (event.momentType) {
            case 11:
                eventedUser = event.user === 0 ? user1 : user2;
                anotherUser = event.user === 0 ? user2 : user1;

                eventCode = MathService.randomInteger(111, 115);

                switch (eventCode) {
                    case 111:
                        injuredPlayer = findInjured_111(eventedUser, playersWithSkills[event.user], injuredPlayers[event.user]);
                        injuredPlayers[event.user].push(injuredPlayer.card.playerId);
                        changeRating(injuredPlayer, -0.2);

                        actedPlayer = findActed_111(anotherUser);
                        actedPlayer.card.seasonYellowCardsCount++;
                        playersWithYellowCards[(event.user + 1) % 2].push(actedPlayer.card.playerId);
                        changeRating(actedPlayer, -0.4);

                        if (playersWithYellowCards[(event.user + 1) % 2].includes(actedPlayer.card.playerId)) {
                            kickedPlayers[(event.user + 1) % 2].push(actedPlayer);
                            actedPlayer.card.unavailableMatchesCount = 4;

                            // удаление из массива игроков
                            for (let plIdx = 0; plIdx < anotherUser.players.length; plIdx++) {
                                if (anotherUser.players[plIdx].card.playerId === actedPlayer.card.playerId) {
                                    anotherUser.players.splice(plIdx, 1);
                                    break;
                                }
                            }

                            // удаление из игроков на позициях
                            for (let plIdx = 0; plIdx < playersOnPositions[(event.user + 1) % 2][actedPlayer.position].length; plIdx++) {
                                if (playersOnPositions[(event.user + 1) % 2][actedPlayer.position][plIdx].card.playerId === actedPlayer.card.playerId) {
                                    playersOnPositions[(event.user + 1) % 2][actedPlayer.position].splice(plIdx, 1);
                                    break;
                                }
                            }

                            // удаление из игроков по скиллах ===========================================================================
                            if (actedPlayer.card.physicalSkills.agility > 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].AGIp.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].AGIp[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].AGIp.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }
                            else if (actedPlayer.card.physicalSkills.agility < 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].AGIm.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].AGIm[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].AGIm.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }

                            if (actedPlayer.card.physicalSkills.stamina === 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].STAz.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].STAz[plIdx].playerId === actedPlayer.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].STAz.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }
                            else if (actedPlayer.card.physicalSkills.stamina < 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].STAm.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].STAm[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].STAm.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }

                            if (actedPlayer.card.technicalSkills.tackling > 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].TCKLp.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].TCKLp[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].TCKLp.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }

                            if (actedPlayer.card.technicalSkills.pass > 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].PASp.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].PASp[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].PASp.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }
                            // удаление из игроков по скиллах ===========================================================================
                        }

                        if (actedPlayer.card.seasonYellowCardsCount === 8) {
                            //unavailable
                        }

                        matchLogs[i + 1].result = `${injuredPlayer.card.playerName} is injured - ${actedPlayer.card.playerName} will be punished by a yellow card`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: -0.4,
                            },
                            {
                                playerId: injuredPlayer.card.playerId,
                                playerName: injuredPlayer.card.playerName,
                                position: injuredPlayer.position,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;

                    case 112:
                        AGImPlayersCount = playersWithSkills[event.user].AGIm.length;

                        if (AGImPlayersCount) actedPlayer = playersWithSkills[event.user].AGIm[MathService.randomInteger(0, AGImPlayersCount - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].result = `Unlucky dribbling - ${actedPlayer.card.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;

                    case 113:
                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];

                        if (possibleActedPlayers.length) actedPlayer = possibleActedPlayers[MathService.randomInteger(0, possibleActedPlayers.length - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(0, eventedUser.players.length - 2)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].result = `Unlucky cross - ${actedPlayer.card.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;

                    case 114:
                        matchLogs[i + 1].result = `Slow passing in the midfield`;
                        matchLogs[i + 1].players = [];
                        break;

                    case 115:
                        actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].result = `${actedPlayer.card.playerName} made a mistake`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;
                }
                break;

            case 12:
                eventedUser = event.user === 0 ? user1 : user2;
                anotherUser = event.user === 0 ? user2 : user1;

                eventCode = MathService.randomInteger(121, 125);

                switch (eventCode) {
                    case 121:
                        actedPlayer = eventedUser.players[MathService.randomInteger(0, eventedUser.players.length - 2)];

                        matchLogs[i + 1].result = `Shot off target`;
                        matchLogs[i + 1].players = [{
                            playerId: actedPlayer.card.playerId,
                            playerName: actedPlayer.card.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0,
                        }];
                        break;

                    case 122:
                        AGIpPlayersCount = playersWithSkills[event.user].AGIp.length;

                        if (AGIpPlayersCount) actedPlayer = playersWithSkills[event.user].AGIp[MathService.randomInteger(0, AGIpPlayersCount - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(eventedUser.players.length - 6, eventedUser.players.length - 2)];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].result = `Successful dribbling by ${actedPlayer.card.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: 0.2,
                            }
                        ];
                        break;

                    case 123:
                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];
                        possibleActedPlayers.sort(function (a, b) {
                            if (a.card.averageRating < b.card.averageRating) return -1;
                            if (a.card.averageRating > b.card.averageRating) return 1;
                            return 0;
                        });

                        actedPlayer = possibleActedPlayers[possibleActedPlayers.length - 1];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].result = `Promising cross by ${actedPlayer.card.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: 0.2,
                            }
                        ];
                        break;

                    case 124:
                        TCKLpPlayersCount = playersWithSkills[event.user].TCKLp.length;

                        if (TCKLpPlayersCount) actedPlayer = playersWithSkills[event.user].TCKLp[MathService.randomInteger(0, TCKLpPlayersCount - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(eventedUser.players.length - 6, eventedUser.players.length - 2)];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].result = `Interception by ${actedPlayer.card.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: 0.2,
                            }
                        ];
                        break;

                    case 125:
                        PASpPlayersCount = playersWithSkills[event.user].PASp.length;

                        if (PASpPlayersCount) actedPlayer = playersWithSkills[event.user].PASp[MathService.randomInteger(0, PASpPlayersCount - 1)];
                        else {
                            playersOnPositions[event.user].CM.sort(function (a, b) {
                                if (a.card.averageRating < b.card.averageRating) return -1;
                                if (a.card.averageRating > b.card.averageRating) return 1;
                                return 0;
                            });
                            actedPlayer = playersOnPositions[event.user].CM[playersOnPositions[event.user].CM.length - 1];
                        }

                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].result = `Promising through pass by ${actedPlayer.card.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: 0.2,
                            }
                        ];
                        break;
                }
                break;

            case 13:
                let chanceNumbers = Math.floor(xG[event.user] / 0.25);

                if (event.minute === lastPotGoalMinute && goals[0] === goals[1]) chanceNumbers++;

                let goal = MathService.randomInteger(1, 10) <= chanceNumbers ? 1 : 0;

                if (goal) {
                    let scoredPlayer, assistantPlayer, possibleScoredPlayers;

                    scoredUser = event.user === 0 ? user1 : user2;
                    anotherUser = event.user === 0 ? user2 : user1;

                    goals[event.user]++;
                    xG[event.user] = Math.max(0, xG[event.user] - 1); //чтобы xG игрока не был меньше 0

                    switch (scoredUser.tactic.teamFocus) {
                        case 'wing-play':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                eventCode = 131;


                                if (playersOnPositions[event.user].FW.length) {
                                    scoredPlayer = playersOnPositions[event.user].FW[0];

                                    if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                    else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                }
                                else if (playersOnPositions[event.user].WG.length) {
                                    let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                    scoredPlayer = playersOnPositions[event.user].WG[idx];

                                    if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                    else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                }
                                else if (playersOnPositions[event.user].CM.length) {
                                    let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                    scoredPlayer = playersOnPositions[event.user].CM[idx];

                                    if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                    else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                        let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                    }
                                }

                                changeRating(scoredPlayer, 0.8);
                                changeRating(assistantPlayer, 0.8);


                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }

                                matchLogs[i + 1].result = `${scoredPlayer.card.playerName} scores a header delivered by ${assistantPlayer.card.playerName}`;
                                matchLogs[i + 1].players = [
                                    {
                                        playerId: scoredPlayer.card.playerId,
                                        playerName: scoredPlayer.card.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerId: assistantPlayer.card.playerId,
                                        playerName: assistantPlayer.card.playerName,
                                        position: assistantPlayer.position,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    },
                                ];
                            }
                            else {
                                eventCode = MathService.randomInteger(131, 136);

                                switch (eventCode) {
                                    case 131:
                                        if (playersOnPositions[event.user].FW.length) {
                                            scoredPlayer = playersOnPositions[event.user].FW[0];

                                            if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        }
                                        else if (playersOnPositions[event.user].WG.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].WG[idx];

                                            if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        }
                                        else if (playersOnPositions[event.user].CM.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];

                                            if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `${scoredPlayer.card.playerName} scores a header delivered by ${assistantPlayer.card.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.card.playerId,
                                                playerName: assistantPlayer.card.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        break;

                                    case 132:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.4);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.card.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.4,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 133:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `${scoredPlayer.card.playerName} scores after solo breakthrough`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 134:
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            // scoredPlayer = (FW|WG)
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                            // assistantPlayer = CM
                                            if (playersOnPositions[event.user].CM.length) {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                            }
                                            // assistantPlayer = (CD|WB)
                                            else {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                        }
                                        else {
                                            // scoredPlayer = CM
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];


                                            // assistantPlayer = (CD|WB)
                                            if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                            // assistantPlayer = CM
                                            else {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.card.playerName} runs and ${assistantPlayer.card.playerName} provides an assist`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.card.playerId,
                                                playerName: assistantPlayer.card.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 135:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.card.playerName} used opponent’s silly mistake`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 136:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.card.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.5,
                                            }
                                        ];
                                        break;
                                }
                            }
                            break;

                        case 'midfield':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                eventCode = 134;


                                if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                    // scoredPlayer = (FW|WG)
                                    possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                    scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                    // assistantPlayer = CM
                                    if (playersOnPositions[event.user].CM.length) {
                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                    }
                                    // assistantPlayer = (CD|WB)
                                    else {
                                        let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                    }
                                }
                                else {
                                    // scoredPlayer = CM
                                    let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                    scoredPlayer = playersOnPositions[event.user].CM[idx];


                                    // assistantPlayer = (CD|WB)
                                    if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                        let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                    }
                                    // assistantPlayer = CM
                                    else {
                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                    }
                                }

                                changeRating(scoredPlayer, 0.8);
                                changeRating(assistantPlayer, 0.8);


                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }

                                matchLogs[i + 1].result = `Goal! ${scoredPlayer.card.playerName} runs and ${assistantPlayer.card.playerName} provides an assist`;
                                matchLogs[i + 1].players = [
                                    {
                                        playerId: scoredPlayer.card.playerId,
                                        playerName: scoredPlayer.card.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerId: assistantPlayer.card.playerId,
                                        playerName: assistantPlayer.card.playerName,
                                        position: assistantPlayer.position,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    }
                                ];
                            }
                            else {
                                eventCode = MathService.randomInteger(131, 136);

                                switch (eventCode) {
                                    case 131:
                                        if (playersOnPositions[event.user].FW.length) {
                                            scoredPlayer = playersOnPositions[event.user].FW[0];

                                            if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        }
                                        else if (playersOnPositions[event.user].WG.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].WG[idx];

                                            if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        }
                                        else if (playersOnPositions[event.user].CM.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];

                                            if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `${scoredPlayer.card.playerName} scores a header delivered by ${assistantPlayer.card.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.card.playerId,
                                                playerName: assistantPlayer.card.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        break;

                                    case 132:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.4);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.card.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.4,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 133:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `${scoredPlayer.card.playerName} scores after solo breakthrough`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 134:
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            // scoredPlayer = (FW|WG)
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                            // assistantPlayer = CM
                                            if (playersOnPositions[event.user].CM.length) {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                            }
                                            // assistantPlayer = (CD|WB)
                                            else {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                        }
                                        else {
                                            // scoredPlayer = CM
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];


                                            // assistantPlayer = (CD|WB)
                                            if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                            // assistantPlayer = CM
                                            else {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.card.playerName} runs and ${assistantPlayer.card.playerName} provides an assist`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.card.playerId,
                                                playerName: assistantPlayer.card.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 135:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.card.playerName} used opponent’s silly mistake`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 136:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.card.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.5,
                                            }
                                        ];
                                        break;
                                }
                            }
                            break;

                        case 'stepUp':
                            eventCode = MathService.randomInteger(131, 136);
                            switch (eventCode) {
                                case 131:
                                    if (playersOnPositions[event.user].FW.length) {
                                        scoredPlayer = playersOnPositions[event.user].FW[0];

                                        if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                    }
                                    else if (playersOnPositions[event.user].WG.length) {
                                        let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                        scoredPlayer = playersOnPositions[event.user].WG[idx];

                                        if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                        else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                    }
                                    else if (playersOnPositions[event.user].CM.length) {
                                        let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                        scoredPlayer = playersOnPositions[event.user].CM[idx];

                                        if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                        else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                            let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                        }
                                    }

                                    changeRating(scoredPlayer, 0.8);
                                    changeRating(assistantPlayer, 0.8);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].result = `${scoredPlayer.card.playerName} scores a header delivered by ${assistantPlayer.card.playerName}`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerId: assistantPlayer.card.playerId,
                                            playerName: assistantPlayer.card.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        },
                                    ];
                                    break;

                                case 132:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 0.4);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.card.playerName}`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.4,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 133:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 1);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].result = `${scoredPlayer.card.playerName} scores after solo breakthrough`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 134:
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        // scoredPlayer = (FW|WG)
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                        // assistantPlayer = CM
                                        if (playersOnPositions[event.user].CM.length) {
                                            assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                        }
                                        // assistantPlayer = (CD|WB)
                                        else {
                                            let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                        }
                                    }
                                    else {
                                        // scoredPlayer = CM
                                        let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                        scoredPlayer = playersOnPositions[event.user].CM[idx];


                                        // assistantPlayer = (CD|WB)
                                        if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                            let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                        }
                                        // assistantPlayer = CM
                                        else {
                                            assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                        }
                                    }

                                    changeRating(scoredPlayer, 0.8);
                                    changeRating(assistantPlayer, 0.8);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].result = `Goal! ${scoredPlayer.card.playerName} runs and ${assistantPlayer.card.playerName} provides an assist`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerId: assistantPlayer.card.playerId,
                                            playerName: assistantPlayer.card.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 135:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 1);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].result = `Goal! ${scoredPlayer.card.playerName} used opponent’s silly mistake`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 136:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 0.8);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                    }

                                    matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.card.playerName}`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.5,
                                        }
                                    ];
                                    break;
                            }
                            break;
                    }


                    //поиск виноватого игрока ================================================
                    let value = Math.random(),
                        anotherUserIdx = (event.user + 1) % 2,
                        guiltPlayer;

                    if (value <= 0.15) guiltPlayer = playersOnPositions[anotherUserIdx].GK[0];
                    else if (value <= 0.30) {
                        let possibleGuiltPlayers = [...playersOnPositions[anotherUserIdx].FW, ...playersOnPositions[anotherUserIdx].WG];
                        guiltPlayer = possibleGuiltPlayers[MathService.randomInteger(0, possibleGuiltPlayers.length - 1)];
                    }
                    else if (value <= 0.60) guiltPlayer = playersOnPositions[anotherUserIdx].CM[MathService.randomInteger(0, playersOnPositions[anotherUserIdx].CM.length - 1)];
                    else {
                        let possibleGuiltPlayers = [...playersOnPositions[anotherUserIdx].CD, ...playersOnPositions[anotherUserIdx].WB];
                        guiltPlayer = possibleGuiltPlayers[MathService.randomInteger(0, possibleGuiltPlayers.length - 1)];
                    }

                    changeRating(guiltPlayer, -0.2);

                    matchLogs[i + 1].players.push({
                        playerId: guiltPlayer.card.playerId,
                        playerName: guiltPlayer.card.playerName,
                        position: guiltPlayer.position,
                        role: 'guilt',
                        ratingDiff: -0.2,
                    });
                    //поиск виноватого игрока ================================================

                    // -0.2 пропустившим гол игрокам
                    for (let playerIndex = 0; playerIndex < anotherUser.players.length; playerIndex++) changeRating(anotherUser.players[playerIndex], -0.2);
                    matchLogs[i + 1].players.push({
                        playerName: 'Another team players',
                        position: 'Another team positions',
                        role: 'none',
                        ratingDiff: -0.2,
                    });
                }
                else {
                    eventCode = 130;

                    let anotherUser = event.user === 0 ? user2 : user1;

                    actedPlayer = anotherUser.players[anotherUser.players.length - 1];
                    changeRating(actedPlayer, 0.4);

                    matchLogs[i + 1].result = `Shot on target`;
                    matchLogs[i + 1].players = [
                        {
                            playerId: actedPlayer.card.playerId,
                            playerName: actedPlayer.card.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.4,
                        }
                    ];
                }
                break;
        }

        matchLogs[i + 1].code = eventCode;
        matchLogs[i + 1].score = goals[0] + '-' + goals[1];
    }


    // рассчёт рейтинга игроков за сезон (среднее арифм)===========================
    for (let playerIndex = 0; playerIndex < user1.players.length; playerIndex++) {
        let sumOfMarks = 0;

        for (let marksIndex = 0; marksIndex < user1.players[playerIndex].card.seasonRatingMarks.length; marksIndex++) {
            sumOfMarks += user1.players[playerIndex].card.seasonRatingMarks[marksIndex];
        }

        user1.players[playerIndex].card.averageRating = Number((sumOfMarks / user1.players[playerIndex].card.seasonRatingMarks.length).toFixed(2));
    }

    for (let playerIndex = 0; playerIndex < kickedPlayers[0].length; playerIndex++) {
        let sumOfMarks = 0;

        for (let marksIndex = 0; marksIndex < kickedPlayers[0][playerIndex].card.seasonRatingMarks.length; marksIndex++) {
            sumOfMarks += kickedPlayers[0][playerIndex].card.seasonRatingMarks[marksIndex];
        }

        kickedPlayers[0][playerIndex].card.averageRating = Number((sumOfMarks / kickedPlayers[0][playerIndex].card.seasonRatingMarks.length).toFixed(2));
    }


    for (let playerIndex = 0; playerIndex < user2.players.length; playerIndex++) {
        let sumOfMarks = 0;

        for (let marksIndex = 0; marksIndex < user2.players[playerIndex].card.seasonRatingMarks.length; marksIndex++) {
            sumOfMarks += user2.players[playerIndex].card.seasonRatingMarks[marksIndex];
        }

        user2.players[playerIndex].card.averageRating = Number((sumOfMarks / user2.players[playerIndex].card.seasonRatingMarks.length).toFixed(2));
    }

    for (let playerIndex = 0; playerIndex < kickedPlayers[1].length; playerIndex++) {
        let sumOfMarks = 0;

        for (let marksIndex = 0; marksIndex < kickedPlayers[1][playerIndex].card.seasonRatingMarks.length; marksIndex++) {
            sumOfMarks += kickedPlayers[1][playerIndex].card.seasonRatingMarks[marksIndex];
        }

        kickedPlayers[1][playerIndex].card.averageRating = Number((sumOfMarks / kickedPlayers[1][playerIndex].card.seasonRatingMarks.length).toFixed(2));
    }
    // рассчёт рейтинга игроков за сезон (среднее арифм)===========================


    // изменение статуса unavailable для всех игроков юзеров===========================
    for (let plIdx = 0; plIdx < user1.resultAllPlayers; plIdx++) {
        let currPlayer = user1.resultAllPlayers[plIdx];
        if (currPlayer.unavailableMatchesCount > 0) currPlayer.unavailableMatchesCount--;
    }

    for (let plIdx = 0; plIdx < user2.resultAllPlayers; plIdx++) {
        let currPlayer = user2.resultAllPlayers[plIdx];
        if (currPlayer.unavailableMatchesCount > 0) currPlayer.unavailableMatchesCount--;
    }
    // изменение статуса unavailable для всех игроков юзеров===========================


    user1.players = user1.players.concat(kickedPlayers[0]);
    user2.players = user2.players.concat(kickedPlayers[1]);

    let resultLogs = {
        user1: {
            id: user1.id,
            players: user1.players.map(player => {
                return {
                    playerId: player.card.playerId,
                    playerName: player.card.playerName,
                    head: player.card.head,
                    body: player.card.body,
                    clothing: player.card.clothing,
                    hair: player.card.hair,
                };
            })
        },
        user2: {
            id: user2.id,
            players: user2.players.map(player => {
                return {
                    playerId: player.card.playerId,
                    playerName: player.card.playerName,
                    head: player.card.head,
                    body: player.card.body,
                    clothing: player.card.clothing,
                    hair: player.card.hair,
                };
            })
        },
        matchEvents: matchLogs
    };


    //debug===========================================================================
    debugLogs.logs = resultLogs; //d
    debugLogs.score = goals[0] + '-' + goals[1]; //d
    debugLogs.user1.totalEvents = eventsArrs[0].join(' '); //d
    debugLogs.user2.totalEvents = eventsArrs[1].join(' '); //d


    function getLogsText_debug(user1, user2, debugLogs, matchLogs) {
        let logsText = '';

        logsText += 'Звёзды игроков:\n=============================\n';

        logsText += 'Игрок 1:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${debugLogs.user1.playersAsm[i].playerName}: ${debugLogs.user1.playersAsm[i].asm}\n`;
        }
        logsText += '=================\n';

        logsText += 'Игрок 2:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${debugLogs.user2.playersAsm[i].playerName}: ${debugLogs.user2.playersAsm[i].asm}\n`;
        }
        logsText += '=================\n';


        logsText += '\n\nРейтинг карточек перед матчем:\n=============================\n';

        logsText += 'Игрок 1:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${user1.players[i].card.playerName}: 6.6\n`;
        }
        logsText += '=================\n';

        logsText += 'Игрок 2:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${user2.players[i].card.playerName}: 6.6\n`;
        }
        logsText += '=================\n';


        logsText += '\n\nЛоги матча:\n=============================\n';
        for (let i = 1; i < matchLogs.length; i++) {
            let playersRatingString = '';

            for (let j = 0; j < matchLogs[i].players.length; j++) {
                playersRatingString += `${matchLogs[i].players[j].playerName} (${matchLogs[i].players[j].ratingDiff}), `;
            }

            playersRatingString = playersRatingString.substring(0, playersRatingString.length - 2);

            logsText += `${matchLogs[i].minute} минута, игрок ${matchLogs[i].user + 1}, событие ${matchLogs[i].momentType}.\nРезультат: ${matchLogs[i].result}.\nИзменение рейтинга: ${playersRatingString}.\n====================================\n`;
        }


        logsText += `\n\nСчёт: ${goals[0]}-${goals[1]}\n`;


        let yellowCards = [[], []], violations = [[], []], offendingPlayerIds = [[], []];
        for (let i = 1; i < matchLogs.length; i++) {
            let event = matchLogs[i];
            if (event.momentType === 11 && event.result.endsWith('card')) {
                let actedPlayer = event.players[0],
                    injuredPlayer = event.players[1],
                    cardType = 'Yellow';

                if (offendingPlayerIds[event.user].includes(actedPlayer.playerId)) cardType = 'Red';
                else offendingPlayerIds[event.user].push(actedPlayer.playerId);

                violations[event.user].push({
                    cardType,
                    actedPlayer,
                    injuredPlayer,
                });
                yellowCards[event.user].push({
                    actedPlayer,
                    injuredPlayer,
                });
            }
        }

        logsText += `\n\nНарушения:\n\n`;

        logsText += `Игрок 1:\n===============\n`;
        for (let i = 0; i < violations[0].length; i++) {
            logsText += `(${violations[0][i].cardType} card) Injured: ${yellowCards[0][i].injuredPlayer.playerName}, Acted: ${yellowCards[0][i].actedPlayer.playerName}`;

            if (violations[0][i].cardType === 'Red') logsText += ' (kicked)';

            logsText += '\n';
        }
        logsText += `===============\n`;

        logsText += `\nИгрок 2:\n===============\n`;
        for (let i = 0; i < violations[1].length; i++) {
            logsText += `(${violations[1][i].cardType} card) Injured: ${yellowCards[1][i].injuredPlayer.playerName}, Acted: ${yellowCards[1][i].actedPlayer.playerName}`;

            if (violations[1][i].cardType === 'Red') logsText += ' (kicked)';

            logsText += '\n';
        }
        logsText += `===============\n`;


        logsText += '\n\nРейтинг карточек после матча:\n=============================\n';

        logsText += 'Игрок 1:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${user1.players[i].card.playerName}: ${user1.players[i].card.seasonRatingMarks[user1.players[i].card.seasonRatingMarks.length - 1]}\n`;
        }
        logsText += '=================\n';

        logsText += 'Игрок 2:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${user2.players[i].card.playerName}: ${user2.players[i].card.seasonRatingMarks[user2.players[i].card.seasonRatingMarks.length - 1]}\n`;
        }
        logsText += '=================\n';

        return logsText;
    }

    debugLogs.logsText = getLogsText_debug(user1, user2, debugLogs, matchLogs);
    //debug===========================================================================

    if (saveToDB) {
        let
            user1UpdateLastTeamQuery = prisma.user.update({
                where: {
                    id: user1.id,
                },
                data: {
                    lastTeam: JSON.stringify(user1.resultLastTeam)
                }
            }),
            user1UpdateAllPlayersQuery = prisma.user_players.update({
                where: {
                    userId: user1.id,
                },
                data: {
                    playersJson: JSON.stringify(user1.resultAllPlayers)
                }
            }),
            user2UpdateLastTeamQuery = prisma.user.update({
                where: {
                    id: user2.id,
                },
                data: {
                    lastTeam: JSON.stringify(user2.resultLastTeam)
                }
            }),
            user2UpdateAllPlayersQuery = prisma.user_players.update({
                where: {
                    userId: user2.id,
                },
                data: {
                    playersJson: JSON.stringify(user2.resultAllPlayers)
                }
            }),
            matchUpdateQuery = prisma.match.update({
                where: {
                    id: match.id
                },
                data: {
                    logs: JSON.stringify(resultLogs),
                    score: goals[0] + ':' + goals[1],
                }
            });

        await prisma.$transaction([user1UpdateLastTeamQuery, user1UpdateAllPlayersQuery, user2UpdateLastTeamQuery, user2UpdateAllPlayersQuery, matchUpdateQuery]);
    }

    return debugLogs;
}

async function playMatchManyTimes_v_16otr_v1(matchId, count) {
    let debugLogs = []; //d

    let overall = {
        winFirst: 0,
        winSecond: 0,
        draw: 0,
    };

    for (let i = 0; i < count; i++) {
        debugLogs.push((await playDebugMatch_v_16otr_v1(matchId, false)));

        let goals = debugLogs[i].score.split('-').map(item => {
            return +item;
        });

        if (goals[0] > goals[1]) overall.winFirst++;
        else if (goals[0] < goals[1]) overall.winSecond++;
        else overall.draw++;
    }

    debugLogs.push(overall);

    return debugLogs;
}


async function playDebugMatch_v_12_08_2022(matchId, saveToDB) {
    function findInjured_111(eventedUser, playersWithSkills, injuredPlayers) {
        let STAmPlayersCount = playersWithSkills.STAm.length,
            STAzPlayersCount = playersWithSkills.STAz.length,
            possibleInjuredPlayers = [],
            injuredPlayer;

        if (STAmPlayersCount) {
            for (let j = 0; j < playersWithSkills.STAm.length; j++) {
                let currPlayer = playersWithSkills.STAm[j];
                if (!injuredPlayers.includes(currPlayer.card.playerId)) possibleInjuredPlayers.push(currPlayer);
            }
        }

        if (!possibleInjuredPlayers.length && STAzPlayersCount) {
            for (let j = 0; j < playersWithSkills.STAz.length; j++) {
                let currPlayer = playersWithSkills.STAz[j];
                if (!injuredPlayers.includes(currPlayer.card.playerId)) possibleInjuredPlayers.push(currPlayer);
            }
        }

        if (!possibleInjuredPlayers.length) {
            for (let j = 0; j < 5; j++) {
                let currPlayer = eventedUser.players[j];
                if (!injuredPlayers.includes(currPlayer.card.playerId)) possibleInjuredPlayers.push(currPlayer);
            }

            if (!possibleInjuredPlayers.length) {
                for (let j = 0; j < 5; j++) possibleInjuredPlayers.push(eventedUser.players[j]);
            }
        }

        injuredPlayer = possibleInjuredPlayers[MathService.randomInteger(0, possibleInjuredPlayers.length - 1)];

        return injuredPlayer;
    }

    function findActed_111(anotherUser) {
        let actedPlayer = anotherUser.players[MathService.randomInteger(0, anotherUser.players.length - 2)];

        return actedPlayer;
    }


    const match = await prisma.match.findFirst({
        select: {
            id: true,
            player1: {
                select: {
                    id: true,
                    avatar: true,
                    lastTactic: true,
                    lastTeam: true,
                    players: {
                        select: {
                            playersJson: true
                        }
                    },
                },
            },
            player2: {
                select: {
                    id: true,
                    avatar: true,
                    lastTactic: true,
                    lastTeam: true,
                    players: {
                        select: {
                            playersJson: true
                        }
                    },
                }
            },
        },
        where: {
            id: matchId
        },
    });

    let
        matchLogs = [],
        user1 = {
            id: match.player1.id,
            avatar: match.player1.avatar,
            tactic: JSON.parse(match.player1.lastTactic),
            players: [],
            resultLastTeam: JSON.parse(match.player1.lastTeam),
            resultAllPlayers: JSON.parse(match.player1.players.playersJson),
        },
        user2 = {
            id: match.player2.id,
            avatar: match.player2.avatar,
            tactic: JSON.parse(match.player2.lastTactic),
            players: [],
            resultLastTeam: JSON.parse(match.player2.lastTeam),
            resultAllPlayers: JSON.parse(match.player2.players.playersJson),
        },
        playersOnPositions = [
            {
                'FW': [],
                'WG': [],
                'CM': [],
                'WB': [],
                'CD': [],
                'GK': [],
            },
            {
                'FW': [],
                'WG': [],
                'CM': [],
                'WB': [],
                'CD': [],
                'GK': [],
            }
        ],
        playersWithSkills = [
            {
                AGIp: [],
                TCKLp: [],
                PASp: [],
                STAz: [],
                STAm: [],
                AGIm: [],
            },
            {
                AGIp: [],
                TCKLp: [],
                PASp: [],
                STAz: [],
                STAm: [],
                AGIm: [],
            },
        ],
        T = [0, 0],
        goals = [0, 0],
        eventsArrs = [[], []], //d
        debugLogs = {
            matchId: match.id,
            score: null,
            user1: {
                id: user1.id,
                players: user1.players,
                playersAsm: [],
                homeBonus: 3,
                avatarBonus: 0,
                T: 0,
            },
            user2: {
                id: user2.id,
                players: user2.players,
                playersAsm: [],
                homeBonus: 0,
                avatarBonus: 0,
                T: 0,
            },
        }; //d


    // заполнение массивов players ссылками на этих же игроков из resultAllPlayers =====================================
    function sortPlayersById_1(a, b) {
        if (a.playerId < b.playerId) return -1;
        if (a.playerId > b.playerId) return 1;
        return 0;
    }

    user1.resultLastTeam.sort(sortPlayersById_1);
    user2.resultLastTeam.sort(sortPlayersById_1);
    user1.resultAllPlayers.sort(sortPlayersById_1);
    user2.resultAllPlayers.sort(sortPlayersById_1);

    let rapPlIdx = 0;
    for (let ltPlIdx = 0; ltPlIdx < user1.resultLastTeam.length; ltPlIdx++) {
        while (user1.resultAllPlayers[rapPlIdx].playerId !== user1.resultLastTeam[ltPlIdx].playerId) rapPlIdx++;

        user1.resultAllPlayers[rapPlIdx].seasonRatingMarks.push(6.6); //начальная оценка за матч

        user1.players.push({
            card: user1.resultAllPlayers[rapPlIdx],
            position: user1.resultLastTeam[ltPlIdx].position,
        });
    }

    rapPlIdx = 0;
    for (let ltPlIdx = 0; ltPlIdx < user2.resultLastTeam.length; ltPlIdx++) {
        while (user2.resultAllPlayers[rapPlIdx].playerId !== user2.resultLastTeam[ltPlIdx].playerId) rapPlIdx++;

        user2.resultAllPlayers[rapPlIdx].seasonRatingMarks.push(6.6); //начальная оценка за матч

        user2.players.push({
            card: user2.resultAllPlayers[rapPlIdx],
            position: user2.resultLastTeam[ltPlIdx].position,
        });
    }


    // сортировка игроков по возрастанию рейтинга (GK всегда последние)
    function sortPlayersByAverageRating(a, b) {
        if (a.card.isGoalKeeper) return 1;
        if (b.card.isGoalKeeper) return -1;

        if (a.card.averageRating < b.card.averageRating) return -1;
        if (a.card.averageRating > b.card.averageRating) return 1;

        return 0;
    }

    user1.players.sort(sortPlayersByAverageRating);
    user2.players.sort(sortPlayersByAverageRating);
    // заполнение массивов players ссылками на этих же игроков из resultAllPlayers =====================================


    user1.players.forEach((player) => {
        //распределение в массивах игроков на позициях
        playersOnPositions[0][player.position].push(player);

        let technicalSkills = {},
            physicalSkills = {};

        for (let skill in player.card.physicalSkills) physicalSkills[skill] = player.card.physicalSkills[skill];
        for (let skill in player.card.technicalSkills) technicalSkills[skill] = player.card.technicalSkills[skill];

        switch (player.position) {
            case 'FW':
                technicalSkills.shoot *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.agility *= 3;
                physicalSkills.jump *= 3;
                break;

            case 'WG':
                technicalSkills.cross *= 3;
                technicalSkills.shoot *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.agility *= 3;
                break;

            case 'CM':
                technicalSkills.pass *= 3;
                physicalSkills.agility *= 3;
                physicalSkills.strength *= 3;
                break;

            case 'CD':
                technicalSkills.tackling *= 3;
                physicalSkills.strength *= 3;
                physicalSkills.jump *= 3;
                break;

            case 'WB':
                technicalSkills.cross *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.jump *= 3;
                break;
        }

        if (player.card.physicalSkills.agility > 0) playersWithSkills[0].AGIp.push(player);
        else if (player.card.physicalSkills.agility < 0) playersWithSkills[0].AGIm.push(player);

        if (player.card.technicalSkills.tackling > 0) playersWithSkills[0].TCKLp.push(player);

        if (player.card.technicalSkills.pass > 0) playersWithSkills[0].PASp.push(player);

        if (player.card.physicalSkills.stamina < 0) playersWithSkills[0].STAm.push(player);
        else if (player.card.physicalSkills.stamina === 0) playersWithSkills[0].STAz.push(player);


        //получение asm игрока
        let phy = 0, te = 0, asm;

        for (let skill in physicalSkills) {
            phy += physicalSkills[skill];
        }
        for (let skill in technicalSkills) {
            te += technicalSkills[skill];
        }

        phy = Math.min(Math.max(1, phy), 5);
        te = Math.min(Math.max(1, te), 5);

        asm = (phy + te) + player.card.mood;
        asm = Math.min(Math.max(1, asm), 10);

        if (asm % 1 !== 0) asm += 0.5 * (player.card.mood < 0 ? -1 : 1);

        T[0] += asm;

        debugLogs.user1.playersAsm.push({
            playerId: player.card.playerId,
            playerName: player.card.playerName,
            asm,
        }); //d
    });
    user2.players.forEach((player) => {
        //распределение в массивах игроков на позициях
        playersOnPositions[1][player.position].push(player);

        let technicalSkills = {},
            physicalSkills = {};

        for (let skill in player.card.physicalSkills) physicalSkills[skill] = player.card.physicalSkills[skill];
        for (let skill in player.card.technicalSkills) technicalSkills[skill] = player.card.technicalSkills[skill];


        switch (player.position) {
            case 'FW':
                technicalSkills.shoot *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.agility *= 3;
                physicalSkills.jump *= 3;
                break;

            case 'WG':
                technicalSkills.cross *= 3;
                technicalSkills.shoot *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.agility *= 3;
                break;

            case 'CM':
                technicalSkills.pass *= 3;
                physicalSkills.agility *= 3;
                physicalSkills.strength *= 3;
                break;

            case 'CD':
                technicalSkills.tackling *= 3;
                physicalSkills.strength *= 3;
                physicalSkills.jump *= 3;
                break;

            case 'WB':
                technicalSkills.cross *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.jump *= 3;
                break;
        }

        if (player.card.physicalSkills.agility > 0) playersWithSkills[1].AGIp.push(player);
        else if (player.card.physicalSkills.agility < 0) playersWithSkills[1].AGIm.push(player);

        if (player.card.technicalSkills.tackling > 0) playersWithSkills[1].TCKLp.push(player);

        if (player.card.technicalSkills.pass > 0) playersWithSkills[1].PASp.push(player);

        if (player.card.physicalSkills.stamina < 0) playersWithSkills[1].STAm.push(player);
        else if (player.card.physicalSkills.stamina === 0) playersWithSkills[1].STAz.push(player);


        //получение asm игрока
        let phy = 0, te = 0, asm;

        for (let skill in physicalSkills) {
            phy += physicalSkills[skill];
        }
        for (let skill in technicalSkills) {
            te += technicalSkills[skill];
        }

        phy = Math.min(Math.max(1, phy), 5);
        te = Math.min(Math.max(1, te), 5);

        asm = (phy + te) + player.card.mood;
        asm = Math.min(Math.max(1, asm), 10);

        if (asm % 1 !== 0) asm += 0.5 * (player.card.mood < 0 ? -1 : 1);

        T[1] += asm;

        debugLogs.user2.playersAsm.push({
            playerId: player.card.playerId,
            playerName: player.card.playerName,
            asm,
        }); //d
    });


    T[0] += 3; //доп очки за домашнюю тиму
    if (user1.avatar !== user2.avatar) {
        if (avatarDefying[user1.avatar].includes(user2.avatar)) {
            T[0] += 3;

            debugLogs.user1.avatarBonus = 3;//debug
        }
        else if (avatarDefying[user2.avatar].includes(user1.avatar)) {
            T[1] += 3;

            debugLogs.user2.avatarBonus = 3;//debug
        }
    } // доп очки за контр тренеров

    debugLogs.user1.T = T[0]; //d
    debugLogs.user2.T = T[1]; //d


    let advantage = Math.abs(T[0] - T[1]),
        isEqual = false;

    if (advantage <= 5) {
        if (T[0] > T[1]) {
            T[1] = T[0];
        }
        else {
            T[0] = T[1];
        }

        isEqual = true;
    }
    else if (advantage <= 8) {
        if (T[0] > T[1]) {
            T[0] += 3;
        }
        else {
            T[1] += 3;
        }
    }
    else {
        if (T[0] > T[1]) {
            T[0] += advantage;
        }
        else {
            T[1] += advantage;
        }
    }

    debugLogs.user1.T_adv = T[0]; //d
    debugLogs.user2.T_adv = T[1]; //d


    function changeRating(player, ratingDiff) {
        player.card.seasonRatingMarks[player.card.seasonRatingMarks.length - 1] = Number((player.card.seasonRatingMarks[player.card.seasonRatingMarks.length - 1] + ratingDiff).toFixed(2));
    }

    let xG = [0, 0], momentsCount = [0, 0], xG1 = [0, 0], xG2 = [0, 0], lastPotGoalMinute = null;


    matchLogs.push({
        minute: 0,
        user: null,
        momentType: null,
        result: 'Match started!'
    });


    //первый тайм ===================================================================
    momentsCount[0] = Math.round(T[0] / ((T[0] + T[1]) / 15));
    momentsCount[1] = 15 - momentsCount[0];

    for (let i = 3; i <= 45; i += 3) {
        let player = MathService.randomFloat(0, T[0] + T[1]) <= T[0] ? 0 : 1,
            randNum = MathService.randomInteger(1, 10),
            momentType = randNum >= 1 && randNum <= 2 ? 13 : randNum >= 3 && randNum <= 6 ? 12 : 11,
            momentWeight = 0.5 * (momentType - 9);

        if (momentsCount[player] === 0) player = (player + 1) % 2;
        momentsCount[player]--;


        T[player] += momentWeight; // чтобы получить вес 1/1.5/2 (11 -9. 12 - 9, 13 - 9)
        xG[player] += momentWeight;
        xG1[player] += momentWeight;


        matchLogs.push({
            minute: i,
            user: player,
            momentType,
            result: ''
        });
        eventsArrs[player].push(momentType); //d
    }


    xG[0] /= 10;
    xG[1] /= 10;
    xG1[0] /= 10;
    xG1[1] /= 10;
    //первый тайм ===================================================================


    eventsArrs[0].push("==="); //d
    eventsArrs[1].push("==="); //d


    //второй тайм ===================================================================
    if (isEqual) {
        momentsCount[0] = 7;
        momentsCount[1] = 8;
    }
    else {
        momentsCount[0] = Math.round(T[0] / ((T[0] + T[1]) / 15));
        momentsCount[1] = 15 - momentsCount[0];
    }


    for (let i = 48; i <= 90; i += 3) {
        let player = MathService.randomFloat(0, T[0] + T[1]) <= T[0] ? 0 : 1,
            randNum = MathService.randomInteger(1, 10),
            momentType = randNum >= 1 && randNum <= 2 ? 13 : randNum >= 3 && randNum <= 6 ? 12 : 11,
            momentWeight = 0.5 * (momentType - 9);

        if (momentsCount[player] === 0) player = (player + 1) % 2;
        momentsCount[player]--;


        T[player] += momentWeight; // чтобы получить вес 1/1.5/2 (11 -9. 12 - 9, 13 - 9)
        xG[player] += momentWeight;
        xG2[player] += momentWeight;


        matchLogs.push({
            minute: i,
            user: player,
            momentType,
            result: ''
        });
        eventsArrs[player].push(momentType); //d
    }

    xG[0] /= 10;
    xG[1] /= 10;
    xG2[0] /= 10;
    xG2[1] /= 10;
    //второй тайм ===================================================================


    for (let i = matchLogs.length - 1; i > 0; i--) {
        if (matchLogs[i].momentType === 13) {
            lastPotGoalMinute = matchLogs[i].minute;
            break;
        }
    }

    let playersWithYellowCards = [[], []], injuredPlayers = [[], []], kickedPlayers = [[], []];

    xG[0] = xG1[0];
    xG[1] = xG1[1];

    for (let i = 0; i < 30; i++) {
        // добавляем xG первого тайма
        if (i === 15) {
            xG[0] += xG2[0];
            xG[1] += xG2[1];
        }


        let event = matchLogs[i + 1];

        let eventCode,
            eventedUser, scoredUser, anotherUser,
            AGIpPlayersCount, TCKLpPlayersCount, PASpPlayersCount, AGImPlayersCount, STAmLength, STAzLength, // для удобства
            actedPlayer, possibleActedPlayers, injuredPlayer;

        switch (event.momentType) {
            case 11:
                eventedUser = event.user === 0 ? user1 : user2;
                anotherUser = event.user === 0 ? user2 : user1;

                eventCode = MathService.randomInteger(111, 115);

                switch (eventCode) {
                    case 111:
                        injuredPlayer = findInjured_111(eventedUser, playersWithSkills[event.user], injuredPlayers[event.user]);
                        injuredPlayers[event.user].push(injuredPlayer.card.playerId);
                        changeRating(injuredPlayer, -0.2);

                        actedPlayer = findActed_111(anotherUser);
                        actedPlayer.card.seasonYellowCardsCount++;
                        playersWithYellowCards[(event.user + 1) % 2].push(actedPlayer.card.playerId);
                        changeRating(actedPlayer, -0.4);

                        if (playersWithYellowCards[(event.user + 1) % 2].includes(actedPlayer.card.playerId)) {
                            kickedPlayers[(event.user + 1) % 2].push(actedPlayer);
                            actedPlayer.card.unavailableMatchesCount = 4;

                            // удаление из массива игроков
                            for (let plIdx = 0; plIdx < anotherUser.players.length; plIdx++) {
                                if (anotherUser.players[plIdx].card.playerId === actedPlayer.card.playerId) {
                                    anotherUser.players.splice(plIdx, 1);
                                    break;
                                }
                            }

                            // удаление из игроков на позициях
                            for (let plIdx = 0; plIdx < playersOnPositions[(event.user + 1) % 2][actedPlayer.position].length; plIdx++) {
                                if (playersOnPositions[(event.user + 1) % 2][actedPlayer.position][plIdx].card.playerId === actedPlayer.card.playerId) {
                                    playersOnPositions[(event.user + 1) % 2][actedPlayer.position].splice(plIdx, 1);
                                    break;
                                }
                            }

                            // удаление из игроков по скиллах ===========================================================================
                            if (actedPlayer.card.physicalSkills.agility > 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].AGIp.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].AGIp[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].AGIp.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }
                            else if (actedPlayer.card.physicalSkills.agility < 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].AGIm.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].AGIm[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].AGIm.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }

                            if (actedPlayer.card.physicalSkills.stamina === 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].STAz.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].STAz[plIdx].playerId === actedPlayer.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].STAz.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }
                            else if (actedPlayer.card.physicalSkills.stamina < 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].STAm.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].STAm[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].STAm.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }

                            if (actedPlayer.card.technicalSkills.tackling > 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].TCKLp.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].TCKLp[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].TCKLp.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }

                            if (actedPlayer.card.technicalSkills.pass > 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].PASp.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].PASp[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].PASp.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }
                            // удаление из игроков по скиллах ===========================================================================
                        }

                        if (actedPlayer.card.seasonYellowCardsCount === 8) {
                            //unavailable
                        }

                        matchLogs[i + 1].result = `${injuredPlayer.card.playerName} is injured - ${actedPlayer.card.playerName} will be punished by a yellow card`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: -0.4,
                            },
                            {
                                playerId: injuredPlayer.card.playerId,
                                playerName: injuredPlayer.card.playerName,
                                position: injuredPlayer.position,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;

                    case 112:
                        AGImPlayersCount = playersWithSkills[event.user].AGIm.length;

                        if (AGImPlayersCount) actedPlayer = playersWithSkills[event.user].AGIm[MathService.randomInteger(0, AGImPlayersCount - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].result = `Unlucky dribbling - ${actedPlayer.card.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;

                    case 113:
                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];

                        if (possibleActedPlayers.length) actedPlayer = possibleActedPlayers[MathService.randomInteger(0, possibleActedPlayers.length - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(0, eventedUser.players.length - 2)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].result = `Unlucky cross - ${actedPlayer.card.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;

                    case 114:
                        matchLogs[i + 1].result = `Slow passing in the midfield`;
                        matchLogs[i + 1].players = [];
                        break;

                    case 115:
                        actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].result = `${actedPlayer.card.playerName} made a mistake`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;
                }
                break;

            case 12:
                eventedUser = event.user === 0 ? user1 : user2;
                anotherUser = event.user === 0 ? user2 : user1;

                eventCode = MathService.randomInteger(121, 125);

                switch (eventCode) {
                    case 121:
                        actedPlayer = eventedUser.players[MathService.randomInteger(0, eventedUser.players.length - 2)];

                        matchLogs[i + 1].result = `Shot off target`;
                        matchLogs[i + 1].players = [{
                            playerId: actedPlayer.card.playerId,
                            playerName: actedPlayer.card.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0,
                        }];
                        break;

                    case 122:
                        AGIpPlayersCount = playersWithSkills[event.user].AGIp.length;

                        if (AGIpPlayersCount) actedPlayer = playersWithSkills[event.user].AGIp[MathService.randomInteger(0, AGIpPlayersCount - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(eventedUser.players.length - 6, eventedUser.players.length - 2)];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].result = `Successful dribbling by ${actedPlayer.card.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: 0.2,
                            }
                        ];
                        break;

                    case 123:
                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];
                        possibleActedPlayers.sort(function (a, b) {
                            if (a.card.averageRating < b.card.averageRating) return -1;
                            if (a.card.averageRating > b.card.averageRating) return 1;
                            return 0;
                        });

                        actedPlayer = possibleActedPlayers[possibleActedPlayers.length - 1];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].result = `Promising cross by ${actedPlayer.card.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: 0.2,
                            }
                        ];
                        break;

                    case 124:
                        TCKLpPlayersCount = playersWithSkills[event.user].TCKLp.length;

                        if (TCKLpPlayersCount) actedPlayer = playersWithSkills[event.user].TCKLp[MathService.randomInteger(0, TCKLpPlayersCount - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(eventedUser.players.length - 6, eventedUser.players.length - 2)];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].result = `Interception by ${actedPlayer.card.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: 0.2,
                            }
                        ];
                        break;

                    case 125:
                        PASpPlayersCount = playersWithSkills[event.user].PASp.length;

                        if (PASpPlayersCount) actedPlayer = playersWithSkills[event.user].PASp[MathService.randomInteger(0, PASpPlayersCount - 1)];
                        else {
                            playersOnPositions[event.user].CM.sort(function (a, b) {
                                if (a.card.averageRating < b.card.averageRating) return -1;
                                if (a.card.averageRating > b.card.averageRating) return 1;
                                return 0;
                            });
                            actedPlayer = playersOnPositions[event.user].CM[playersOnPositions[event.user].CM.length - 1];
                        }

                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].result = `Promising through pass by ${actedPlayer.card.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: 0.2,
                            }
                        ];
                        break;
                }
                break;

            case 13:
                let chanceNumbers = Math.floor(xG[event.user] / 0.25);

                if (event.minute === lastPotGoalMinute && goals[0] === goals[1]) chanceNumbers++;

                let goal = MathService.randomInteger(1, 10) <= chanceNumbers ? 1 : 0;

                if (goal) {
                    let scoredPlayer, assistantPlayer, possibleScoredPlayers;

                    scoredUser = event.user === 0 ? user1 : user2;
                    anotherUser = event.user === 0 ? user2 : user1;

                    goals[event.user]++;
                    xG[event.user] = Math.max(0, xG[event.user] - 1); //чтобы xG игрока не был меньше 0

                    switch (scoredUser.tactic.teamFocus) {
                        case 'wing-play':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                eventCode = 131;


                                if (playersOnPositions[event.user].FW.length) {
                                    scoredPlayer = playersOnPositions[event.user].FW[0];

                                    if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                    else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                }
                                else if (playersOnPositions[event.user].WG.length) {
                                    let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                    scoredPlayer = playersOnPositions[event.user].WG[idx];

                                    if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                    else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                }
                                else if (playersOnPositions[event.user].CM.length) {
                                    let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                    scoredPlayer = playersOnPositions[event.user].CM[idx];

                                    if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                    else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                        let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                    }
                                }

                                changeRating(scoredPlayer, 0.8);
                                changeRating(assistantPlayer, 0.8);


                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }

                                matchLogs[i + 1].result = `${scoredPlayer.card.playerName} scores a header delivered by ${assistantPlayer.card.playerName}`;
                                matchLogs[i + 1].players = [
                                    {
                                        playerId: scoredPlayer.card.playerId,
                                        playerName: scoredPlayer.card.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerId: assistantPlayer.card.playerId,
                                        playerName: assistantPlayer.card.playerName,
                                        position: assistantPlayer.position,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    },
                                ];
                            }
                            else {
                                eventCode = MathService.randomInteger(131, 136);

                                switch (eventCode) {
                                    case 131:
                                        if (playersOnPositions[event.user].FW.length) {
                                            scoredPlayer = playersOnPositions[event.user].FW[0];

                                            if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        }
                                        else if (playersOnPositions[event.user].WG.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].WG[idx];

                                            if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        }
                                        else if (playersOnPositions[event.user].CM.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];

                                            if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `${scoredPlayer.card.playerName} scores a header delivered by ${assistantPlayer.card.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.card.playerId,
                                                playerName: assistantPlayer.card.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        break;

                                    case 132:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.4);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.card.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.4,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 133:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `${scoredPlayer.card.playerName} scores after solo breakthrough`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 134:
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            // scoredPlayer = (FW|WG)
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                            // assistantPlayer = CM
                                            if (playersOnPositions[event.user].CM.length) {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                            }
                                            // assistantPlayer = (CD|WB)
                                            else {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                        }
                                        else {
                                            // scoredPlayer = CM
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];


                                            // assistantPlayer = (CD|WB)
                                            if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                            // assistantPlayer = CM
                                            else {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.card.playerName} runs and ${assistantPlayer.card.playerName} provides an assist`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.card.playerId,
                                                playerName: assistantPlayer.card.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 135:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.card.playerName} used opponent’s silly mistake`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 136:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.card.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.5,
                                            }
                                        ];
                                        break;
                                }
                            }
                            break;

                        case 'midfield':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                eventCode = 134;


                                if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                    // scoredPlayer = (FW|WG)
                                    possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                    scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                    // assistantPlayer = CM
                                    if (playersOnPositions[event.user].CM.length) {
                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                    }
                                    // assistantPlayer = (CD|WB)
                                    else {
                                        let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                    }
                                }
                                else {
                                    // scoredPlayer = CM
                                    let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                    scoredPlayer = playersOnPositions[event.user].CM[idx];


                                    // assistantPlayer = (CD|WB)
                                    if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                        let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                    }
                                    // assistantPlayer = CM
                                    else {
                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                    }
                                }

                                changeRating(scoredPlayer, 0.8);
                                changeRating(assistantPlayer, 0.8);


                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }

                                matchLogs[i + 1].result = `Goal! ${scoredPlayer.card.playerName} runs and ${assistantPlayer.card.playerName} provides an assist`;
                                matchLogs[i + 1].players = [
                                    {
                                        playerId: scoredPlayer.card.playerId,
                                        playerName: scoredPlayer.card.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerId: assistantPlayer.card.playerId,
                                        playerName: assistantPlayer.card.playerName,
                                        position: assistantPlayer.position,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    }
                                ];
                            }
                            else {
                                eventCode = MathService.randomInteger(131, 136);

                                switch (eventCode) {
                                    case 131:
                                        if (playersOnPositions[event.user].FW.length) {
                                            scoredPlayer = playersOnPositions[event.user].FW[0];

                                            if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        }
                                        else if (playersOnPositions[event.user].WG.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].WG[idx];

                                            if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        }
                                        else if (playersOnPositions[event.user].CM.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];

                                            if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `${scoredPlayer.card.playerName} scores a header delivered by ${assistantPlayer.card.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.card.playerId,
                                                playerName: assistantPlayer.card.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        break;

                                    case 132:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.4);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.card.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.4,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 133:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `${scoredPlayer.card.playerName} scores after solo breakthrough`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 134:
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            // scoredPlayer = (FW|WG)
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                            // assistantPlayer = CM
                                            if (playersOnPositions[event.user].CM.length) {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                            }
                                            // assistantPlayer = (CD|WB)
                                            else {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                        }
                                        else {
                                            // scoredPlayer = CM
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];


                                            // assistantPlayer = (CD|WB)
                                            if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                            // assistantPlayer = CM
                                            else {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.card.playerName} runs and ${assistantPlayer.card.playerName} provides an assist`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.card.playerId,
                                                playerName: assistantPlayer.card.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 135:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.card.playerName} used opponent’s silly mistake`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 136:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.card.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.5,
                                            }
                                        ];
                                        break;
                                }
                            }
                            break;

                        case 'stepUp':
                            eventCode = MathService.randomInteger(131, 136);
                            switch (eventCode) {
                                case 131:
                                    if (playersOnPositions[event.user].FW.length) {
                                        scoredPlayer = playersOnPositions[event.user].FW[0];

                                        if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                    }
                                    else if (playersOnPositions[event.user].WG.length) {
                                        let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                        scoredPlayer = playersOnPositions[event.user].WG[idx];

                                        if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                        else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                    }
                                    else if (playersOnPositions[event.user].CM.length) {
                                        let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                        scoredPlayer = playersOnPositions[event.user].CM[idx];

                                        if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                        else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                            let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                        }
                                    }

                                    changeRating(scoredPlayer, 0.8);
                                    changeRating(assistantPlayer, 0.8);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].result = `${scoredPlayer.card.playerName} scores a header delivered by ${assistantPlayer.card.playerName}`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerId: assistantPlayer.card.playerId,
                                            playerName: assistantPlayer.card.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        },
                                    ];
                                    break;

                                case 132:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 0.4);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.card.playerName}`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.4,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 133:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 1);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].result = `${scoredPlayer.card.playerName} scores after solo breakthrough`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 134:
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        // scoredPlayer = (FW|WG)
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                        // assistantPlayer = CM
                                        if (playersOnPositions[event.user].CM.length) {
                                            assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                        }
                                        // assistantPlayer = (CD|WB)
                                        else {
                                            let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                        }
                                    }
                                    else {
                                        // scoredPlayer = CM
                                        let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                        scoredPlayer = playersOnPositions[event.user].CM[idx];


                                        // assistantPlayer = (CD|WB)
                                        if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                            let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                        }
                                        // assistantPlayer = CM
                                        else {
                                            assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                        }
                                    }

                                    changeRating(scoredPlayer, 0.8);
                                    changeRating(assistantPlayer, 0.8);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].result = `Goal! ${scoredPlayer.card.playerName} runs and ${assistantPlayer.card.playerName} provides an assist`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerId: assistantPlayer.card.playerId,
                                            playerName: assistantPlayer.card.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 135:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 1);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].result = `Goal! ${scoredPlayer.card.playerName} used opponent’s silly mistake`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 136:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 0.8);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                    }

                                    matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.card.playerName}`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.5,
                                        }
                                    ];
                                    break;
                            }
                            break;
                    }


                    //поиск виноватого игрока ================================================
                    let value = Math.random(),
                        anotherUserIdx = (event.user + 1) % 2,
                        guiltPlayer;

                    if (value <= 0.15) guiltPlayer = playersOnPositions[anotherUserIdx].GK[0];
                    else if (value <= 0.30) {
                        let possibleGuiltPlayers = [...playersOnPositions[anotherUserIdx].FW, ...playersOnPositions[anotherUserIdx].WG];
                        guiltPlayer = possibleGuiltPlayers[MathService.randomInteger(0, possibleGuiltPlayers.length - 1)];
                    }
                    else if (value <= 0.60) guiltPlayer = playersOnPositions[anotherUserIdx].CM[MathService.randomInteger(0, playersOnPositions[anotherUserIdx].CM.length - 1)];
                    else {
                        let possibleGuiltPlayers = [...playersOnPositions[anotherUserIdx].CD, ...playersOnPositions[anotherUserIdx].WB];
                        guiltPlayer = possibleGuiltPlayers[MathService.randomInteger(0, possibleGuiltPlayers.length - 1)];
                    }

                    changeRating(guiltPlayer, -0.2);

                    matchLogs[i + 1].players.push({
                        playerId: guiltPlayer.card.playerId,
                        playerName: guiltPlayer.card.playerName,
                        position: guiltPlayer.position,
                        role: 'guilt',
                        ratingDiff: -0.2,
                    });
                    //поиск виноватого игрока ================================================

                    // -0.2 пропустившим гол игрокам
                    for (let playerIndex = 0; playerIndex < anotherUser.players.length; playerIndex++) changeRating(anotherUser.players[playerIndex], -0.2);
                    matchLogs[i + 1].players.push({
                        playerName: 'Another team players',
                        position: 'Another team positions',
                        role: 'none',
                        ratingDiff: -0.2,
                    });
                }
                else {
                    eventCode = 130;

                    let anotherUser = event.user === 0 ? user2 : user1;

                    actedPlayer = anotherUser.players[anotherUser.players.length - 1];
                    changeRating(actedPlayer, 0.4);

                    matchLogs[i + 1].result = `Shot on target`;
                    matchLogs[i + 1].players = [
                        {
                            playerId: actedPlayer.card.playerId,
                            playerName: actedPlayer.card.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.4,
                        }
                    ];
                }
                break;
        }

        matchLogs[i + 1].code = eventCode;
        matchLogs[i + 1].score = goals[0] + '-' + goals[1];
    }


    // рассчёт рейтинга игроков за сезон (среднее арифм)===========================
    for (let playerIndex = 0; playerIndex < user1.players.length; playerIndex++) {
        let sumOfMarks = 0;

        for (let marksIndex = 0; marksIndex < user1.players[playerIndex].card.seasonRatingMarks.length; marksIndex++) {
            sumOfMarks += user1.players[playerIndex].card.seasonRatingMarks[marksIndex];
        }

        user1.players[playerIndex].card.averageRating = Number((sumOfMarks / user1.players[playerIndex].card.seasonRatingMarks.length).toFixed(2));
    }

    for (let playerIndex = 0; playerIndex < kickedPlayers[0].length; playerIndex++) {
        let sumOfMarks = 0;

        for (let marksIndex = 0; marksIndex < kickedPlayers[0][playerIndex].card.seasonRatingMarks.length; marksIndex++) {
            sumOfMarks += kickedPlayers[0][playerIndex].card.seasonRatingMarks[marksIndex];
        }

        kickedPlayers[0][playerIndex].card.averageRating = Number((sumOfMarks / kickedPlayers[0][playerIndex].card.seasonRatingMarks.length).toFixed(2));
    }


    for (let playerIndex = 0; playerIndex < user2.players.length; playerIndex++) {
        let sumOfMarks = 0;

        for (let marksIndex = 0; marksIndex < user2.players[playerIndex].card.seasonRatingMarks.length; marksIndex++) {
            sumOfMarks += user2.players[playerIndex].card.seasonRatingMarks[marksIndex];
        }

        user2.players[playerIndex].card.averageRating = Number((sumOfMarks / user2.players[playerIndex].card.seasonRatingMarks.length).toFixed(2));
    }

    for (let playerIndex = 0; playerIndex < kickedPlayers[1].length; playerIndex++) {
        let sumOfMarks = 0;

        for (let marksIndex = 0; marksIndex < kickedPlayers[1][playerIndex].card.seasonRatingMarks.length; marksIndex++) {
            sumOfMarks += kickedPlayers[1][playerIndex].card.seasonRatingMarks[marksIndex];
        }

        kickedPlayers[1][playerIndex].card.averageRating = Number((sumOfMarks / kickedPlayers[1][playerIndex].card.seasonRatingMarks.length).toFixed(2));
    }
    // рассчёт рейтинга игроков за сезон (среднее арифм)===========================


    // изменение статуса unavailable для всех игроков юзеров===========================
    for (let plIdx = 0; plIdx < user1.resultAllPlayers; plIdx++) {
        let currPlayer = user1.resultAllPlayers[plIdx];
        if (currPlayer.unavailableMatchesCount > 0) currPlayer.unavailableMatchesCount--;
    }

    for (let plIdx = 0; plIdx < user2.resultAllPlayers; plIdx++) {
        let currPlayer = user2.resultAllPlayers[plIdx];
        if (currPlayer.unavailableMatchesCount > 0) currPlayer.unavailableMatchesCount--;
    }
    // изменение статуса unavailable для всех игроков юзеров===========================


    user1.players = user1.players.concat(kickedPlayers[0]);
    user2.players = user2.players.concat(kickedPlayers[1]);

    let resultLogs = {
        user1: {
            id: user1.id,
            players: user1.players.map(player => {
                return {
                    playerId: player.card.playerId,
                    playerName: player.card.playerName,
                    head: player.card.head,
                    body: player.card.body,
                    clothing: player.card.clothing,
                    hair: player.card.hair,
                };
            })
        },
        user2: {
            id: user2.id,
            players: user2.players.map(player => {
                return {
                    playerId: player.card.playerId,
                    playerName: player.card.playerName,
                    head: player.card.head,
                    body: player.card.body,
                    clothing: player.card.clothing,
                    hair: player.card.hair,
                };
            })
        },
        matchEvents: matchLogs
    };


    //debug===========================================================================
    debugLogs.logs = resultLogs; //d
    debugLogs.score = goals[0] + '-' + goals[1]; //d
    debugLogs.user1.totalEvents = eventsArrs[0].join(' '); //d
    debugLogs.user2.totalEvents = eventsArrs[1].join(' '); //d


    function getLogsText_debug(user1, user2, debugLogs, matchLogs) {
        let logsText = '';

        logsText += 'Звёзды игроков:\n=============================\n';

        logsText += 'Игрок 1:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${debugLogs.user1.playersAsm[i].playerName}: ${debugLogs.user1.playersAsm[i].asm}\n`;
        }
        logsText += '=================\n';

        logsText += 'Игрок 2:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${debugLogs.user2.playersAsm[i].playerName}: ${debugLogs.user2.playersAsm[i].asm}\n`;
        }
        logsText += '=================\n';


        logsText += '\n\nРейтинг карточек перед матчем:\n=============================\n';

        logsText += 'Игрок 1:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${user1.players[i].card.playerName}: 6.6\n`;
        }
        logsText += '=================\n';

        logsText += 'Игрок 2:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${user2.players[i].card.playerName}: 6.6\n`;
        }
        logsText += '=================\n';


        logsText += '\n\nЛоги матча:\n=============================\n';
        for (let i = 1; i < matchLogs.length; i++) {
            let playersRatingString = '';

            for (let j = 0; j < matchLogs[i].players.length; j++) {
                playersRatingString += `${matchLogs[i].players[j].playerName} (${matchLogs[i].players[j].ratingDiff}), `;
            }

            playersRatingString = playersRatingString.substring(0, playersRatingString.length - 2);

            logsText += `${matchLogs[i].minute} минута, игрок ${matchLogs[i].user + 1}, событие ${matchLogs[i].momentType}.\nРезультат: ${matchLogs[i].result}.\nИзменение рейтинга: ${playersRatingString}.\n====================================\n`;
        }


        logsText += `\n\nСчёт: ${goals[0]}-${goals[1]}\n`;


        let yellowCards = [[], []], violations = [[], []], offendingPlayerIds = [[], []];
        for (let i = 1; i < matchLogs.length; i++) {
            let event = matchLogs[i];
            if (event.momentType === 11 && event.result.endsWith('card')) {
                let actedPlayer = event.players[0],
                    injuredPlayer = event.players[1],
                    cardType = 'Yellow';

                if (offendingPlayerIds[event.user].includes(actedPlayer.playerId)) cardType = 'Red';
                else offendingPlayerIds[event.user].push(actedPlayer.playerId);

                violations[event.user].push({
                    cardType,
                    actedPlayer,
                    injuredPlayer,
                });
                yellowCards[event.user].push({
                    actedPlayer,
                    injuredPlayer,
                });
            }
        }

        logsText += `\n\nНарушения:\n\n`;

        logsText += `Игрок 1:\n===============\n`;
        for (let i = 0; i < violations[0].length; i++) {
            logsText += `(${violations[0][i].cardType} card) Injured: ${yellowCards[0][i].injuredPlayer.playerName}, Acted: ${yellowCards[0][i].actedPlayer.playerName}`;

            if (violations[0][i].cardType === 'Red') logsText += ' (kicked)';

            logsText += '\n';
        }
        logsText += `===============\n`;

        logsText += `\nИгрок 2:\n===============\n`;
        for (let i = 0; i < violations[1].length; i++) {
            logsText += `(${violations[1][i].cardType} card) Injured: ${yellowCards[1][i].injuredPlayer.playerName}, Acted: ${yellowCards[1][i].actedPlayer.playerName}`;

            if (violations[1][i].cardType === 'Red') logsText += ' (kicked)';

            logsText += '\n';
        }
        logsText += `===============\n`;


        logsText += '\n\nРейтинг карточек после матча:\n=============================\n';

        logsText += 'Игрок 1:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${user1.players[i].card.playerName}: ${user1.players[i].card.seasonRatingMarks[user1.players[i].card.seasonRatingMarks.length - 1]}\n`;
        }
        logsText += '=================\n';

        logsText += 'Игрок 2:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${user2.players[i].card.playerName}: ${user2.players[i].card.seasonRatingMarks[user2.players[i].card.seasonRatingMarks.length - 1]}\n`;
        }
        logsText += '=================\n';

        return logsText;
    }

    debugLogs.logsText = getLogsText_debug(user1, user2, debugLogs, matchLogs);
    //debug===========================================================================

    if (saveToDB) {
        let
            user1UpdateLastTeamQuery = prisma.user.update({
                where: {
                    id: user1.id,
                },
                data: {
                    lastTeam: JSON.stringify(user1.resultLastTeam)
                }
            }),
            user1UpdateAllPlayersQuery = prisma.user_players.update({
                where: {
                    userId: user1.id,
                },
                data: {
                    playersJson: JSON.stringify(user1.resultAllPlayers)
                }
            }),
            user2UpdateLastTeamQuery = prisma.user.update({
                where: {
                    id: user2.id,
                },
                data: {
                    lastTeam: JSON.stringify(user2.resultLastTeam)
                }
            }),
            user2UpdateAllPlayersQuery = prisma.user_players.update({
                where: {
                    userId: user2.id,
                },
                data: {
                    playersJson: JSON.stringify(user2.resultAllPlayers)
                }
            }),
            matchUpdateQuery = prisma.match.update({
                where: {
                    id: match.id
                },
                data: {
                    logs: JSON.stringify(resultLogs),
                    score: goals[0] + ':' + goals[1],
                }
            });

        await prisma.$transaction([user1UpdateLastTeamQuery, user1UpdateAllPlayersQuery, user2UpdateLastTeamQuery, user2UpdateAllPlayersQuery, matchUpdateQuery]);
    }

    return debugLogs;
}

async function playMatchManyTimes_v_12_08_2022(matchId, count) {
    let debugLogs = []; //d

    let overall = {
        winFirst: 0,
        winSecond: 0,
        draw: 0,
    };

    for (let i = 0; i < count; i++) {
        debugLogs.push((await playDebugMatch_v_12_08_2022(matchId, false)));

        let goals = debugLogs[i].score.split('-').map(item => {
            return +item;
        });

        if (goals[0] > goals[1]) overall.winFirst++;
        else if (goals[0] < goals[1]) overall.winSecond++;
        else overall.draw++;
    }

    debugLogs.push(overall);

    return debugLogs;
}


async function playDebugMatch_v_12_08_2022_2(matchId, saveToDB) {
    function findInjured_111(eventedUser, playersWithSkills, injuredPlayers) {
        let STAmPlayersCount = playersWithSkills.STAm.length,
            STAzPlayersCount = playersWithSkills.STAz.length,
            possibleInjuredPlayers = [],
            injuredPlayer;

        if (STAmPlayersCount) {
            for (let j = 0; j < playersWithSkills.STAm.length; j++) {
                let currPlayer = playersWithSkills.STAm[j];
                if (!injuredPlayers.includes(currPlayer.card.playerId)) possibleInjuredPlayers.push(currPlayer);
            }
        }

        if (!possibleInjuredPlayers.length && STAzPlayersCount) {
            for (let j = 0; j < playersWithSkills.STAz.length; j++) {
                let currPlayer = playersWithSkills.STAz[j];
                if (!injuredPlayers.includes(currPlayer.card.playerId)) possibleInjuredPlayers.push(currPlayer);
            }
        }

        if (!possibleInjuredPlayers.length) {
            for (let j = 0; j < 5; j++) {
                let currPlayer = eventedUser.players[j];
                if (!injuredPlayers.includes(currPlayer.card.playerId)) possibleInjuredPlayers.push(currPlayer);
            }

            if (!possibleInjuredPlayers.length) {
                for (let j = 0; j < 5; j++) possibleInjuredPlayers.push(eventedUser.players[j]);
            }
        }

        injuredPlayer = possibleInjuredPlayers[MathService.randomInteger(0, possibleInjuredPlayers.length - 1)];

        return injuredPlayer;
    }

    function findActed_111(anotherUser) {
        let actedPlayer = anotherUser.players[MathService.randomInteger(0, anotherUser.players.length - 2)];

        return actedPlayer;
    }


    const match = await prisma.match.findFirst({
        select: {
            id: true,
            player1: {
                select: {
                    id: true,
                    avatar: true,
                    lastTactic: true,
                    lastTeam: true,
                    players: {
                        select: {
                            playersJson: true
                        }
                    },
                },
            },
            player2: {
                select: {
                    id: true,
                    avatar: true,
                    lastTactic: true,
                    lastTeam: true,
                    players: {
                        select: {
                            playersJson: true
                        }
                    },
                }
            },
        },
        where: {
            id: matchId
        },
    });

    let
        matchLogs = [],
        user1 = {
            id: match.player1.id,
            avatar: match.player1.avatar,
            tactic: JSON.parse(match.player1.lastTactic),
            players: [],
            resultLastTeam: JSON.parse(match.player1.lastTeam),
            resultAllPlayers: JSON.parse(match.player1.players.playersJson),
        },
        user2 = {
            id: match.player2.id,
            avatar: match.player2.avatar,
            tactic: JSON.parse(match.player2.lastTactic),
            players: [],
            resultLastTeam: JSON.parse(match.player2.lastTeam),
            resultAllPlayers: JSON.parse(match.player2.players.playersJson),
        },
        playersOnPositions = [
            {
                'FW': [],
                'WG': [],
                'CM': [],
                'WB': [],
                'CD': [],
                'GK': [],
            },
            {
                'FW': [],
                'WG': [],
                'CM': [],
                'WB': [],
                'CD': [],
                'GK': [],
            }
        ],
        playersWithSkills = [
            {
                AGIp: [],
                TCKLp: [],
                PASp: [],
                STAz: [],
                STAm: [],
                AGIm: [],
            },
            {
                AGIp: [],
                TCKLp: [],
                PASp: [],
                STAz: [],
                STAm: [],
                AGIm: [],
            },
        ],
        T = [0, 0],
        goals = [0, 0],
        eventsArrs = [[], []], //d
        debugLogs = {
            matchId: match.id,
            score: null,
            user1: {
                id: user1.id,
                players: user1.players,
                playersAsm: [],
                homeBonus: 3,
                avatarBonus: 0,
                T: 0,
            },
            user2: {
                id: user2.id,
                players: user2.players,
                playersAsm: [],
                homeBonus: 0,
                avatarBonus: 0,
                T: 0,
            },
        }; //d


    // заполнение массивов players ссылками на этих же игроков из resultAllPlayers =====================================
    function sortPlayersById_1(a, b) {
        if (a.playerId < b.playerId) return -1;
        if (a.playerId > b.playerId) return 1;
        return 0;
    }

    user1.resultLastTeam.sort(sortPlayersById_1);
    user2.resultLastTeam.sort(sortPlayersById_1);
    user1.resultAllPlayers.sort(sortPlayersById_1);
    user2.resultAllPlayers.sort(sortPlayersById_1);

    let rapPlIdx = 0;
    for (let ltPlIdx = 0; ltPlIdx < user1.resultLastTeam.length; ltPlIdx++) {
        while (user1.resultAllPlayers[rapPlIdx].playerId !== user1.resultLastTeam[ltPlIdx].playerId) rapPlIdx++;

        user1.resultAllPlayers[rapPlIdx].seasonRatingMarks.push(6.6); //начальная оценка за матч

        user1.players.push({
            card: user1.resultAllPlayers[rapPlIdx],
            position: user1.resultLastTeam[ltPlIdx].position,
        });
    }

    rapPlIdx = 0;
    for (let ltPlIdx = 0; ltPlIdx < user2.resultLastTeam.length; ltPlIdx++) {
        while (user2.resultAllPlayers[rapPlIdx].playerId !== user2.resultLastTeam[ltPlIdx].playerId) rapPlIdx++;

        user2.resultAllPlayers[rapPlIdx].seasonRatingMarks.push(6.6); //начальная оценка за матч

        user2.players.push({
            card: user2.resultAllPlayers[rapPlIdx],
            position: user2.resultLastTeam[ltPlIdx].position,
        });
    }


    // сортировка игроков по возрастанию рейтинга (GK всегда последние)
    function sortPlayersByAverageRating(a, b) {
        if (a.card.isGoalKeeper) return 1;
        if (b.card.isGoalKeeper) return -1;

        if (a.card.averageRating < b.card.averageRating) return -1;
        if (a.card.averageRating > b.card.averageRating) return 1;

        return 0;
    }

    user1.players.sort(sortPlayersByAverageRating);
    user2.players.sort(sortPlayersByAverageRating);
    // заполнение массивов players ссылками на этих же игроков из resultAllPlayers =====================================


    user1.players.forEach((player) => {
        //распределение в массивах игроков на позициях
        playersOnPositions[0][player.position].push(player);

        let technicalSkills = {},
            physicalSkills = {};

        for (let skill in player.card.physicalSkills) physicalSkills[skill] = player.card.physicalSkills[skill];
        for (let skill in player.card.technicalSkills) technicalSkills[skill] = player.card.technicalSkills[skill];

        switch (player.position) {
            case 'FW':
                technicalSkills.shoot *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.agility *= 3;
                physicalSkills.jump *= 3;
                break;

            case 'WG':
                technicalSkills.cross *= 3;
                technicalSkills.shoot *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.agility *= 3;
                break;

            case 'CM':
                technicalSkills.pass *= 3;
                physicalSkills.agility *= 3;
                physicalSkills.strength *= 3;
                break;

            case 'CD':
                technicalSkills.tackling *= 3;
                physicalSkills.strength *= 3;
                physicalSkills.jump *= 3;
                break;

            case 'WB':
                technicalSkills.cross *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.jump *= 3;
                break;
        }

        if (player.card.physicalSkills.agility > 0) playersWithSkills[0].AGIp.push(player);
        else if (player.card.physicalSkills.agility < 0) playersWithSkills[0].AGIm.push(player);

        if (player.card.technicalSkills.tackling > 0) playersWithSkills[0].TCKLp.push(player);

        if (player.card.technicalSkills.pass > 0) playersWithSkills[0].PASp.push(player);

        if (player.card.physicalSkills.stamina < 0) playersWithSkills[0].STAm.push(player);
        else if (player.card.physicalSkills.stamina === 0) playersWithSkills[0].STAz.push(player);


        //получение asm игрока
        let phy = 0, te = 0, asm;

        for (let skill in physicalSkills) {
            phy += physicalSkills[skill];
        }
        for (let skill in technicalSkills) {
            te += technicalSkills[skill];
        }

        phy = Math.min(Math.max(1, phy), 5);
        te = Math.min(Math.max(1, te), 5);

        asm = (phy + te) + player.card.mood;
        asm = Math.min(Math.max(1, asm), 10);

        if (asm % 1 !== 0) asm += 0.5 * (player.card.mood < 0 ? -1 : 1);

        T[0] += asm;

        debugLogs.user1.playersAsm.push({
            playerId: player.card.playerId,
            playerName: player.card.playerName,
            asm,
        }); //d
    });
    user2.players.forEach((player) => {
        //распределение в массивах игроков на позициях
        playersOnPositions[1][player.position].push(player);

        let technicalSkills = {},
            physicalSkills = {};

        for (let skill in player.card.physicalSkills) physicalSkills[skill] = player.card.physicalSkills[skill];
        for (let skill in player.card.technicalSkills) technicalSkills[skill] = player.card.technicalSkills[skill];


        switch (player.position) {
            case 'FW':
                technicalSkills.shoot *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.agility *= 3;
                physicalSkills.jump *= 3;
                break;

            case 'WG':
                technicalSkills.cross *= 3;
                technicalSkills.shoot *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.agility *= 3;
                break;

            case 'CM':
                technicalSkills.pass *= 3;
                physicalSkills.agility *= 3;
                physicalSkills.strength *= 3;
                break;

            case 'CD':
                technicalSkills.tackling *= 3;
                physicalSkills.strength *= 3;
                physicalSkills.jump *= 3;
                break;

            case 'WB':
                technicalSkills.cross *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.jump *= 3;
                break;
        }

        if (player.card.physicalSkills.agility > 0) playersWithSkills[1].AGIp.push(player);
        else if (player.card.physicalSkills.agility < 0) playersWithSkills[1].AGIm.push(player);

        if (player.card.technicalSkills.tackling > 0) playersWithSkills[1].TCKLp.push(player);

        if (player.card.technicalSkills.pass > 0) playersWithSkills[1].PASp.push(player);

        if (player.card.physicalSkills.stamina < 0) playersWithSkills[1].STAm.push(player);
        else if (player.card.physicalSkills.stamina === 0) playersWithSkills[1].STAz.push(player);


        //получение asm игрока
        let phy = 0, te = 0, asm;

        for (let skill in physicalSkills) {
            phy += physicalSkills[skill];
        }
        for (let skill in technicalSkills) {
            te += technicalSkills[skill];
        }

        phy = Math.min(Math.max(1, phy), 5);
        te = Math.min(Math.max(1, te), 5);

        asm = (phy + te) + player.card.mood;
        asm = Math.min(Math.max(1, asm), 10);

        if (asm % 1 !== 0) asm += 0.5 * (player.card.mood < 0 ? -1 : 1);

        T[1] += asm;

        debugLogs.user2.playersAsm.push({
            playerId: player.card.playerId,
            playerName: player.card.playerName,
            asm,
        }); //d
    });


    T[0] += 3; //доп очки за домашнюю тиму
    if (user1.avatar !== user2.avatar) {
        if (avatarDefying[user1.avatar].includes(user2.avatar)) {
            T[0] += 3;

            debugLogs.user1.avatarBonus = 3;//debug
        }
        else if (avatarDefying[user2.avatar].includes(user1.avatar)) {
            T[1] += 3;

            debugLogs.user2.avatarBonus = 3;//debug
        }
    } // доп очки за контр тренеров

    debugLogs.user1.T = T[0]; //d
    debugLogs.user2.T = T[1]; //d


    let advantage = Math.abs(T[0] - T[1]),
        isEqual = false;

    if (T[0] === T[1]) isEqual = true;

    debugLogs.user1.T_adv = T[0]; //d
    debugLogs.user2.T_adv = T[1]; //d


    function changeRating(player, ratingDiff) {
        player.card.seasonRatingMarks[player.card.seasonRatingMarks.length - 1] = Number((player.card.seasonRatingMarks[player.card.seasonRatingMarks.length - 1] + ratingDiff).toFixed(2));
    }

    let xG = [0, 0], momentsCount = [0, 0], xG1 = [0, 0], xG2 = [0, 0], lastPotGoalMinute = null;


    matchLogs.push({
        minute: 0,
        user: null,
        momentType: null,
        result: 'Match started!'
    });


    //первый тайм ===================================================================
    momentsCount[0] = Math.round(T[0] / ((T[0] + T[1]) / 15));
    momentsCount[1] = 15 - momentsCount[0];

    for (let i = 3; i <= 45; i += 3) {
        let player = MathService.randomFloat(0, T[0] + T[1]) <= T[0] ? 0 : 1,
            randNum = MathService.randomInteger(1, 10),
            momentType = randNum >= 1 && randNum <= 2 ? 13 : randNum >= 3 && randNum <= 6 ? 12 : 11,
            momentWeight = 0.5 * (momentType - 9);

        if (momentsCount[player] === 0) player = (player + 1) % 2;
        momentsCount[player]--;


        T[player] += momentWeight; // чтобы получить вес 1/1.5/2 (11 -9. 12 - 9, 13 - 9)
        xG[player] += momentWeight;
        xG1[player] += momentWeight;


        matchLogs.push({
            minute: i,
            user: player,
            momentType,
            result: ''
        });
        eventsArrs[player].push(momentType); //d
    }


    xG[0] /= 10;
    xG[1] /= 10;
    xG1[0] /= 10;
    xG1[1] /= 10;
    //первый тайм ===================================================================


    eventsArrs[0].push("==="); //d
    eventsArrs[1].push("==="); //d


    //второй тайм ===================================================================
    if (isEqual) {
        momentsCount[0] = 7;
        momentsCount[1] = 8;
    }
    else {
        momentsCount[0] = Math.round(T[0] / ((T[0] + T[1]) / 15));
        momentsCount[1] = 15 - momentsCount[0];
    }


    for (let i = 48; i <= 90; i += 3) {
        let player = MathService.randomFloat(0, T[0] + T[1]) <= T[0] ? 0 : 1,
            randNum = MathService.randomInteger(1, 10),
            momentType = randNum >= 1 && randNum <= 2 ? 13 : randNum >= 3 && randNum <= 6 ? 12 : 11,
            momentWeight = 0.5 * (momentType - 9);

        if (momentsCount[player] === 0) player = (player + 1) % 2;
        momentsCount[player]--;


        T[player] += momentWeight; // чтобы получить вес 1/1.5/2 (11 -9. 12 - 9, 13 - 9)
        xG[player] += momentWeight;
        xG2[player] += momentWeight;


        matchLogs.push({
            minute: i,
            user: player,
            momentType,
            result: ''
        });
        eventsArrs[player].push(momentType); //d
    }

    xG[0] /= 10;
    xG[1] /= 10;
    xG2[0] /= 10;
    xG2[1] /= 10;
    //второй тайм ===================================================================


    for (let i = matchLogs.length - 1; i > 0; i--) {
        if (matchLogs[i].momentType === 13) {
            lastPotGoalMinute = matchLogs[i].minute;
            break;
        }
    }

    let playersWithYellowCards = [[], []], injuredPlayers = [[], []], kickedPlayers = [[], []];

    xG[0] = xG1[0];
    xG[1] = xG1[1];

    for (let i = 0; i < 30; i++) {
        // добавляем xG первого тайма
        if (i === 15) {
            xG[0] += xG2[0];
            xG[1] += xG2[1];
        }


        let event = matchLogs[i + 1];

        let eventCode,
            eventedUser, scoredUser, anotherUser,
            AGIpPlayersCount, TCKLpPlayersCount, PASpPlayersCount, AGImPlayersCount, STAmLength, STAzLength, // для удобства
            actedPlayer, possibleActedPlayers, injuredPlayer;

        switch (event.momentType) {
            case 11:
                eventedUser = event.user === 0 ? user1 : user2;
                anotherUser = event.user === 0 ? user2 : user1;

                eventCode = MathService.randomInteger(111, 115);

                switch (eventCode) {
                    case 111:
                        injuredPlayer = findInjured_111(eventedUser, playersWithSkills[event.user], injuredPlayers[event.user]);
                        injuredPlayers[event.user].push(injuredPlayer.card.playerId);
                        changeRating(injuredPlayer, -0.2);

                        actedPlayer = findActed_111(anotherUser);
                        actedPlayer.card.seasonYellowCardsCount++;
                        playersWithYellowCards[(event.user + 1) % 2].push(actedPlayer.card.playerId);
                        changeRating(actedPlayer, -0.4);

                        if (playersWithYellowCards[(event.user + 1) % 2].includes(actedPlayer.card.playerId)) {
                            kickedPlayers[(event.user + 1) % 2].push(actedPlayer);
                            actedPlayer.card.unavailableMatchesCount = 4;

                            // удаление из массива игроков
                            for (let plIdx = 0; plIdx < anotherUser.players.length; plIdx++) {
                                if (anotherUser.players[plIdx].card.playerId === actedPlayer.card.playerId) {
                                    anotherUser.players.splice(plIdx, 1);
                                    break;
                                }
                            }

                            // удаление из игроков на позициях
                            for (let plIdx = 0; plIdx < playersOnPositions[(event.user + 1) % 2][actedPlayer.position].length; plIdx++) {
                                if (playersOnPositions[(event.user + 1) % 2][actedPlayer.position][plIdx].card.playerId === actedPlayer.card.playerId) {
                                    playersOnPositions[(event.user + 1) % 2][actedPlayer.position].splice(plIdx, 1);
                                    break;
                                }
                            }

                            // удаление из игроков по скиллах ===========================================================================
                            if (actedPlayer.card.physicalSkills.agility > 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].AGIp.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].AGIp[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].AGIp.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }
                            else if (actedPlayer.card.physicalSkills.agility < 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].AGIm.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].AGIm[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].AGIm.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }

                            if (actedPlayer.card.physicalSkills.stamina === 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].STAz.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].STAz[plIdx].playerId === actedPlayer.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].STAz.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }
                            else if (actedPlayer.card.physicalSkills.stamina < 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].STAm.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].STAm[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].STAm.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }

                            if (actedPlayer.card.technicalSkills.tackling > 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].TCKLp.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].TCKLp[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].TCKLp.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }

                            if (actedPlayer.card.technicalSkills.pass > 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].PASp.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].PASp[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].PASp.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }
                            // удаление из игроков по скиллах ===========================================================================
                        }

                        if (actedPlayer.card.seasonYellowCardsCount === 8) {
                            //unavailable
                        }

                        matchLogs[i + 1].result = `${injuredPlayer.card.playerName} is injured - ${actedPlayer.card.playerName} will be punished by a yellow card`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: -0.4,
                            },
                            {
                                playerId: injuredPlayer.card.playerId,
                                playerName: injuredPlayer.card.playerName,
                                position: injuredPlayer.position,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;

                    case 112:
                        AGImPlayersCount = playersWithSkills[event.user].AGIm.length;

                        if (AGImPlayersCount) actedPlayer = playersWithSkills[event.user].AGIm[MathService.randomInteger(0, AGImPlayersCount - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].result = `Unlucky dribbling - ${actedPlayer.card.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;

                    case 113:
                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];

                        if (possibleActedPlayers.length) actedPlayer = possibleActedPlayers[MathService.randomInteger(0, possibleActedPlayers.length - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(0, eventedUser.players.length - 2)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].result = `Unlucky cross - ${actedPlayer.card.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;

                    case 114:
                        matchLogs[i + 1].result = `Slow passing in the midfield`;
                        matchLogs[i + 1].players = [];
                        break;

                    case 115:
                        actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].result = `${actedPlayer.card.playerName} made a mistake`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;
                }
                break;

            case 12:
                eventedUser = event.user === 0 ? user1 : user2;
                anotherUser = event.user === 0 ? user2 : user1;

                eventCode = MathService.randomInteger(121, 125);

                switch (eventCode) {
                    case 121:
                        actedPlayer = eventedUser.players[MathService.randomInteger(0, eventedUser.players.length - 2)];

                        matchLogs[i + 1].result = `Shot off target`;
                        matchLogs[i + 1].players = [{
                            playerId: actedPlayer.card.playerId,
                            playerName: actedPlayer.card.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0,
                        }];
                        break;

                    case 122:
                        AGIpPlayersCount = playersWithSkills[event.user].AGIp.length;

                        if (AGIpPlayersCount) actedPlayer = playersWithSkills[event.user].AGIp[MathService.randomInteger(0, AGIpPlayersCount - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(eventedUser.players.length - 6, eventedUser.players.length - 2)];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].result = `Successful dribbling by ${actedPlayer.card.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: 0.2,
                            }
                        ];
                        break;

                    case 123:
                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];
                        possibleActedPlayers.sort(function (a, b) {
                            if (a.card.averageRating < b.card.averageRating) return -1;
                            if (a.card.averageRating > b.card.averageRating) return 1;
                            return 0;
                        });

                        actedPlayer = possibleActedPlayers[possibleActedPlayers.length - 1];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].result = `Promising cross by ${actedPlayer.card.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: 0.2,
                            }
                        ];
                        break;

                    case 124:
                        TCKLpPlayersCount = playersWithSkills[event.user].TCKLp.length;

                        if (TCKLpPlayersCount) actedPlayer = playersWithSkills[event.user].TCKLp[MathService.randomInteger(0, TCKLpPlayersCount - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(eventedUser.players.length - 6, eventedUser.players.length - 2)];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].result = `Interception by ${actedPlayer.card.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: 0.2,
                            }
                        ];
                        break;

                    case 125:
                        PASpPlayersCount = playersWithSkills[event.user].PASp.length;

                        if (PASpPlayersCount) actedPlayer = playersWithSkills[event.user].PASp[MathService.randomInteger(0, PASpPlayersCount - 1)];
                        else {
                            playersOnPositions[event.user].CM.sort(function (a, b) {
                                if (a.card.averageRating < b.card.averageRating) return -1;
                                if (a.card.averageRating > b.card.averageRating) return 1;
                                return 0;
                            });
                            actedPlayer = playersOnPositions[event.user].CM[playersOnPositions[event.user].CM.length - 1];
                        }

                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].result = `Promising through pass by ${actedPlayer.card.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: 0.2,
                            }
                        ];
                        break;
                }
                break;

            case 13:
                let chanceNumbers = Math.floor(xG[event.user] / 0.25);

                if (event.minute === lastPotGoalMinute && goals[0] === goals[1]) chanceNumbers++;

                let goal = MathService.randomInteger(1, 10) <= chanceNumbers ? 1 : 0;

                if (goal) {
                    let scoredPlayer, assistantPlayer, possibleScoredPlayers;

                    scoredUser = event.user === 0 ? user1 : user2;
                    anotherUser = event.user === 0 ? user2 : user1;

                    goals[event.user]++;
                    xG[event.user] = Math.max(0, xG[event.user] - 1); //чтобы xG игрока не был меньше 0

                    switch (scoredUser.tactic.teamFocus) {
                        case 'wing-play':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                eventCode = 131;


                                if (playersOnPositions[event.user].FW.length) {
                                    scoredPlayer = playersOnPositions[event.user].FW[0];

                                    if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                    else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                }
                                else if (playersOnPositions[event.user].WG.length) {
                                    let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                    scoredPlayer = playersOnPositions[event.user].WG[idx];

                                    if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                    else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                }
                                else if (playersOnPositions[event.user].CM.length) {
                                    let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                    scoredPlayer = playersOnPositions[event.user].CM[idx];

                                    if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                    else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                        let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                    }
                                }

                                changeRating(scoredPlayer, 0.8);
                                changeRating(assistantPlayer, 0.8);


                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }

                                matchLogs[i + 1].result = `${scoredPlayer.card.playerName} scores a header delivered by ${assistantPlayer.card.playerName}`;
                                matchLogs[i + 1].players = [
                                    {
                                        playerId: scoredPlayer.card.playerId,
                                        playerName: scoredPlayer.card.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerId: assistantPlayer.card.playerId,
                                        playerName: assistantPlayer.card.playerName,
                                        position: assistantPlayer.position,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    },
                                ];
                            }
                            else {
                                eventCode = MathService.randomInteger(131, 136);

                                switch (eventCode) {
                                    case 131:
                                        if (playersOnPositions[event.user].FW.length) {
                                            scoredPlayer = playersOnPositions[event.user].FW[0];

                                            if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        }
                                        else if (playersOnPositions[event.user].WG.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].WG[idx];

                                            if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        }
                                        else if (playersOnPositions[event.user].CM.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];

                                            if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `${scoredPlayer.card.playerName} scores a header delivered by ${assistantPlayer.card.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.card.playerId,
                                                playerName: assistantPlayer.card.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        break;

                                    case 132:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.4);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.card.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.4,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 133:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `${scoredPlayer.card.playerName} scores after solo breakthrough`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 134:
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            // scoredPlayer = (FW|WG)
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                            // assistantPlayer = CM
                                            if (playersOnPositions[event.user].CM.length) {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                            }
                                            // assistantPlayer = (CD|WB)
                                            else {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                        }
                                        else {
                                            // scoredPlayer = CM
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];


                                            // assistantPlayer = (CD|WB)
                                            if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                            // assistantPlayer = CM
                                            else {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.card.playerName} runs and ${assistantPlayer.card.playerName} provides an assist`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.card.playerId,
                                                playerName: assistantPlayer.card.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 135:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.card.playerName} used opponent’s silly mistake`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 136:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.card.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.5,
                                            }
                                        ];
                                        break;
                                }
                            }
                            break;

                        case 'midfield':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                eventCode = 134;


                                if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                    // scoredPlayer = (FW|WG)
                                    possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                    scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                    // assistantPlayer = CM
                                    if (playersOnPositions[event.user].CM.length) {
                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                    }
                                    // assistantPlayer = (CD|WB)
                                    else {
                                        let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                    }
                                }
                                else {
                                    // scoredPlayer = CM
                                    let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                    scoredPlayer = playersOnPositions[event.user].CM[idx];


                                    // assistantPlayer = (CD|WB)
                                    if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                        let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                    }
                                    // assistantPlayer = CM
                                    else {
                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                    }
                                }

                                changeRating(scoredPlayer, 0.8);
                                changeRating(assistantPlayer, 0.8);


                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }

                                matchLogs[i + 1].result = `Goal! ${scoredPlayer.card.playerName} runs and ${assistantPlayer.card.playerName} provides an assist`;
                                matchLogs[i + 1].players = [
                                    {
                                        playerId: scoredPlayer.card.playerId,
                                        playerName: scoredPlayer.card.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerId: assistantPlayer.card.playerId,
                                        playerName: assistantPlayer.card.playerName,
                                        position: assistantPlayer.position,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    }
                                ];
                            }
                            else {
                                eventCode = MathService.randomInteger(131, 136);

                                switch (eventCode) {
                                    case 131:
                                        if (playersOnPositions[event.user].FW.length) {
                                            scoredPlayer = playersOnPositions[event.user].FW[0];

                                            if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        }
                                        else if (playersOnPositions[event.user].WG.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].WG[idx];

                                            if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        }
                                        else if (playersOnPositions[event.user].CM.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];

                                            if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `${scoredPlayer.card.playerName} scores a header delivered by ${assistantPlayer.card.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.card.playerId,
                                                playerName: assistantPlayer.card.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        break;

                                    case 132:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.4);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.card.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.4,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 133:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `${scoredPlayer.card.playerName} scores after solo breakthrough`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 134:
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            // scoredPlayer = (FW|WG)
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                            // assistantPlayer = CM
                                            if (playersOnPositions[event.user].CM.length) {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                            }
                                            // assistantPlayer = (CD|WB)
                                            else {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                        }
                                        else {
                                            // scoredPlayer = CM
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];


                                            // assistantPlayer = (CD|WB)
                                            if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                            // assistantPlayer = CM
                                            else {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.card.playerName} runs and ${assistantPlayer.card.playerName} provides an assist`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.card.playerId,
                                                playerName: assistantPlayer.card.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 135:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.card.playerName} used opponent’s silly mistake`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 136:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.card.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.5,
                                            }
                                        ];
                                        break;
                                }
                            }
                            break;

                        case 'stepUp':
                            eventCode = MathService.randomInteger(131, 136);
                            switch (eventCode) {
                                case 131:
                                    if (playersOnPositions[event.user].FW.length) {
                                        scoredPlayer = playersOnPositions[event.user].FW[0];

                                        if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                    }
                                    else if (playersOnPositions[event.user].WG.length) {
                                        let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                        scoredPlayer = playersOnPositions[event.user].WG[idx];

                                        if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                        else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                    }
                                    else if (playersOnPositions[event.user].CM.length) {
                                        let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                        scoredPlayer = playersOnPositions[event.user].CM[idx];

                                        if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                        else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                            let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                        }
                                    }

                                    changeRating(scoredPlayer, 0.8);
                                    changeRating(assistantPlayer, 0.8);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].result = `${scoredPlayer.card.playerName} scores a header delivered by ${assistantPlayer.card.playerName}`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerId: assistantPlayer.card.playerId,
                                            playerName: assistantPlayer.card.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        },
                                    ];
                                    break;

                                case 132:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 0.4);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.card.playerName}`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.4,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 133:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 1);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].result = `${scoredPlayer.card.playerName} scores after solo breakthrough`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 134:
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        // scoredPlayer = (FW|WG)
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                        // assistantPlayer = CM
                                        if (playersOnPositions[event.user].CM.length) {
                                            assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                        }
                                        // assistantPlayer = (CD|WB)
                                        else {
                                            let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                        }
                                    }
                                    else {
                                        // scoredPlayer = CM
                                        let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                        scoredPlayer = playersOnPositions[event.user].CM[idx];


                                        // assistantPlayer = (CD|WB)
                                        if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                            let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                        }
                                        // assistantPlayer = CM
                                        else {
                                            assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                        }
                                    }

                                    changeRating(scoredPlayer, 0.8);
                                    changeRating(assistantPlayer, 0.8);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].result = `Goal! ${scoredPlayer.card.playerName} runs and ${assistantPlayer.card.playerName} provides an assist`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerId: assistantPlayer.card.playerId,
                                            playerName: assistantPlayer.card.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 135:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 1);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].result = `Goal! ${scoredPlayer.card.playerName} used opponent’s silly mistake`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 136:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 0.8);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                    }

                                    matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.card.playerName}`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.5,
                                        }
                                    ];
                                    break;
                            }
                            break;
                    }


                    //поиск виноватого игрока ================================================
                    let value = Math.random(),
                        anotherUserIdx = (event.user + 1) % 2,
                        guiltPlayer;

                    if (value <= 0.15) guiltPlayer = playersOnPositions[anotherUserIdx].GK[0];
                    else if (value <= 0.30) {
                        let possibleGuiltPlayers = [...playersOnPositions[anotherUserIdx].FW, ...playersOnPositions[anotherUserIdx].WG];
                        guiltPlayer = possibleGuiltPlayers[MathService.randomInteger(0, possibleGuiltPlayers.length - 1)];
                    }
                    else if (value <= 0.60) guiltPlayer = playersOnPositions[anotherUserIdx].CM[MathService.randomInteger(0, playersOnPositions[anotherUserIdx].CM.length - 1)];
                    else {
                        let possibleGuiltPlayers = [...playersOnPositions[anotherUserIdx].CD, ...playersOnPositions[anotherUserIdx].WB];
                        guiltPlayer = possibleGuiltPlayers[MathService.randomInteger(0, possibleGuiltPlayers.length - 1)];
                    }

                    changeRating(guiltPlayer, -0.2);

                    matchLogs[i + 1].players.push({
                        playerId: guiltPlayer.card.playerId,
                        playerName: guiltPlayer.card.playerName,
                        position: guiltPlayer.position,
                        role: 'guilt',
                        ratingDiff: -0.2,
                    });
                    //поиск виноватого игрока ================================================

                    // -0.2 пропустившим гол игрокам
                    for (let playerIndex = 0; playerIndex < anotherUser.players.length; playerIndex++) changeRating(anotherUser.players[playerIndex], -0.2);
                    matchLogs[i + 1].players.push({
                        playerName: 'Another team players',
                        position: 'Another team positions',
                        role: 'none',
                        ratingDiff: -0.2,
                    });
                }
                else {
                    eventCode = 130;

                    let anotherUser = event.user === 0 ? user2 : user1;

                    actedPlayer = anotherUser.players[anotherUser.players.length - 1];
                    changeRating(actedPlayer, 0.4);

                    matchLogs[i + 1].result = `Shot on target`;
                    matchLogs[i + 1].players = [
                        {
                            playerId: actedPlayer.card.playerId,
                            playerName: actedPlayer.card.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.4,
                        }
                    ];
                }
                break;
        }

        matchLogs[i + 1].code = eventCode;
        matchLogs[i + 1].score = goals[0] + '-' + goals[1];
    }


    // рассчёт рейтинга игроков за сезон (среднее арифм)===========================
    for (let playerIndex = 0; playerIndex < user1.players.length; playerIndex++) {
        let sumOfMarks = 0;

        for (let marksIndex = 0; marksIndex < user1.players[playerIndex].card.seasonRatingMarks.length; marksIndex++) {
            sumOfMarks += user1.players[playerIndex].card.seasonRatingMarks[marksIndex];
        }

        user1.players[playerIndex].card.averageRating = Number((sumOfMarks / user1.players[playerIndex].card.seasonRatingMarks.length).toFixed(2));
    }

    for (let playerIndex = 0; playerIndex < kickedPlayers[0].length; playerIndex++) {
        let sumOfMarks = 0;

        for (let marksIndex = 0; marksIndex < kickedPlayers[0][playerIndex].card.seasonRatingMarks.length; marksIndex++) {
            sumOfMarks += kickedPlayers[0][playerIndex].card.seasonRatingMarks[marksIndex];
        }

        kickedPlayers[0][playerIndex].card.averageRating = Number((sumOfMarks / kickedPlayers[0][playerIndex].card.seasonRatingMarks.length).toFixed(2));
    }


    for (let playerIndex = 0; playerIndex < user2.players.length; playerIndex++) {
        let sumOfMarks = 0;

        for (let marksIndex = 0; marksIndex < user2.players[playerIndex].card.seasonRatingMarks.length; marksIndex++) {
            sumOfMarks += user2.players[playerIndex].card.seasonRatingMarks[marksIndex];
        }

        user2.players[playerIndex].card.averageRating = Number((sumOfMarks / user2.players[playerIndex].card.seasonRatingMarks.length).toFixed(2));
    }

    for (let playerIndex = 0; playerIndex < kickedPlayers[1].length; playerIndex++) {
        let sumOfMarks = 0;

        for (let marksIndex = 0; marksIndex < kickedPlayers[1][playerIndex].card.seasonRatingMarks.length; marksIndex++) {
            sumOfMarks += kickedPlayers[1][playerIndex].card.seasonRatingMarks[marksIndex];
        }

        kickedPlayers[1][playerIndex].card.averageRating = Number((sumOfMarks / kickedPlayers[1][playerIndex].card.seasonRatingMarks.length).toFixed(2));
    }
    // рассчёт рейтинга игроков за сезон (среднее арифм)===========================


    // изменение статуса unavailable для всех игроков юзеров===========================
    for (let plIdx = 0; plIdx < user1.resultAllPlayers; plIdx++) {
        let currPlayer = user1.resultAllPlayers[plIdx];
        if (currPlayer.unavailableMatchesCount > 0) currPlayer.unavailableMatchesCount--;
    }

    for (let plIdx = 0; plIdx < user2.resultAllPlayers; plIdx++) {
        let currPlayer = user2.resultAllPlayers[plIdx];
        if (currPlayer.unavailableMatchesCount > 0) currPlayer.unavailableMatchesCount--;
    }
    // изменение статуса unavailable для всех игроков юзеров===========================


    user1.players = user1.players.concat(kickedPlayers[0]);
    user2.players = user2.players.concat(kickedPlayers[1]);

    let resultLogs = {
        user1: {
            id: user1.id,
            players: user1.players.map(player => {
                return {
                    playerId: player.card.playerId,
                    playerName: player.card.playerName,
                    head: player.card.head,
                    body: player.card.body,
                    clothing: player.card.clothing,
                    hair: player.card.hair,
                };
            })
        },
        user2: {
            id: user2.id,
            players: user2.players.map(player => {
                return {
                    playerId: player.card.playerId,
                    playerName: player.card.playerName,
                    head: player.card.head,
                    body: player.card.body,
                    clothing: player.card.clothing,
                    hair: player.card.hair,
                };
            })
        },
        matchEvents: matchLogs
    };


    //debug===========================================================================
    debugLogs.logs = resultLogs; //d
    debugLogs.score = goals[0] + '-' + goals[1]; //d
    debugLogs.user1.totalEvents = eventsArrs[0].join(' '); //d
    debugLogs.user2.totalEvents = eventsArrs[1].join(' '); //d


    function getLogsText_debug(user1, user2, debugLogs, matchLogs) {
        let logsText = '';

        logsText += 'Звёзды игроков:\n=============================\n';

        logsText += 'Игрок 1:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${debugLogs.user1.playersAsm[i].playerName}: ${debugLogs.user1.playersAsm[i].asm}\n`;
        }
        logsText += '=================\n';

        logsText += 'Игрок 2:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${debugLogs.user2.playersAsm[i].playerName}: ${debugLogs.user2.playersAsm[i].asm}\n`;
        }
        logsText += '=================\n';


        logsText += '\n\nРейтинг карточек перед матчем:\n=============================\n';

        logsText += 'Игрок 1:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${user1.players[i].card.playerName}: 6.6\n`;
        }
        logsText += '=================\n';

        logsText += 'Игрок 2:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${user2.players[i].card.playerName}: 6.6\n`;
        }
        logsText += '=================\n';


        logsText += '\n\nЛоги матча:\n=============================\n';
        for (let i = 1; i < matchLogs.length; i++) {
            let playersRatingString = '';

            for (let j = 0; j < matchLogs[i].players.length; j++) {
                playersRatingString += `${matchLogs[i].players[j].playerName} (${matchLogs[i].players[j].ratingDiff}), `;
            }

            playersRatingString = playersRatingString.substring(0, playersRatingString.length - 2);

            logsText += `${matchLogs[i].minute} минута, игрок ${matchLogs[i].user + 1}, событие ${matchLogs[i].momentType}.\nРезультат: ${matchLogs[i].result}.\nИзменение рейтинга: ${playersRatingString}.\n====================================\n`;
        }


        logsText += `\n\nСчёт: ${goals[0]}-${goals[1]}\n`;


        let yellowCards = [[], []], violations = [[], []], offendingPlayerIds = [[], []];
        for (let i = 1; i < matchLogs.length; i++) {
            let event = matchLogs[i];
            if (event.momentType === 11 && event.result.endsWith('card')) {
                let actedPlayer = event.players[0],
                    injuredPlayer = event.players[1],
                    cardType = 'Yellow';

                if (offendingPlayerIds[event.user].includes(actedPlayer.playerId)) cardType = 'Red';
                else offendingPlayerIds[event.user].push(actedPlayer.playerId);

                violations[event.user].push({
                    cardType,
                    actedPlayer,
                    injuredPlayer,
                });
                yellowCards[event.user].push({
                    actedPlayer,
                    injuredPlayer,
                });
            }
        }

        logsText += `\n\nНарушения:\n\n`;

        logsText += `Игрок 1:\n===============\n`;
        for (let i = 0; i < violations[0].length; i++) {
            logsText += `(${violations[0][i].cardType} card) Injured: ${yellowCards[0][i].injuredPlayer.playerName}, Acted: ${yellowCards[0][i].actedPlayer.playerName}`;

            if (violations[0][i].cardType === 'Red') logsText += ' (kicked)';

            logsText += '\n';
        }
        logsText += `===============\n`;

        logsText += `\nИгрок 2:\n===============\n`;
        for (let i = 0; i < violations[1].length; i++) {
            logsText += `(${violations[1][i].cardType} card) Injured: ${yellowCards[1][i].injuredPlayer.playerName}, Acted: ${yellowCards[1][i].actedPlayer.playerName}`;

            if (violations[1][i].cardType === 'Red') logsText += ' (kicked)';

            logsText += '\n';
        }
        logsText += `===============\n`;


        logsText += '\n\nРейтинг карточек после матча:\n=============================\n';

        logsText += 'Игрок 1:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${user1.players[i].card.playerName}: ${user1.players[i].card.seasonRatingMarks[user1.players[i].card.seasonRatingMarks.length - 1]}\n`;
        }
        logsText += '=================\n';

        logsText += 'Игрок 2:\n=================\n';
        for (let i = 0; i < 11; i++) {
            logsText += `${user2.players[i].card.playerName}: ${user2.players[i].card.seasonRatingMarks[user2.players[i].card.seasonRatingMarks.length - 1]}\n`;
        }
        logsText += '=================\n';

        return logsText;
    }

    debugLogs.logsText = getLogsText_debug(user1, user2, debugLogs, matchLogs);
    //debug===========================================================================

    if (saveToDB) {
        let
            user1UpdateLastTeamQuery = prisma.user.update({
                where: {
                    id: user1.id,
                },
                data: {
                    lastTeam: JSON.stringify(user1.resultLastTeam)
                }
            }),
            user1UpdateAllPlayersQuery = prisma.user_players.update({
                where: {
                    userId: user1.id,
                },
                data: {
                    playersJson: JSON.stringify(user1.resultAllPlayers)
                }
            }),
            user2UpdateLastTeamQuery = prisma.user.update({
                where: {
                    id: user2.id,
                },
                data: {
                    lastTeam: JSON.stringify(user2.resultLastTeam)
                }
            }),
            user2UpdateAllPlayersQuery = prisma.user_players.update({
                where: {
                    userId: user2.id,
                },
                data: {
                    playersJson: JSON.stringify(user2.resultAllPlayers)
                }
            }),
            matchUpdateQuery = prisma.match.update({
                where: {
                    id: match.id
                },
                data: {
                    logs: JSON.stringify(resultLogs),
                    score: goals[0] + ':' + goals[1],
                }
            });

        await prisma.$transaction([user1UpdateLastTeamQuery, user1UpdateAllPlayersQuery, user2UpdateLastTeamQuery, user2UpdateAllPlayersQuery, matchUpdateQuery]);
    }

    return debugLogs;
}

async function playMatchManyTimes_v_12_08_2022_2(matchId, count) {
    let debugLogs = []; //d

    let overall = {
        winFirst: 0,
        winSecond: 0,
        draw: 0,
    };

    for (let i = 0; i < count; i++) {
        debugLogs.push((await playDebugMatch_v_12_08_2022_2(matchId, false)));

        let goals = debugLogs[i].score.split('-').map(item => {
            return +item;
        });

        if (goals[0] > goals[1]) overall.winFirst++;
        else if (goals[0] < goals[1]) overall.winSecond++;
        else overall.draw++;
    }

    debugLogs.push(overall);

    return debugLogs;
}


async function playDebugMatch_v_08_12_2(matchId, saveToDB) {
    function findInjured_111(eventedUser, playersWithSkills, injuredPlayers) {
        let STAmPlayersCount = playersWithSkills.STAm.length,
            STAzPlayersCount = playersWithSkills.STAz.length,
            possibleInjuredPlayers = [],
            injuredPlayer;

        if (STAmPlayersCount) {
            for (let j = 0; j < playersWithSkills.STAm.length; j++) {
                let currPlayer = playersWithSkills.STAm[j];
                if (!injuredPlayers.includes(currPlayer.card.playerId)) possibleInjuredPlayers.push(currPlayer);
            }
        }

        if (!possibleInjuredPlayers.length && STAzPlayersCount) {
            for (let j = 0; j < playersWithSkills.STAz.length; j++) {
                let currPlayer = playersWithSkills.STAz[j];
                if (!injuredPlayers.includes(currPlayer.card.playerId)) possibleInjuredPlayers.push(currPlayer);
            }
        }

        if (!possibleInjuredPlayers.length) {
            for (let j = 0; j < 5; j++) {
                let currPlayer = eventedUser.players[j];
                if (!injuredPlayers.includes(currPlayer.card.playerId)) possibleInjuredPlayers.push(currPlayer);
            }

            if (!possibleInjuredPlayers.length) {
                for (let j = 0; j < 5; j++) possibleInjuredPlayers.push(eventedUser.players[j]);
            }
        }

        injuredPlayer = possibleInjuredPlayers[MathService.randomInteger(0, possibleInjuredPlayers.length - 1)];

        return injuredPlayer;
    }

    function findActed_111(anotherUser) {
        let actedPlayer = anotherUser.players[MathService.randomInteger(0, anotherUser.players.length - 2)];

        return actedPlayer;
    }


    const match = await prisma.match.findFirst({
        select: {
            id: true,
            player1: {
                select: {
                    id: true,
                    avatar: true,
                    lastTactic: true,
                    lastTeam: true,
                    players: {
                        select: {
                            playersJson: true
                        }
                    },
                },
            },
            player2: {
                select: {
                    id: true,
                    avatar: true,
                    lastTactic: true,
                    lastTeam: true,
                    players: {
                        select: {
                            playersJson: true
                        }
                    },
                }
            },
        },
        where: {
            id: matchId
        },
    });

    let
        matchLogs = [],
        user1 = {
            id: match.player1.id,
            avatar: match.player1.avatar,
            tactic: JSON.parse(match.player1.lastTactic),
            players: JSON.parse(match.player1.lastTeam).map(player => {
                return {
                    playerId: player.playerId,
                    playerName: player.playerName,
                    head: player.head,
                    body: player.body,
                    clothing: player.clothing,
                    hair: player.hair,
                    physicalSkills: player.physicalSkills,
                    technicalSkills: player.technicalSkills,
                    mood: player.mood,
                    position: player.position,
                    isGoalKeeper: player.isGoalKeeper,
                    seasonRatingMarks: player.seasonRatingMarks,
                    averageRating: player.averageRating,
                    seasonYellowCardsCount: player.seasonYellowCardsCount,
                    matchRating: 6.6,
                }
            }),
            resultLastTeam: JSON.parse(match.player1.lastTeam),
            resultAllPlayers: JSON.parse(match.player1.players.playersJson),
        },
        user2 = {
            id: match.player2.id,
            avatar: match.player2.avatar,
            tactic: JSON.parse(match.player2.lastTactic),
            players: JSON.parse(match.player2.lastTeam).map(player => {
                return {
                    playerId: player.playerId,
                    playerName: player.playerName,
                    head: player.head,
                    body: player.body,
                    clothing: player.clothing,
                    hair: player.hair,
                    physicalSkills: player.physicalSkills,
                    technicalSkills: player.technicalSkills,
                    mood: player.mood,
                    position: player.position,
                    isGoalKeeper: player.isGoalKeeper,
                    seasonRatingMarks: player.seasonRatingMarks,
                    averageRating: player.averageRating,
                    seasonYellowCardsCount: player.seasonYellowCardsCount,
                    matchRating: 6.6,
                }
            }),
            resultLastTeam: JSON.parse(match.player2.lastTeam),
            resultAllPlayers: JSON.parse(match.player2.players.playersJson),
        },
        playersOnPositions = [
            {
                'FW': [],
                'WG': [],
                'CM': [],
                'WB': [],
                'CD': [],
                'GK': [],
            },
            {
                'FW': [],
                'WG': [],
                'CM': [],
                'WB': [],
                'CD': [],
                'GK': [],
            }
        ],
        playersWithSkills = [
            {
                AGIp: [],
                TCKLp: [],
                PASp: [],
                STAz: [],
                STAm: [],
                AGIm: [],
            },
            {
                AGIp: [],
                TCKLp: [],
                PASp: [],
                STAz: [],
                STAm: [],
                AGIm: [],
            },
        ],
        T = [0, 0],
        goals = [0, 0],
        eventsArrs = [[], []], //d
        debugLogs = {
            matchId: match.id,
            score: null,
            user1: {
                id: user1.id,
                players: user1.players,
                playersAsm: [],
                homeBonus: 3,
                avatarBonus: 0,
                T: 0,
            },
            user2: {
                id: user2.id,
                players: user2.players,
                playersAsm: [],
                homeBonus: 0,
                avatarBonus: 0,
                T: 0,
            },
        }; //d


    // заполнение массивов players ссылками на этих же игроков из resultAllPlayers =====================================
    function sortPlayersById_1(a, b) {
        if (a.playerId < b.playerId) return -1;
        if (a.playerId > b.playerId) return 1;
        return 0;
    }

    user1.resultLastTeam.sort(sortPlayersById_1);
    user2.resultLastTeam.sort(sortPlayersById_1);
    user1.resultAllPlayers.sort(sortPlayersById_1);
    user2.resultAllPlayers.sort(sortPlayersById_1);


    user1.players = [];
    user2.players = [];

    let rapPlIdx = 0;
    for (let ltPlIdx = 0; ltPlIdx < user1.resultLastTeam.length; ltPlIdx++) {
        while (user1.resultAllPlayers[rapPlIdx].playerId !== user1.resultLastTeam[ltPlIdx].playerId) rapPlIdx++;

        user1.players.push({
            card: user1.resultAllPlayers[rapPlIdx],
            position: user1.resultLastTeam[ltPlIdx].position,
            matchRating: 6.6,
        });
    }

    rapPlIdx = 0;
    for (let ltPlIdx = 0; ltPlIdx < user2.resultLastTeam.length; ltPlIdx++) {
        while (user2.resultAllPlayers[rapPlIdx].playerId !== user2.resultLastTeam[ltPlIdx].playerId) rapPlIdx++;

        user2.players.push({
            card: user2.resultAllPlayers[rapPlIdx],
            position: user2.resultLastTeam[ltPlIdx].position,
            matchRating: 6.6,
        });
    }


    // сортировка игроков по возрастанию рейтинга (GK всегда последние)
    function sortPlayersByAverageRating(a, b) {
        if (a.card.isGoalKeeper) return 1;
        if (b.card.isGoalKeeper) return -1;

        if (a.card.averageRating < b.card.averageRating) return -1;
        if (a.card.averageRating > b.card.averageRating) return 1;

        return 0;
    }

    user1.players.sort(sortPlayersByAverageRating);
    user2.players.sort(sortPlayersByAverageRating);
    // заполнение массивов players ссылками на этих же игроков из resultAllPlayers =====================================

    // let str1 = '', str2 = '';
    // for (let i = 0; i < user1.players.length; i++) {
    //     str1 += `#${user1.players[i].card.playerId} ${user1.players[i].card.playerName} (rating - ${user1.players[i].card.averageRating}),\n`;
    // }
    // for (let i = 0; i < user2.players.length; i++) {
    //     str2 += `#${user2.players[i].card.playerId} ${user2.players[i].card.playerName} (rating - ${user2.players[i].card.averageRating}),\n`;
    // }
    //
    // console.log(match.id);
    // console.log(str1);
    // console.log(str2);
    // console.log(user1.players);
    // console.log(user2.players);
    // console.log(user1.players[0]);
    // console.log(user1.resultAllPlayers[0], '\n==============================================\n');
    //
    // user1.players[0].card.seasonRatingMarks.push(9);
    //
    // console.log(user1.players[0]);
    // console.log(user1.resultAllPlayers[0]);


    user1.players.forEach((player) => {
        //распределение в массивах игроков на позициях
        playersOnPositions[0][player.position].push(player);

        switch (player.position) {
            case 'FW':
                player.card.technicalSkills.shoot *= 3;
                player.card.physicalSkills.pace *= 3;
                player.card.physicalSkills.agility *= 3;
                player.card.physicalSkills.jump *= 3;
                break;

            case 'WG':
                player.card.technicalSkills.cross *= 3;
                player.card.technicalSkills.shoot *= 3;
                player.card.physicalSkills.pace *= 3;
                player.card.physicalSkills.agility *= 3;
                break;

            case 'CM':
                player.card.technicalSkills.pass *= 3;
                player.card.physicalSkills.agility *= 3;
                player.card.physicalSkills.strength *= 3;
                break;

            case 'CD':
                player.card.technicalSkills.tackling *= 3;
                player.card.physicalSkills.strength *= 3;
                player.card.physicalSkills.jump *= 3;
                break;

            case 'WB':
                player.card.technicalSkills.cross *= 3;
                player.card.physicalSkills.pace *= 3;
                player.card.physicalSkills.jump *= 3;
                break;
        }

        if (player.card.physicalSkills.agility === 3) playersWithSkills[0].AGIp.push(player);
        else if (player.card.physicalSkills.agility === -3) playersWithSkills[0].AGIm.push(player);

        if (player.card.technicalSkills.tackling === 3) playersWithSkills[0].TCKLp.push(player);

        if (player.card.technicalSkills.pass === 3) playersWithSkills[0].PASp.push(player);

        if (player.card.physicalSkills.stamina === -3) playersWithSkills[0].STAm.push(player);
        else if (player.card.physicalSkills.stamina === 0) playersWithSkills[0].STAz.push(player);


        //получение asm игрока
        let phy = 0, te = 0, asm;

        for (let skill in player.card.physicalSkills) {
            phy += player.card.physicalSkills[skill];
        }
        for (let skill in player.card.technicalSkills) {
            te += player.card.technicalSkills[skill];
        }

        phy = Math.min(Math.max(1, phy), 5);
        te = Math.min(Math.max(1, te), 5);

        asm = (phy + te) + player.mood;
        asm = Math.min(Math.max(1, asm), 10);

        if (asm % 1 !== 0) {
            asm += 0.5 * (player.mood < 0 ? -1 : 1);
        }

        T[0] += asm;

        debugLogs.user1.playersAsm.push({
            playerId: player.card.playerId,
            playerName: player.card.playerName,
            asm,
        }); //d
    });
    user2.players.forEach((player) => {
        //распределение в массивах игроков на позициях
        playersOnPositions[1][player.position].push(player);

        switch (player.position) {
            case 'FW':
                player.card.technicalSkills.shoot *= 3;
                player.card.physicalSkills.pace *= 3;
                player.card.physicalSkills.agility *= 3;
                player.card.physicalSkills.jump *= 3;
                break;

            case 'WG':
                player.card.technicalSkills.cross *= 3;
                player.card.technicalSkills.shoot *= 3;
                player.card.physicalSkills.pace *= 3;
                player.card.physicalSkills.agility *= 3;
                break;

            case 'CM':
                player.card.technicalSkills.pass *= 3;
                player.card.physicalSkills.agility *= 3;
                player.card.physicalSkills.strength *= 3;
                break;

            case 'CD':
                player.card.technicalSkills.tackling *= 3;
                player.card.physicalSkills.strength *= 3;
                player.card.physicalSkills.jump *= 3;
                break;

            case 'WB':
                player.card.technicalSkills.cross *= 3;
                player.card.physicalSkills.pace *= 3;
                player.card.physicalSkills.jump *= 3;
                break;
        }

        if (player.card.physicalSkills.agility === 3) playersWithSkills[1].AGIp.push(player);
        else if (player.card.physicalSkills.agility === -3) playersWithSkills[1].AGIm.push(player);

        if (player.card.technicalSkills.tackling === 3) playersWithSkills[1].TCKLp.push(player);

        if (player.card.technicalSkills.pass === 3) playersWithSkills[1].PASp.push(player);

        if (player.card.physicalSkills.stamina === -3) playersWithSkills[1].STAm.push(player);
        else if (player.card.physicalSkills.stamina === 0) playersWithSkills[1].STAz.push(player);


        //получение asm игрока
        let phy = 0, te = 0, asm;

        for (let skill in player.card.physicalSkills) {
            phy += player.card.physicalSkills[skill];
        }
        for (let skill in player.card.technicalSkills) {
            te += player.card.technicalSkills[skill];
        }

        phy = Math.min(Math.max(1, phy), 5);
        te = Math.min(Math.max(1, te), 5);

        asm = (phy + te) + player.mood;
        asm = Math.min(Math.max(1, asm), 10);

        if (asm % 1 !== 0) {
            asm += 0.5 * (player.mood < 0 ? -1 : 1);
        }

        T[0] += asm;

        debugLogs.user2.playersAsm.push({
            playerId: player.card.playerId,
            playerName: player.card.playerName,
            asm,
        }); //d
    });


    T[0] += 3; //доп очки за домашнюю тиму
    if (user1.avatar !== user2.avatar) {
        if (avatarDefying[user1.avatar].includes(user2.avatar)) {
            T[0] += 3;

            debugLogs.user1.avatarBonus = 3;//debug
        }
        else if (avatarDefying[user2.avatar].includes(user1.avatar)) {
            T[1] += 3;

            debugLogs.user2.avatarBonus = 3;//debug
        }
    } // доп очки за контр тренеров

    debugLogs.user1.T = T[0]; //d
    debugLogs.user2.T = T[1]; //d


    let advantage = Math.abs(T[0] - T[1]);
    if (advantage <= 5) {
        if (T[0] > T[1]) {
            T[1] = T[0];
        }
        else {
            T[0] = T[1];
        }
    }
    else if (advantage <= 8) {
        if (T[0] > T[1]) {
            T[0] += 3;
        }
        else {
            T[1] += 3;
        }
    }
    else {
        if (T[0] > T[1]) {
            T[0] += advantage;
        }
        else {
            T[1] += advantage;
        }
    }

    debugLogs.user1.T_adv = T[0]; //d
    debugLogs.user2.T_adv = T[1]; //d


    function changeRating(player, ratingDiff) {
        player.matchRating = Number((player.matchRating + ratingDiff).toFixed(2));
    }

    let xG = [0, 0], momentsCount = [0, 0], xG1 = [0, 0], xG2 = [0, 0], lastPotGoalMinute = null;


    matchLogs.push({
        minute: 0,
        user: null,
        momentType: null,
        result: 'Match started!'
    });


    //первый тайм ===================================================================
    momentsCount[0] = Math.round(T[0] / ((T[0] + T[1]) / 15));
    momentsCount[1] = 15 - momentsCount[0];

    for (let i = 3; i <= 45; i += 3) {
        let player = MathService.randomFloat(0, T[0] + T[1]) <= T[0] ? 0 : 1,
            randNum = MathService.randomInteger(1, 10),
            momentType = randNum >= 1 && randNum <= 2 ? 13 : randNum >= 3 && randNum <= 6 ? 12 : 11,
            momentWeight = 0.5 * (momentType - 9);

        if (momentsCount[player] === 0) player = (player + 1) % 2;
        momentsCount[player]--;


        T[player] += momentWeight; // чтобы получить вес 1/1.5/2 (11 -9. 12 - 9, 13 - 9)
        xG[player] += momentWeight;
        xG1[player] += momentWeight;


        matchLogs.push({
            minute: i,
            user: player,
            momentType,
            result: ''
        });
        eventsArrs[player].push(momentType); //d
    }

    xG[0] /= 10;
    xG[1] /= 10;
    xG1[0] /= 10;
    xG1[1] /= 10;
    //первый тайм ===================================================================


    eventsArrs[0].push("==="); //d
    eventsArrs[1].push("==="); //d


    //второй тайм ===================================================================
    momentsCount[0] = Math.round(T[0] / ((T[0] + T[1]) / 15));
    momentsCount[1] = 15 - momentsCount[0];

    for (let i = 48; i <= 90; i += 3) {
        let player = MathService.randomFloat(0, T[0] + T[1]) <= T[0] ? 0 : 1,
            randNum = MathService.randomInteger(1, 10),
            momentType = randNum >= 1 && randNum <= 2 ? 13 : randNum >= 3 && randNum <= 6 ? 12 : 11,
            momentWeight = 0.5 * (momentType - 9);

        if (momentsCount[player] === 0) player = (player + 1) % 2;
        momentsCount[player]--;


        T[player] += momentWeight; // чтобы получить вес 1/1.5/2 (11 -9. 12 - 9, 13 - 9)
        xG[player] += momentWeight;
        xG2[player] += momentWeight;


        matchLogs.push({
            minute: i,
            user: player,
            momentType,
            result: ''
        });
        eventsArrs[player].push(momentType); //d
    }

    xG[0] /= 10;
    xG[1] /= 10;
    xG2[0] /= 10;
    xG2[1] /= 10;
    //второй тайм ===================================================================

    for (let i = matchLogs.length - 1; i > 0; i--) {
        if (matchLogs[i].momentType === 13) {
            lastPotGoalMinute = matchLogs[i].minute;
            break;
        }
    }

    let playersWithYellowCards = [[], []], injuredPlayers = [[], []];

    xG[0] = xG1[0];
    xG[1] = xG1[1];

    for (let i = 0; i < 30; i++) {
        // добавляем xG первого тайма
        if (i === 15) {
            xG[0] += xG2[0];
            xG[1] += xG2[1];
        }


        let event = matchLogs[i + 1];

        let eventCode,
            eventedUser, scoredUser, anotherUser,
            AGIpPlayersCount, TCKLpPlayersCount, PASpPlayersCount, AGImPlayersCount, STAmLength, STAzLength, // для удобства
            actedPlayer, possibleActedPlayers, injuredPlayer;

        switch (event.momentType) {
            case 11:
                eventedUser = event.user === 0 ? user1 : user2;
                anotherUser = event.user === 0 ? user2 : user1;

                eventCode = MathService.randomInteger(111, 115);

                switch (eventCode) {
                    case 111:
                        injuredPlayer = findInjured_111(eventedUser, playersWithSkills[event.user], injuredPlayers[event.user]);
                        injuredPlayers[event.user].push(injuredPlayer.card.playerId);
                        changeRating(injuredPlayer, -0.2);

                        actedPlayer = findActed_111(anotherUser);
                        actedPlayer.card.seasonYellowCardsCount++;
                        playersWithYellowCards[(event.user + 1) % 2].push(actedPlayer.card.playerId);
                        changeRating(actedPlayer, -0.4);

                        if (playersWithYellowCards[(event.user + 1) % 2].includes(actedPlayer.card.playerId)) {
                            actedPlayer.card.unavailableMatchesCount = 4;

                            // удаление из массива игроков
                            for (let plIdx = 0; plIdx < anotherUser.players.length; plIdx++) {
                                if (anotherUser.players[plIdx].card.playerId === actedPlayer.card.playerId) {
                                    anotherUser.players.splice(plIdx, 1);
                                    break;
                                }
                            }

                            // удаление из игроков на позициях
                            for (let plIdx = 0; plIdx < playersOnPositions[(event.user + 1) % 2][actedPlayer.position].length; plIdx++) {
                                if (playersOnPositions[(event.user + 1) % 2][actedPlayer.position][plIdx].card.playerId === actedPlayer.card.playerId) {
                                    playersOnPositions[(event.user + 1) % 2][actedPlayer.position].splice(plIdx, 1);
                                    break;
                                }
                            }

                            // удаление из игроков по скиллах ===========================================================================
                            if (actedPlayer.card.physicalSkills.agility > 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].AGIp.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].AGIp[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].AGIp.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }
                            else if (actedPlayer.card.physicalSkills.agility < 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].AGIm.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].AGIm[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].AGIm.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }

                            if (actedPlayer.card.physicalSkills.stamina === 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].STAz.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].STAz[plIdx].playerId === actedPlayer.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].STAz.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }
                            else if (actedPlayer.card.physicalSkills.stamina < 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].STAm.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].STAm[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].STAm.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }

                            if (actedPlayer.card.technicalSkills.tackling > 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].TCKLp.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].TCKLp[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].TCKLp.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }

                            if (actedPlayer.card.technicalSkills.pass > 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].PASp.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].PASp[plIdx].card.playerId === actedPlayer.card.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].PASp.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }
                            // удаление из игроков по скиллах ===========================================================================
                        }

                        if (actedPlayer.card.seasonYellowCardsCount === 8) {
                            //unavailable
                        }

                        matchLogs[i + 1].result = `${injuredPlayer.card.playerName} is injured - ${actedPlayer.card.playerName} will be punished by a yellow card`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: -0.4,
                            },
                            {
                                playerId: injuredPlayer.card.playerId,
                                playerName: injuredPlayer.card.playerName,
                                position: injuredPlayer.position,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;

                    case 112:
                        AGImPlayersCount = playersWithSkills[event.user].AGIm.length;

                        if (AGImPlayersCount) actedPlayer = playersWithSkills[event.user].AGIm[MathService.randomInteger(0, AGImPlayersCount - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].result = `Unlucky dribbling - ${actedPlayer.card.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;

                    case 113:
                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];

                        if (possibleActedPlayers.length) actedPlayer = possibleActedPlayers[MathService.randomInteger(0, possibleActedPlayers.length - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(0, eventedUser.players.length - 2)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].result = `Unlucky cross - ${actedPlayer.card.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;

                    case 114:
                        matchLogs[i + 1].result = `Slow passing in the midfield`;
                        matchLogs[i + 1].players = [];
                        break;

                    case 115:
                        actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].result = `${actedPlayer.card.playerName} made a mistake`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;
                }
                break;

            case 12:
                eventedUser = event.user === 0 ? user1 : user2;
                anotherUser = event.user === 0 ? user2 : user1;

                eventCode = MathService.randomInteger(121, 125);

                switch (eventCode) {
                    case 121:
                        actedPlayer = eventedUser.players[MathService.randomInteger(0, eventedUser.players.length - 2)];

                        matchLogs[i + 1].result = `Shot off target`;
                        matchLogs[i + 1].players = [{
                            playerId: actedPlayer.card.playerId,
                            playerName: actedPlayer.card.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0,
                        }];
                        break;

                    case 122:
                        AGIpPlayersCount = playersWithSkills[event.user].AGIp.length;

                        if (AGIpPlayersCount) actedPlayer = playersWithSkills[event.user].AGIp[MathService.randomInteger(0, AGIpPlayersCount - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(eventedUser.players.length - 6, eventedUser.players.length - 2)];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].result = `Successful dribbling by ${actedPlayer.card.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: 0.2,
                            }
                        ];
                        break;

                    case 123:
                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];
                        possibleActedPlayers.sort(function (a, b) {
                            if (a.card.averageRating < b.card.averageRating) return -1;
                            if (a.card.averageRating > b.card.averageRating) return 1;
                            return 0;
                        });

                        actedPlayer = possibleActedPlayers[possibleActedPlayers.length - 1];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].result = `Promising cross by ${actedPlayer.card.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: 0.2,
                            }
                        ];
                        break;

                    case 124:
                        TCKLpPlayersCount = playersWithSkills[event.user].TCKLp.length;

                        if (TCKLpPlayersCount) actedPlayer = playersWithSkills[event.user].TCKLp[MathService.randomInteger(0, TCKLpPlayersCount - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(eventedUser.players.length - 6, eventedUser.players.length - 2)];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].result = `Interception by ${actedPlayer.card.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: 0.2,
                            }
                        ];
                        break;

                    case 125:
                        PASpPlayersCount = playersWithSkills[event.user].PASp.length;

                        if (PASpPlayersCount) actedPlayer = playersWithSkills[event.user].PASp[MathService.randomInteger(0, PASpPlayersCount - 1)];
                        else {
                            playersOnPositions[event.user].CM.sort(function (a, b) {
                                if (a.card.averageRating < b.card.averageRating) return -1;
                                if (a.card.averageRating > b.card.averageRating) return 1;
                                return 0;
                            });
                            actedPlayer = playersOnPositions[event.user].CM[playersOnPositions[event.user].CM.length - 1];
                        }

                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].result = `Promising through pass by ${actedPlayer.card.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.card.playerId,
                                playerName: actedPlayer.card.playerName,
                                position: actedPlayer.position,
                                ratingDiff: 0.2,
                            }
                        ];
                        break;
                }
                break;

            case 13:
                let chanceNumbers = Math.floor(xG[event.user] / 0.25);

                if (event.minute === lastPotGoalMinute && goals[0] === goals[1]) chanceNumbers++;

                let goal = MathService.randomInteger(1, 10) <= chanceNumbers ? 1 : 0;

                if (goal) {
                    let scoredPlayer, assistantPlayer, possibleScoredPlayers;

                    scoredUser = event.user === 0 ? user1 : user2;
                    anotherUser = event.user === 0 ? user2 : user1;

                    goals[event.user]++;
                    xG[event.user] = Math.max(0, xG[event.user] - 1); //чтобы xG игрока не был меньше 0

                    switch (scoredUser.tactic.teamFocus) {
                        case 'wing-play':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                eventCode = 131;


                                if (playersOnPositions[event.user].FW.length) {
                                    scoredPlayer = playersOnPositions[event.user].FW[0];

                                    if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                    else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                }
                                else if (playersOnPositions[event.user].WG.length) {
                                    let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                    scoredPlayer = playersOnPositions[event.user].WG[idx];

                                    if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                    else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                }
                                else if (playersOnPositions[event.user].CM.length) {
                                    let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                    scoredPlayer = playersOnPositions[event.user].CM[idx];

                                    if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                    else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                        let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                    }
                                }

                                changeRating(scoredPlayer, 0.8);
                                changeRating(assistantPlayer, 0.8);


                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }

                                matchLogs[i + 1].result = `${scoredPlayer.card.playerName} scores a header delivered by ${assistantPlayer.card.playerName}`;
                                matchLogs[i + 1].players = [
                                    {
                                        playerId: scoredPlayer.card.playerId,
                                        playerName: scoredPlayer.card.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerId: assistantPlayer.card.playerId,
                                        playerName: assistantPlayer.card.playerName,
                                        position: assistantPlayer.position,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    },
                                ];
                            }
                            else {
                                eventCode = MathService.randomInteger(131, 136);

                                switch (eventCode) {
                                    case 131:
                                        if (playersOnPositions[event.user].FW.length) {
                                            scoredPlayer = playersOnPositions[event.user].FW[0];

                                            if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        }
                                        else if (playersOnPositions[event.user].WG.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].WG[idx];

                                            if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        }
                                        else if (playersOnPositions[event.user].CM.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];

                                            if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `${scoredPlayer.card.playerName} scores a header delivered by ${assistantPlayer.card.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.card.playerId,
                                                playerName: assistantPlayer.card.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        break;

                                    case 132:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.4);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.card.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.4,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 133:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `${scoredPlayer.card.playerName} scores after solo breakthrough`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 134:
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            // scoredPlayer = (FW|WG)
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                            // assistantPlayer = CM
                                            if (playersOnPositions[event.user].CM.length) {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                            }
                                            // assistantPlayer = (CD|WB)
                                            else {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                        }
                                        else {
                                            // scoredPlayer = CM
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];


                                            // assistantPlayer = (CD|WB)
                                            if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                            // assistantPlayer = CM
                                            else {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.card.playerName} runs and ${assistantPlayer.card.playerName} provides an assist`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.card.playerId,
                                                playerName: assistantPlayer.card.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 135:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.card.playerName} used opponent’s silly mistake`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 136:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.card.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.5,
                                            }
                                        ];
                                        break;
                                }
                            }
                            break;

                        case 'midfield':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                eventCode = 134;


                                if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                    // scoredPlayer = (FW|WG)
                                    possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                    scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                    // assistantPlayer = CM
                                    if (playersOnPositions[event.user].CM.length) {
                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                    }
                                    // assistantPlayer = (CD|WB)
                                    else {
                                        let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                    }
                                }
                                else {
                                    // scoredPlayer = CM
                                    let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                    scoredPlayer = playersOnPositions[event.user].CM[idx];


                                    // assistantPlayer = (CD|WB)
                                    if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                        let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                    }
                                    // assistantPlayer = CM
                                    else {
                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                    }
                                }

                                changeRating(scoredPlayer, 0.8);
                                changeRating(assistantPlayer, 0.8);


                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }

                                matchLogs[i + 1].result = `Goal! ${scoredPlayer.card.playerName} runs and ${assistantPlayer.card.playerName} provides an assist`;
                                matchLogs[i + 1].players = [
                                    {
                                        playerId: scoredPlayer.card.playerId,
                                        playerName: scoredPlayer.card.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerId: assistantPlayer.card.playerId,
                                        playerName: assistantPlayer.card.playerName,
                                        position: assistantPlayer.position,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    }
                                ];
                            }
                            else {
                                eventCode = MathService.randomInteger(131, 136);

                                switch (eventCode) {
                                    case 131:
                                        if (playersOnPositions[event.user].FW.length) {
                                            scoredPlayer = playersOnPositions[event.user].FW[0];

                                            if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        }
                                        else if (playersOnPositions[event.user].WG.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].WG[idx];

                                            if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        }
                                        else if (playersOnPositions[event.user].CM.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];

                                            if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `${scoredPlayer.card.playerName} scores a header delivered by ${assistantPlayer.card.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.card.playerId,
                                                playerName: assistantPlayer.card.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        break;

                                    case 132:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.4);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.card.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.4,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 133:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `${scoredPlayer.card.playerName} scores after solo breakthrough`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 134:
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            // scoredPlayer = (FW|WG)
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                            // assistantPlayer = CM
                                            if (playersOnPositions[event.user].CM.length) {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                            }
                                            // assistantPlayer = (CD|WB)
                                            else {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                        }
                                        else {
                                            // scoredPlayer = CM
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];


                                            // assistantPlayer = (CD|WB)
                                            if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                            // assistantPlayer = CM
                                            else {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.card.playerName} runs and ${assistantPlayer.card.playerName} provides an assist`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.card.playerId,
                                                playerName: assistantPlayer.card.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 135:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.card.playerName} used opponent’s silly mistake`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 136:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.card.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.card.playerId,
                                                playerName: scoredPlayer.card.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.5,
                                            }
                                        ];
                                        break;
                                }
                            }
                            break;

                        case 'stepUp':
                            eventCode = MathService.randomInteger(131, 136);
                            switch (eventCode) {
                                case 131:
                                    if (playersOnPositions[event.user].FW.length) {
                                        scoredPlayer = playersOnPositions[event.user].FW[0];

                                        if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                    }
                                    else if (playersOnPositions[event.user].WG.length) {
                                        let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                        scoredPlayer = playersOnPositions[event.user].WG[idx];

                                        if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                        else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                    }
                                    else if (playersOnPositions[event.user].CM.length) {
                                        let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                        scoredPlayer = playersOnPositions[event.user].CM[idx];

                                        if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                        else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                            let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                        }
                                    }

                                    changeRating(scoredPlayer, 0.8);
                                    changeRating(assistantPlayer, 0.8);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].result = `${scoredPlayer.card.playerName} scores a header delivered by ${assistantPlayer.card.playerName}`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerId: assistantPlayer.card.playerId,
                                            playerName: assistantPlayer.card.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        },
                                    ];
                                    break;

                                case 132:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 0.4);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.card.playerName}`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.4,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 133:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 1);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].result = `${scoredPlayer.card.playerName} scores after solo breakthrough`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 134:
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        // scoredPlayer = (FW|WG)
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                        // assistantPlayer = CM
                                        if (playersOnPositions[event.user].CM.length) {
                                            assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                        }
                                        // assistantPlayer = (CD|WB)
                                        else {
                                            let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                        }
                                    }
                                    else {
                                        // scoredPlayer = CM
                                        let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                        scoredPlayer = playersOnPositions[event.user].CM[idx];


                                        // assistantPlayer = (CD|WB)
                                        if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                            let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                        }
                                        // assistantPlayer = CM
                                        else {
                                            assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                        }
                                    }

                                    changeRating(scoredPlayer, 0.8);
                                    changeRating(assistantPlayer, 0.8);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].result = `Goal! ${scoredPlayer.card.playerName} runs and ${assistantPlayer.card.playerName} provides an assist`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerId: assistantPlayer.card.playerId,
                                            playerName: assistantPlayer.card.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 135:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 1);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].result = `Goal! ${scoredPlayer.card.playerName} used opponent’s silly mistake`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 136:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 0.8);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                    }

                                    matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.card.playerName}`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.card.playerId,
                                            playerName: scoredPlayer.card.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.5,
                                        }
                                    ];
                                    break;
                            }
                            break;
                    }


                    //поиск виноватого игрока ================================================
                    let value = Math.random(),
                        anotherUserIdx = (event.user + 1) % 2,
                        guiltPlayer;

                    if (value <= 0.15) guiltPlayer = playersOnPositions[anotherUserIdx].GK[0];
                    else if (value <= 0.30) {
                        let possibleGuiltPlayers = [...playersOnPositions[anotherUserIdx].FW, ...playersOnPositions[anotherUserIdx].WG];
                        guiltPlayer = possibleGuiltPlayers[MathService.randomInteger(0, possibleGuiltPlayers.length - 1)];
                    }
                    else if (value <= 0.60) guiltPlayer = playersOnPositions[anotherUserIdx].CM[MathService.randomInteger(0, playersOnPositions[anotherUserIdx].CM.length - 1)];
                    else {
                        let possibleGuiltPlayers = [...playersOnPositions[anotherUserIdx].CD, ...playersOnPositions[anotherUserIdx].WB];
                        guiltPlayer = possibleGuiltPlayers[MathService.randomInteger(0, possibleGuiltPlayers.length - 1)];
                    }

                    changeRating(guiltPlayer, -0.2);

                    matchLogs[i + 1].players.push({
                        playerId: guiltPlayer.card.playerId,
                        playerName: guiltPlayer.card.playerName,
                        position: guiltPlayer.position,
                        role: 'guilt',
                        ratingDiff: -0.2,
                    });
                    //поиск виноватого игрока ================================================

                    // -0.2 пропустившим гол игрокам
                    for (let playerIndex = 0; playerIndex < anotherUser.players.length; playerIndex++) changeRating(anotherUser.players[playerIndex], -0.2);
                    matchLogs[i + 1].players.push({
                        playerName: 'Another team players',
                        position: 'Another team positions',
                        role: 'none',
                        ratingDiff: -0.2,
                    });
                }
                else {
                    eventCode = 130;

                    let anotherUser = event.user === 0 ? user2 : user1;

                    actedPlayer = anotherUser.players[anotherUser.players.length - 1];
                    changeRating(actedPlayer, 0.4);

                    matchLogs[i + 1].result = `Shot on target`;
                    matchLogs[i + 1].players = [
                        {
                            playerId: actedPlayer.card.playerId,
                            playerName: actedPlayer.card.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.4,
                        }
                    ];
                }
                break;
        }

        matchLogs[i + 1].code = eventCode;
        matchLogs[i + 1].score = goals[0] + '-' + goals[1];
    }

    // рассчёт рейтинга игроков за сезон (среднее арифм)===========================
    for (let playerIndex = 0; playerIndex < user1.players.length; playerIndex++) {
        let sumOfMarks = [0, 0];

        user1.players[playerIndex].seasonRatingMarks.push(user1.players[playerIndex].matchRating);

        for (let marksIndex = 0; marksIndex < user1.players[playerIndex].seasonRatingMarks.length; marksIndex++) {
            sumOfMarks[0] += user1.players[playerIndex].seasonRatingMarks[marksIndex];
        }

        user1.players[playerIndex].averageRating = Number((sumOfMarks[0] / user1.players[playerIndex].seasonRatingMarks.length).toFixed(2));
    }

    // for (let playerIndex = 0; playerIndex < 11; playerIndex++) {
    //     let sumOfMarks = [0, 0];
    //
    //     user1.players[playerIndex].seasonRatingMarks.push(user1.players[playerIndex].matchRating);
    //
    //     for (let marksIndex = 0; marksIndex < user1.players[playerIndex].seasonRatingMarks.length; marksIndex++) {
    //         sumOfMarks[0] += user1.players[playerIndex].seasonRatingMarks[marksIndex];
    //     }
    //
    //     user1.players[playerIndex].averageRating = Number((sumOfMarks[0] / user1.players[playerIndex].seasonRatingMarks.length).toFixed(2));
    //
    //
    //     user2.players[playerIndex].seasonRatingMarks.push(user2.players[playerIndex].matchRating);
    //
    //     for (let marksIndex = 0; marksIndex < user2.players[playerIndex].seasonRatingMarks.length; marksIndex++) {
    //         sumOfMarks[1] += user2.players[playerIndex].seasonRatingMarks[marksIndex];
    //     }
    //
    //     user2.players[playerIndex].averageRating = Number((sumOfMarks[1] / user2.players[playerIndex].seasonRatingMarks.length).toFixed(2));
    // }


    function sortById(a, b) {
        if (a.playerId < b.playerId) return -1;
        if (a.playerId > b.playerId) return 1;
        return 0;
    }

    user1.players.sort(sortById);
    user1.resultLastTeam.sort(sortById);
    user1.resultAllPlayers.sort(sortById);

    user2.players.sort(sortById);
    user2.resultLastTeam.sort(sortById);
    user2.resultAllPlayers.sort(sortById);


    let allPlayersIndex = 0;
    for (let playerIndex = 0; playerIndex < 11; playerIndex++) {
        user1.resultLastTeam[playerIndex].seasonRatingMarks = user1.players[playerIndex].seasonRatingMarks;
        user1.resultLastTeam[playerIndex].averageRating = user1.players[playerIndex].averageRating;


        while (user1.players[playerIndex].playerId !== user1.resultAllPlayers[allPlayersIndex].playerId) allPlayersIndex++;

        user1.resultAllPlayers[allPlayersIndex].seasonRatingMarks = user1.players[playerIndex].seasonRatingMarks;
        user1.resultAllPlayers[allPlayersIndex].averageRating = user1.players[playerIndex].averageRating;
    }

    allPlayersIndex = 0;
    for (let playerIndex = 0; playerIndex < 11; playerIndex++) {
        user2.resultLastTeam[playerIndex].seasonRatingMarks = user2.players[playerIndex].seasonRatingMarks;
        user2.resultLastTeam[playerIndex].averageRating = user2.players[playerIndex].averageRating;


        while (user2.players[playerIndex].playerId !== user2.resultAllPlayers[allPlayersIndex].playerId) allPlayersIndex++;

        user2.resultAllPlayers[allPlayersIndex].seasonRatingMarks = user2.players[playerIndex].seasonRatingMarks;
        user2.resultAllPlayers[allPlayersIndex].averageRating = user2.players[playerIndex].averageRating;
    }
    // рассчёт рейтинга игроков за сезон (среднее арифм)===========================


    // изменение статуса unavailable для всех игроков юзеров===========================
    for (let plIdx = 0; plIdx < user1.resultAllPlayers; plIdx++) {
        let currPlayer = user1.resultAllPlayers[plIdx];
        if (currPlayer.unavailableMatchesCount > 0) currPlayer.unavailableMatchesCount--;
    }

    for (let plIdx = 0; plIdx < user2.resultAllPlayers; plIdx++) {
        let currPlayer = user2.resultAllPlayers[plIdx];
        if (currPlayer.unavailableMatchesCount > 0) currPlayer.unavailableMatchesCount--;
    }
    // изменение статуса unavailable для всех игроков юзеров===========================


    let resultLogs = {
        user1: {
            id: user1.id,
            players: user1.players.map(player => {
                return {
                    playerId: player.playerId,
                    playerName: player.playerName,
                    head: player.head,
                    body: player.body,
                    clothing: player.clothing,
                    hair: player.hair,
                };
            })
        },
        user2: {
            id: user2.id,
            players: user2.players.map(player => {
                return {
                    playerId: player.playerId,
                    playerName: player.playerName,
                    head: player.head,
                    body: player.body,
                    clothing: player.clothing,
                    hair: player.hair,
                };
            })
        },
        matchEvents: matchLogs
    };


    //debug===========================================================================
    debugLogs.logs = resultLogs; //d
    debugLogs.score = goals[0] + '-' + goals[1]; //d
    debugLogs.user1.totalEvents = eventsArrs[0].join(' '); //d
    debugLogs.user2.totalEvents = eventsArrs[1].join(' '); //d

    let logsText = '';

    logsText += 'Звёзды игроков:\n=============================\n';

    logsText += 'Игрок 1:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${debugLogs.user1.playersAsm[i].playerName}: ${debugLogs.user1.playersAsm[i].asm}\n`;
    }
    logsText += '=================\n';

    logsText += 'Игрок 2:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${debugLogs.user2.playersAsm[i].playerName}: ${debugLogs.user2.playersAsm[i].asm}\n`;
    }
    logsText += '=================\n';

    logsText += '\n\nРейтинг карточек перед матчем:\n=============================\n';

    logsText += 'Игрок 1:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${user1.players[i].playerName}: 6.6\n`;
    }
    logsText += '=================\n';

    logsText += 'Игрок 2:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${user2.players[i].playerName}: 6.6\n`;
    }
    logsText += '=================\n';


    logsText += '\n\nЛоги матча:\n=============================\n';
    for (let i = 1; i < matchLogs.length; i++) {
        let playersRatingString = '';

        for (let j = 0; j < matchLogs[i].players.length; j++) {
            playersRatingString += `${matchLogs[i].players[j].playerName} (${matchLogs[i].players[j].ratingDiff}), `;
        }

        playersRatingString = playersRatingString.substring(0, playersRatingString.length - 2);

        logsText += `${matchLogs[i].minute} минута, игрок ${matchLogs[i].user + 1}, событие ${matchLogs[i].momentType}.\nРезультат: ${matchLogs[i].result}.\nИзменение рейтинга: ${playersRatingString}.\n====================================\n`;
    }


    logsText += `\n\nСчёт: ${goals[0]}-${goals[1]}\n`;


    let yellowCards = [[], []];
    for (let i = 1; i < matchLogs.length; i++) {
        let event = matchLogs[i];
        if (event.momentType === 11 && event.result.endsWith('card')) yellowCards[event.user].push({
            actedPlayer: event.players[0].playerName,
            injuredPlayer: event.players[1].playerName,
        });
    }

    logsText += `\n\nЖёлтые карточки:\n\n`;

    logsText += `Игрок 1:\n===============\n`;
    for (let i = 0; i < yellowCards[0].length; i++) {
        logsText += `Injured: ${yellowCards[0][i].injuredPlayer}, Acted: ${yellowCards[0][i].actedPlayer}\n`;
    }
    logsText += `===============\n`;

    logsText += `\nИгрок 2:\n===============\n`;
    for (let i = 0; i < yellowCards[1].length; i++) {
        logsText += `Injured: ${yellowCards[1][i].injuredPlayer}, Acted: ${yellowCards[1][i].actedPlayer}\n`;
    }
    logsText += `===============\n`;


    logsText += '\n\nРейтинг карточек после матча:\n=============================\n';

    logsText += 'Игрок 1:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${user1.players[i].playerName}: ${user1.players[i].matchRating}\n`;
    }
    logsText += '=================\n';

    logsText += 'Игрок 2:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${user2.players[i].playerName}: ${user2.players[i].matchRating}\n`;
    }
    logsText += '=================\n';

    debugLogs.logsText = logsText;
    //debug===========================================================================

    if (saveToDB) {
        let
            user1UpdateLastTeamQuery = prisma.user.update({
                where: {
                    id: user1.id,
                },
                data: {
                    lastTeam: JSON.stringify(user1.resultLastTeam)
                }
            }),
            user1UpdateAllPlayersQuery = prisma.user_players.update({
                where: {
                    userId: user1.id,
                },
                data: {
                    playersJson: JSON.stringify(user1.resultAllPlayers)
                }
            }),
            user2UpdateLastTeamQuery = prisma.user.update({
                where: {
                    id: user2.id,
                },
                data: {
                    lastTeam: JSON.stringify(user2.resultLastTeam)
                }
            }),
            user2UpdateAllPlayersQuery = prisma.user_players.update({
                where: {
                    userId: user2.id,
                },
                data: {
                    playersJson: JSON.stringify(user2.resultAllPlayers)
                }
            }),
            matchUpdateQuery = prisma.match.update({
                where: {
                    id: match.id
                },
                data: {
                    logs: JSON.stringify(resultLogs),
                    score: goals[0] + ':' + goals[1],
                }
            });

        await prisma.$transaction([user1UpdateLastTeamQuery, user1UpdateAllPlayersQuery, user2UpdateLastTeamQuery, user2UpdateAllPlayersQuery, matchUpdateQuery]);
    }

    return debugLogs;
}

async function playDebugMatch_v_08_12_1(matchId, saveToDB) {
    function findInjured_111(eventedUser, playersWithSkills, injuredPlayers) {
        let STAmPlayersCount = playersWithSkills.STAm.length,
            STAzPlayersCount = playersWithSkills.STAz.length,
            possibleInjuredPlayers = [],
            injuredPlayer;

        if (STAmPlayersCount) {
            for (let j = 0; j < playersWithSkills.STAm.length; j++) {
                let currPlayer = playersWithSkills.STAm[j];
                if (!injuredPlayers.includes(currPlayer.playerId)) possibleInjuredPlayers.push(currPlayer);
            }
        }

        if (!possibleInjuredPlayers.length && STAzPlayersCount) {
            for (let j = 0; j < playersWithSkills.STAz.length; j++) {
                let currPlayer = playersWithSkills.STAz[j];
                if (!injuredPlayers.includes(currPlayer.playerId)) possibleInjuredPlayers.push(currPlayer);
            }
        }

        if (!possibleInjuredPlayers.length) {
            for (let j = 0; j < 5; j++) {
                let currPlayer = eventedUser.players[j];
                if (!injuredPlayers.includes(currPlayer.playerId)) possibleInjuredPlayers.push(currPlayer);
            }

            if (!possibleInjuredPlayers.length) {
                for (let j = 0; j < 5; j++) possibleInjuredPlayers.push(eventedUser.players[j]);
            }
        }

        injuredPlayer = possibleInjuredPlayers[MathService.randomInteger(0, possibleInjuredPlayers.length - 1)];

        return injuredPlayer;
    }

    function findActed_111(anotherUser) {
        let actedPlayer = anotherUser.players[MathService.randomInteger(0, anotherUser.players.length - 2)];

        return actedPlayer;
    }


    const match = await prisma.match.findFirst({
        select: {
            id: true,
            player1: {
                select: {
                    id: true,
                    avatar: true,
                    lastTactic: true,
                    lastTeam: true,
                    players: {
                        select: {
                            playersJson: true
                        }
                    },
                },
            },
            player2: {
                select: {
                    id: true,
                    avatar: true,
                    lastTactic: true,
                    lastTeam: true,
                    players: {
                        select: {
                            playersJson: true
                        }
                    },
                }
            },
        },
        where: {
            id: matchId
        },
    });

    let
        matchLogs = [],
        user1 = {
            id: match.player1.id,
            avatar: match.player1.avatar,
            tactic: JSON.parse(match.player1.lastTactic),
            players: JSON.parse(match.player1.lastTeam).map(player => {
                return {
                    playerId: player.playerId,
                    playerName: player.playerName,
                    head: player.head,
                    body: player.body,
                    clothing: player.clothing,
                    hair: player.hair,
                    physicalSkills: player.physicalSkills,
                    technicalSkills: player.technicalSkills,
                    mood: player.mood,
                    position: player.position,
                    isGoalKeeper: player.isGoalKeeper,
                    seasonRatingMarks: player.seasonRatingMarks,
                    averageRating: player.averageRating,
                    seasonYellowCardsCount: player.seasonYellowCardsCount,
                    matchRating: 6.6,
                }
            }),
            resultLastTeam: JSON.parse(match.player1.lastTeam),
            resultAllPlayers: JSON.parse(match.player1.players.playersJson),
        },
        user2 = {
            id: match.player2.id,
            avatar: match.player2.avatar,
            tactic: JSON.parse(match.player2.lastTactic),
            players: JSON.parse(match.player2.lastTeam).map(player => {
                return {
                    playerId: player.playerId,
                    playerName: player.playerName,
                    head: player.head,
                    body: player.body,
                    clothing: player.clothing,
                    hair: player.hair,
                    physicalSkills: player.physicalSkills,
                    technicalSkills: player.technicalSkills,
                    mood: player.mood,
                    position: player.position,
                    isGoalKeeper: player.isGoalKeeper,
                    seasonRatingMarks: player.seasonRatingMarks,
                    averageRating: player.averageRating,
                    seasonYellowCardsCount: player.seasonYellowCardsCount,
                    matchRating: 6.6,
                }
            }),
            resultLastTeam: JSON.parse(match.player2.lastTeam),
            resultAllPlayers: JSON.parse(match.player2.players.playersJson),
        },
        playersOnPositions = [
            {
                'FW': [],
                'WG': [],
                'CM': [],
                'WB': [],
                'CD': [],
                'GK': [],
            },
            {
                'FW': [],
                'WG': [],
                'CM': [],
                'WB': [],
                'CD': [],
                'GK': [],
            }
        ],
        playersWithSkills = [
            {
                AGIp: [],
                TCKLp: [],
                PASp: [],
                STAz: [],
                STAm: [],
                AGIm: [],
            },
            {
                AGIp: [],
                TCKLp: [],
                PASp: [],
                STAz: [],
                STAm: [],
                AGIm: [],
            },
        ],
        T = [0, 0],
        goals = [0, 0],
        eventsArrs = [[], []], //d
        debugLogs = {
            matchId: match.id,
            score: null,
            user1: {
                id: user1.id,
                players: user1.players,
                playersAsm: [],
                homeBonus: 3,
                avatarBonus: 0,
                T: 0,
            },
            user2: {
                id: user2.id,
                players: user2.players,
                playersAsm: [],
                homeBonus: 0,
                avatarBonus: 0,
                T: 0,
            },
        }; //d


    user1.players.forEach((player) => {
        //распределение в массивах игроков на позициях
        playersOnPositions[0][player.position].push(player);

        switch (player.position) {
            case 'FW':
                player.technicalSkills.shoot *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.agility *= 3;
                player.physicalSkills.jump *= 3;
                break;

            case 'WG':
                player.technicalSkills.cross *= 3;
                player.technicalSkills.shoot *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.agility *= 3;
                break;

            case 'CM':
                player.technicalSkills.pass *= 3;
                player.physicalSkills.agility *= 3;
                player.physicalSkills.strength *= 3;
                break;

            case 'CD':
                player.technicalSkills.tackling *= 3;
                player.physicalSkills.strength *= 3;
                player.physicalSkills.jump *= 3;
                break;

            case 'WB':
                player.technicalSkills.cross *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.jump *= 3;
                break;
        }

        if (player.physicalSkills.agility === 3) playersWithSkills[0].AGIp.push(player);
        else if (player.physicalSkills.agility === -3) playersWithSkills[0].AGIm.push(player);

        if (player.technicalSkills.tackling === 3) playersWithSkills[0].TCKLp.push(player);

        if (player.technicalSkills.pass === 3) playersWithSkills[0].PASp.push(player);

        if (player.physicalSkills.stamina === -3) playersWithSkills[0].STAm.push(player);
        else if (player.physicalSkills.stamina === 0) playersWithSkills[0].STAz.push(player);


        //получение asm игрока
        let phy = 0, te = 0, asm;

        for (let skill in player.physicalSkills) {
            phy += player.physicalSkills[skill];
        }
        for (let skill in player.technicalSkills) {
            te += player.technicalSkills[skill];
        }

        phy = Math.min(Math.max(1, phy), 5);
        te = Math.min(Math.max(1, te), 5);

        asm = (phy + te) + player.mood;
        asm = Math.min(Math.max(1, asm), 10);

        if (asm % 1 !== 0) {
            asm += 0.5 * (player.mood < 0 ? -1 : 1);
        }

        T[0] += asm;

        debugLogs.user1.playersAsm.push({
            playerId: player.playerId,
            playerName: player.playerName,
            asm,
        }); //d
    });
    user2.players.forEach((player) => {
        //распределение в массивах игроков на позициях
        playersOnPositions[1][player.position].push(player);

        switch (player.position) {
            case 'FW':
                player.technicalSkills.shoot *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.agility *= 3;
                player.physicalSkills.jump *= 3;
                break;

            case 'WG':
                player.technicalSkills.cross *= 3;
                player.technicalSkills.shoot *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.agility *= 3;
                break;

            case 'CM':
                player.technicalSkills.pass *= 3;
                player.physicalSkills.agility *= 3;
                player.physicalSkills.strength *= 3;
                break;

            case 'CD':
                player.technicalSkills.tackling *= 3;
                player.physicalSkills.strength *= 3;
                player.physicalSkills.jump *= 3;
                break;

            case 'WB':
                player.technicalSkills.cross *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.jump *= 3;
                break;
        }

        if (player.physicalSkills.agility === 3) playersWithSkills[1].AGIp.push(player);
        else if (player.physicalSkills.agility === -3) playersWithSkills[1].AGIm.push(player);

        if (player.technicalSkills.tackling === 3) playersWithSkills[1].TCKLp.push(player);

        if (player.technicalSkills.pass === 3) playersWithSkills[1].PASp.push(player);

        if (player.physicalSkills.stamina === -3) playersWithSkills[1].STAm.push(player);
        else if (player.physicalSkills.stamina === 0) playersWithSkills[1].STAz.push(player);


        //получение asm игрока
        let phy = 0, te = 0, asm;

        for (let skill in player.physicalSkills) {
            phy += player.physicalSkills[skill];
        }
        for (let skill in player.technicalSkills) {
            te += player.technicalSkills[skill];
        }

        phy = Math.min(Math.max(1, phy), 5);
        te = Math.min(Math.max(1, te), 5);

        asm = (phy + te) + player.mood;
        asm = Math.min(Math.max(1, asm), 10);

        if (asm % 1 !== 0) {
            asm += 0.5 * (player.mood < 0 ? -1 : 1);
        }

        T[1] += asm;


        debugLogs.user2.playersAsm.push({
            playerId: player.playerId,
            playerName: player.playerName,
            asm,
        }); //d
    });


    function sortPlayers(a, b) {
        if (a.isGoalKeeper) return 1;
        if (b.isGoalKeeper) return -1;

        if (a.averageRating < b.averageRating) return -1;
        if (a.averageRating > b.averageRating) return 1;

        return 0;
    }

    user1.players.sort(sortPlayers);
    user2.players.sort(sortPlayers); // сортировка игроков по возрастанию рейтинга (GK всегда последние)


    T[0] += 3; //доп очки за домашнюю тиму
    if (user1.avatar !== user2.avatar) {
        if (avatarDefying[user1.avatar].includes(user2.avatar)) {
            T[0] += 3;

            debugLogs.user1.avatarBonus = 3;//debug
        }
        else if (avatarDefying[user2.avatar].includes(user1.avatar)) {
            T[1] += 3;

            debugLogs.user2.avatarBonus = 3;//debug
        }
    } // доп очки за контр тренеров

    debugLogs.user1.T = T[0]; //d
    debugLogs.user2.T = T[1]; //d


    let advantage = Math.abs(T[0] - T[1]);
    if (advantage <= 5) {
        if (T[0] > T[1]) {
            T[1] = T[0];
        }
        else {
            T[0] = T[1];
        }
    }
    else if (advantage <= 8) {
        if (T[0] > T[1]) {
            T[0] += 3;
        }
        else {
            T[1] += 3;
        }
    }
    else {
        if (T[0] > T[1]) {
            T[0] += advantage;
        }
        else {
            T[1] += advantage;
        }
    }

    debugLogs.user1.T_adv = T[0]; //d
    debugLogs.user2.T_adv = T[1]; //d


    function changeRating(player, ratingDiff) {
        player.matchRating = Number((player.matchRating + ratingDiff).toFixed(2));
    }

    let xG = [0, 0], momentsCount = [0, 0], xG1 = [0, 0], xG2 = [0, 0], lastPotGoalMinute = null;


    matchLogs.push({
        minute: 0,
        user: null,
        momentType: null,
        result: 'Match started!'
    });


    //первый тайм ===================================================================
    momentsCount[0] = Math.round(T[0] / ((T[0] + T[1]) / 15));
    momentsCount[1] = 15 - momentsCount[0];

    for (let i = 3; i <= 45; i += 3) {
        let player = MathService.randomFloat(0, T[0] + T[1]) <= T[0] ? 0 : 1,
            randNum = MathService.randomInteger(1, 10),
            momentType = randNum >= 1 && randNum <= 2 ? 13 : randNum >= 3 && randNum <= 6 ? 12 : 11,
            momentWeight = 0.5 * (momentType - 9);

        if (momentsCount[player] === 0) player = (player + 1) % 2;
        momentsCount[player]--;


        T[player] += momentWeight; // чтобы получить вес 1/1.5/2 (11 -9. 12 - 9, 13 - 9)
        xG[player] += momentWeight;
        xG1[player] += momentWeight;


        matchLogs.push({
            minute: i,
            user: player,
            momentType,
            result: ''
        });
        eventsArrs[player].push(momentType); //d
    }

    xG[0] /= 10;
    xG[1] /= 10;
    xG1[0] /= 10;
    xG1[1] /= 10;
    //первый тайм ===================================================================


    eventsArrs[0].push("==="); //d
    eventsArrs[1].push("==="); //d


    //второй тайм ===================================================================
    momentsCount[0] = Math.round(T[0] / ((T[0] + T[1]) / 15));
    momentsCount[1] = 15 - momentsCount[0];

    for (let i = 48; i <= 90; i += 3) {
        let player = MathService.randomFloat(0, T[0] + T[1]) <= T[0] ? 0 : 1,
            randNum = MathService.randomInteger(1, 10),
            momentType = randNum >= 1 && randNum <= 2 ? 13 : randNum >= 3 && randNum <= 6 ? 12 : 11,
            momentWeight = 0.5 * (momentType - 9);

        if (momentsCount[player] === 0) player = (player + 1) % 2;
        momentsCount[player]--;


        T[player] += momentWeight; // чтобы получить вес 1/1.5/2 (11 -9. 12 - 9, 13 - 9)
        xG[player] += momentWeight;
        xG2[player] += momentWeight;


        matchLogs.push({
            minute: i,
            user: player,
            momentType,
            result: ''
        });
        eventsArrs[player].push(momentType); //d
    }

    xG[0] /= 10;
    xG[1] /= 10;
    xG2[0] /= 10;
    xG2[1] /= 10;
    //второй тайм ===================================================================

    for (let i = matchLogs.length - 1; i > 0; i--) {
        if (matchLogs[i].momentType === 13) {
            lastPotGoalMinute = matchLogs[i].minute;
            break;
        }
    }

    let playersWithYellowCards = [[], []], injuredPlayers = [[], []], kickedPlayers = [0, 0];

    xG[0] = xG1[0];
    xG[1] = xG1[1];

    for (let i = 0; i < 30; i++) {
        // добавляем xG первого тайма
        if (i === 15) {
            xG[0] += xG2[0];
            xG[1] += xG2[1];
        }


        let event = matchLogs[i + 1];

        let eventCode,
            eventedUser, scoredUser, anotherUser,
            AGIpPlayersCount, TCKLpPlayersCount, PASpPlayersCount, AGImPlayersCount, STAmLength, STAzLength, // для удобства
            actedPlayer, possibleActedPlayers, injuredPlayer;

        switch (event.momentType) {
            case 11:
                eventedUser = event.user === 0 ? user1 : user2;
                anotherUser = event.user === 0 ? user2 : user1;

                eventCode = MathService.randomInteger(111, 115);

                switch (eventCode) {
                    case 111:
                        injuredPlayer = findInjured_111(eventedUser, playersWithSkills[event.user], injuredPlayers[event.user]);
                        injuredPlayers[event.user].push(injuredPlayer.playerId);
                        changeRating(injuredPlayer, -0.2);

                        actedPlayer = findActed_111(anotherUser);
                        actedPlayer.seasonYellowCardsCount++;
                        playersWithYellowCards[(event.user + 1) % 2].push(actedPlayer.playerId);
                        changeRating(actedPlayer, -0.4);

                        if (playersWithYellowCards[(event.user + 1) % 2].includes(actedPlayer.playerId)) {
                            actedPlayer.unavailableMatchesCount = 4;

                            // удаление из массива игроков
                            for (let plIdx = 0; plIdx < anotherUser.players.length; plIdx++) {
                                if (anotherUser.players[plIdx].playerId === actedPlayer.playerId) {
                                    anotherUser.players.splice(plIdx, 1);
                                    break;
                                }
                            }

                            // удаление из игроков на позициях
                            for (let plIdx = 0; plIdx < playersOnPositions[(event.user + 1) % 2][actedPlayer.position].length; plIdx++) {
                                if (playersOnPositions[(event.user + 1) % 2][actedPlayer.position][plIdx].playerId === actedPlayer.playerId) {
                                    playersOnPositions[(event.user + 1) % 2][actedPlayer.position].splice(plIdx, 1);
                                    break;
                                }
                            }

                            // удаление из игроков по скиллах ===========================================================================
                            if (actedPlayer.physicalSkills.agility > 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].AGIp.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].AGIp[plIdx].playerId === actedPlayer.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].AGIp.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }
                            else if (actedPlayer.physicalSkills.agility < 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].AGIm.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].AGIm[plIdx].playerId === actedPlayer.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].AGIm.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }

                            if (actedPlayer.physicalSkills.stamina === 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].STAz.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].STAz[plIdx].playerId === actedPlayer.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].STAz.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }
                            else if (actedPlayer.physicalSkills.stamina < 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].STAm.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].STAm[plIdx].playerId === actedPlayer.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].STAm.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }

                            if (actedPlayer.technicalSkills.tackling > 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].TCKLp.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].TCKLp[plIdx].playerId === actedPlayer.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].TCKLp.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }

                            if (actedPlayer.technicalSkills.pass > 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].PASp.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].PASp[plIdx].playerId === actedPlayer.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].PASp.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }
                            // удаление из игроков по скиллах ===========================================================================
                        }

                        if (actedPlayer.seasonYellowCardsCount === 8) {
                            //unavailable
                        }

                        matchLogs[i + 1].result = `${injuredPlayer.playerName} is injured - ${actedPlayer.playerName} will be punished by a yellow card`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.playerId,
                                playerName: actedPlayer.playerName,
                                position: actedPlayer.position,
                                ratingDiff: -0.4,
                            },
                            {
                                playerId: injuredPlayer.playerId,
                                playerName: injuredPlayer.playerName,
                                position: injuredPlayer.position,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;

                    case 112:
                        AGImPlayersCount = playersWithSkills[event.user].AGIm.length;

                        if (AGImPlayersCount) actedPlayer = playersWithSkills[event.user].AGIm[MathService.randomInteger(0, AGImPlayersCount - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].result = `Unlucky dribbling - ${actedPlayer.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.playerId,
                                playerName: actedPlayer.playerName,
                                position: actedPlayer.position,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;

                    case 113:
                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];

                        if (possibleActedPlayers.length) actedPlayer = possibleActedPlayers[MathService.randomInteger(0, possibleActedPlayers.length - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(0, eventedUser.players.length - 2)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].result = `Unlucky cross - ${actedPlayer.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.playerId,
                                playerName: actedPlayer.playerName,
                                position: actedPlayer.position,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;

                    case 114:
                        matchLogs[i + 1].result = `Slow passing in the midfield`;
                        matchLogs[i + 1].players = [];
                        break;

                    case 115:
                        actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].result = `${actedPlayer.playerName} made a mistake`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.playerId,
                                playerName: actedPlayer.playerName,
                                position: actedPlayer.position,
                                ratingDiff: -0.2,
                            }
                        ];
                        break;
                }
                break;

            case 12:
                eventedUser = event.user === 0 ? user1 : user2;
                anotherUser = event.user === 0 ? user2 : user1;

                eventCode = MathService.randomInteger(121, 125);

                switch (eventCode) {
                    case 121:
                        actedPlayer = eventedUser.players[MathService.randomInteger(0, eventedUser.players.length - 2)];

                        matchLogs[i + 1].result = `Shot off target`;
                        matchLogs[i + 1].players = [{
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0,
                        }];
                        break;

                    case 122:
                        AGIpPlayersCount = playersWithSkills[event.user].AGIp.length;

                        if (AGIpPlayersCount) actedPlayer = playersWithSkills[event.user].AGIp[MathService.randomInteger(0, AGIpPlayersCount - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(eventedUser.players.length - 6, eventedUser.players.length - 2)];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].result = `Successful dribbling by ${actedPlayer.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.playerId,
                                playerName: actedPlayer.playerName,
                                position: actedPlayer.position,
                                ratingDiff: 0.2,
                            }
                        ];
                        break;

                    case 123:
                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];
                        possibleActedPlayers.sort(function (a, b) {
                            return a - b;
                        }); //!refactor

                        actedPlayer = possibleActedPlayers[possibleActedPlayers.length - 1];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].result = `Promising cross by ${actedPlayer.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.playerId,
                                playerName: actedPlayer.playerName,
                                position: actedPlayer.position,
                                ratingDiff: 0.2,
                            }
                        ];
                        break;

                    case 124:
                        TCKLpPlayersCount = playersWithSkills[event.user].TCKLp.length;

                        if (TCKLpPlayersCount) actedPlayer = playersWithSkills[event.user].TCKLp[MathService.randomInteger(0, TCKLpPlayersCount - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(eventedUser.players.length - 6, eventedUser.players.length - 2)];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].result = `Interception by ${actedPlayer.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.playerId,
                                playerName: actedPlayer.playerName,
                                position: actedPlayer.position,
                                ratingDiff: 0.2,
                            }
                        ];
                        break;

                    case 125:
                        PASpPlayersCount = playersWithSkills[event.user].PASp.length;

                        if (PASpPlayersCount) actedPlayer = playersWithSkills[event.user].PASp[MathService.randomInteger(0, PASpPlayersCount - 1)];
                        else {
                            playersOnPositions[event.user].CM.sort(function (a, b) {
                                return a - b;
                            })//!refactor
                            actedPlayer = playersOnPositions[event.user].CM[playersOnPositions[event.user].CM.length - 1];
                        }
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].result = `Promising through pass by ${actedPlayer.playerName}`;
                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.playerId,
                                playerName: actedPlayer.playerName,
                                position: actedPlayer.position,
                                ratingDiff: 0.2,
                            }
                        ];
                        break;
                }
                break;

            case 13:
                let chanceNumbers = Math.floor(xG[event.user] / 0.25);

                if (event.minute === lastPotGoalMinute && goals[0] === goals[1]) chanceNumbers++;

                let goal = MathService.randomInteger(1, 10) <= chanceNumbers ? 1 : 0;

                if (goal) {
                    let scoredPosition, scoredIndex, scoredPlayer, assistantPosition, assistantIndex, assistantPlayer,
                        possibleScoredPlayers;

                    scoredUser = event.user === 0 ? user1 : user2;
                    anotherUser = event.user === 0 ? user2 : user1;

                    goals[event.user]++;
                    xG[event.user] = Math.max(0, xG[event.user] - 1); //чтобы xG игрока не был меньше 0

                    switch (scoredUser.tactic.teamFocus) {
                        case 'wing-play':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                eventCode = 131;


                                if (playersOnPositions[event.user].FW.length) {
                                    scoredPlayer = playersOnPositions[event.user].FW[0];

                                    if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                    else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                }
                                else if (playersOnPositions[event.user].WG.length) {
                                    let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                    scoredPlayer = playersOnPositions[event.user].WG[idx];

                                    if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                    else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                }
                                else if (playersOnPositions[event.user].CM.length) {
                                    let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                    scoredPlayer = playersOnPositions[event.user].CM[idx];

                                    if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                    else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                        let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                    }
                                }

                                changeRating(scoredPlayer, 0.8);
                                changeRating(assistantPlayer, 0.8);


                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }

                                matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                                matchLogs[i + 1].players = [
                                    {
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerId: assistantPlayer.playerId,
                                        playerName: assistantPlayer.playerName,
                                        position: assistantPlayer.position,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    },
                                ];
                            }
                            else {
                                eventCode = MathService.randomInteger(131, 136);

                                switch (eventCode) {
                                    case 131:
                                        if (playersOnPositions[event.user].FW.length) {
                                            scoredPlayer = playersOnPositions[event.user].FW[0];

                                            if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        }
                                        else if (playersOnPositions[event.user].WG.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].WG[idx];

                                            if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        }
                                        else if (playersOnPositions[event.user].CM.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];

                                            if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.playerId,
                                                playerName: scoredPlayer.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.playerId,
                                                playerName: assistantPlayer.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        break;

                                    case 132:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.4);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.playerId,
                                                playerName: scoredPlayer.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.4,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 133:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.playerId,
                                                playerName: scoredPlayer.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 134:
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            // scoredPlayer = (FW|WG)
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                            // assistantPlayer = CM
                                            if (playersOnPositions[event.user].CM.length) {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                            }
                                            // assistantPlayer = (CD|WB)
                                            else {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                        }
                                        else {
                                            // scoredPlayer = CM
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];


                                            // assistantPlayer = (CD|WB)
                                            if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                            // assistantPlayer = CM
                                            else {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.playerId,
                                                playerName: scoredPlayer.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.playerId,
                                                playerName: assistantPlayer.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 135:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.playerId,
                                                playerName: scoredPlayer.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 136:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.playerId,
                                                playerName: scoredPlayer.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.5,
                                            }
                                        ];
                                        break;
                                }
                            }
                            break;

                        case 'midfield':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                eventCode = 134;


                                if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                    // scoredPlayer = (FW|WG)
                                    possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                    scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                    // assistantPlayer = CM
                                    if (playersOnPositions[event.user].CM.length) {
                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                    }
                                    // assistantPlayer = (CD|WB)
                                    else {
                                        let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                    }
                                }
                                else {
                                    // scoredPlayer = CM
                                    let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                    scoredPlayer = playersOnPositions[event.user].CM[idx];


                                    // assistantPlayer = (CD|WB)
                                    if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                        let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                    }
                                    // assistantPlayer = CM
                                    else {
                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                    }
                                }

                                changeRating(scoredPlayer, 0.8);
                                changeRating(assistantPlayer, 0.8);


                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }

                                matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`;
                                matchLogs[i + 1].players = [
                                    {
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerId: assistantPlayer.playerId,
                                        playerName: assistantPlayer.playerName,
                                        position: assistantPlayer.position,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    }
                                ];
                            }
                            else {
                                eventCode = MathService.randomInteger(131, 136);

                                switch (eventCode) {
                                    case 131:
                                        if (playersOnPositions[event.user].FW.length) {
                                            scoredPlayer = playersOnPositions[event.user].FW[0];

                                            if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        }
                                        else if (playersOnPositions[event.user].WG.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].WG[idx];

                                            if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        }
                                        else if (playersOnPositions[event.user].CM.length) {
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];

                                            if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.playerId,
                                                playerName: scoredPlayer.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.playerId,
                                                playerName: assistantPlayer.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        break;

                                    case 132:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.4);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.playerId,
                                                playerName: scoredPlayer.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.4,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 133:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.playerId,
                                                playerName: scoredPlayer.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 134:
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            // scoredPlayer = (FW|WG)
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                            // assistantPlayer = CM
                                            if (playersOnPositions[event.user].CM.length) {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                            }
                                            // assistantPlayer = (CD|WB)
                                            else {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                        }
                                        else {
                                            // scoredPlayer = CM
                                            let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                            scoredPlayer = playersOnPositions[event.user].CM[idx];


                                            // assistantPlayer = (CD|WB)
                                            if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                                let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                                assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                            }
                                            // assistantPlayer = CM
                                            else {
                                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                            }
                                        }

                                        changeRating(scoredPlayer, 0.8);
                                        changeRating(assistantPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.playerId,
                                                playerName: scoredPlayer.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.playerId,
                                                playerName: assistantPlayer.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 135:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 1);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.playerId,
                                                playerName: scoredPlayer.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 1,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            }
                                        ];
                                        break;

                                    case 136:
                                        // scoredPlayer = (FW|WG)
                                        if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }
                                        // scoredPlayer = (CM|CD|WB)
                                        else {
                                            possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                        }

                                        changeRating(scoredPlayer, 0.8);


                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`;
                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.playerId,
                                                playerName: scoredPlayer.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.5,
                                            }
                                        ];
                                        break;
                                }
                            }
                            break;

                        case 'stepUp':
                            eventCode = MathService.randomInteger(131, 136);

                            switch (eventCode) {
                                case 131:
                                    if (playersOnPositions[event.user].FW.length) {
                                        scoredPlayer = playersOnPositions[event.user].FW[0];

                                        if (playersOnPositions[event.user].WG.length) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                        else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                    }
                                    else if (playersOnPositions[event.user].WG.length) {
                                        let idx = MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1);
                                        scoredPlayer = playersOnPositions[event.user].WG[idx];

                                        if (playersOnPositions[event.user].WG.length > 1) assistantPlayer = playersOnPositions[event.user].WG[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].WG.length - 1, [idx])];
                                        else if (playersOnPositions[event.user].CM.length) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].WG.length - 1)];
                                    }
                                    else if (playersOnPositions[event.user].CM.length) {
                                        let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                        scoredPlayer = playersOnPositions[event.user].CM[idx];

                                        if (playersOnPositions[event.user].CM.length > 1) assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                        else if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                            let possiblePlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            assistantPlayer = possiblePlayers[MathService.randomInteger(0, possiblePlayers.length - 1)];
                                        }
                                    }

                                    changeRating(scoredPlayer, 0.8);
                                    changeRating(assistantPlayer, 0.8);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerId: assistantPlayer.playerId,
                                            playerName: assistantPlayer.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        },
                                    ];
                                    break;

                                case 132:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 0.4);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.4,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 133:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 1);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 134:
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        // scoredPlayer = (FW|WG)
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];


                                        // assistantPlayer = CM
                                        if (playersOnPositions[event.user].CM.length) {
                                            assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                        }
                                        // assistantPlayer = (CD|WB)
                                        else {
                                            let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                        }
                                    }
                                    else {
                                        // scoredPlayer = CM
                                        let idx = MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1);
                                        scoredPlayer = playersOnPositions[event.user].CM[idx];


                                        // assistantPlayer = (CD|WB)
                                        if (playersOnPositions[event.user].CD.length || playersOnPositions[event.user].WB.length) {
                                            let possibleAssistedPlayers = [...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                            assistantPlayer = possibleAssistedPlayers[MathService.randomInteger(0, possibleAssistedPlayers.length - 1)];
                                        }
                                        // assistantPlayer = CM
                                        else {
                                            assistantPlayer = playersOnPositions[event.user].CM[MathService.randomIntegerExcluding(0, playersOnPositions[event.user].CM.length - 1, [idx])];
                                        }
                                    }

                                    changeRating(scoredPlayer, 0.8);
                                    changeRating(assistantPlayer, 0.8);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerId: assistantPlayer.playerId,
                                            playerName: assistantPlayer.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 135:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 1);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        }
                                    ];
                                    break;

                                case 136:
                                    // scoredPlayer = (FW|WG)
                                    if (playersOnPositions[event.user].FW.length || playersOnPositions[event.user].WG.length) {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].FW, ...playersOnPositions[event.user].WG];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }
                                    // scoredPlayer = (CM|CD|WB)
                                    else {
                                        possibleScoredPlayers = [...playersOnPositions[event.user].CM, ...playersOnPositions[event.user].CD, ...playersOnPositions[event.user].WB];
                                        scoredPlayer = possibleScoredPlayers[MathService.randomInteger(0, possibleScoredPlayers.length - 1)];
                                    }

                                    changeRating(scoredPlayer, 0.8);


                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                    }

                                    matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`;
                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.5,
                                        }
                                    ];
                                    break;
                            }
                            break;
                    }


                    //поиск виноватого игрока ================================================
                    let value = Math.random(),
                        anotherUserIdx = (event.user + 1) % 2,
                        guiltPlayer;

                    if (value <= 0.15) guiltPlayer = playersOnPositions[anotherUserIdx].GK[0];
                    else if (value <= 0.30) {
                        let possibleGuiltPlayers = [...playersOnPositions[anotherUserIdx].FW, ...playersOnPositions[anotherUserIdx].WG];
                        guiltPlayer = possibleGuiltPlayers[MathService.randomInteger(0, possibleGuiltPlayers.length - 1)];
                    }
                    else if (value <= 0.60) guiltPlayer = playersOnPositions[anotherUserIdx].CM[MathService.randomInteger(0, playersOnPositions[anotherUserIdx].CM.length - 1)];
                    else {
                        let possibleGuiltPlayers = [...playersOnPositions[anotherUserIdx].CD, ...playersOnPositions[anotherUserIdx].WB];
                        guiltPlayer = possibleGuiltPlayers[MathService.randomInteger(0, possibleGuiltPlayers.length - 1)];
                    }

                    changeRating(guiltPlayer, -0.2);

                    matchLogs[i + 1].players.push({
                        playerName: guiltPlayer.playerName,
                        position: guiltPlayer.position,
                        role: 'guilt',
                        ratingDiff: -0.2,
                    });
                    //поиск виноватого игрока ================================================

                    // -0.2 пропустившим гол игрокам
                    for (let playerIndex = 0; playerIndex < anotherUser.players.length; playerIndex++) changeRating(anotherUser.players[playerIndex], -0.2);
                    matchLogs[i + 1].players.push({
                        playerName: 'Another team players',
                        position: 'Another team positions',
                        role: 'none',
                        ratingDiff: -0.2,
                    });
                }
                else {
                    eventCode = 130;

                    let anotherUser = event.user === 0 ? user2 : user1;

                    actedPlayer = anotherUser.players[anotherUser.players.length - 1];
                    changeRating(actedPlayer, 0.4);

                    matchLogs[i + 1].result = `Shot on target`;
                    matchLogs[i + 1].players = [
                        {
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.4,
                        }
                    ];
                }

                matchLogs[i + 1].code = eventCode;
                break;
        }

        matchLogs[i + 1].code = eventCode;
        matchLogs[i + 1].score = goals[0] + '-' + goals[1];
    }


    // рассчёт рейтинга игроков за сезон (среднее арифм)===========================
    for (let playerIndex = 0; playerIndex < 11; playerIndex++) {
        let sumOfMarks = [0, 0];

        user1.players[playerIndex].seasonRatingMarks.push(user1.players[playerIndex].matchRating);

        for (let marksIndex = 0; marksIndex < user1.players[playerIndex].seasonRatingMarks.length; marksIndex++) {
            sumOfMarks[0] += user1.players[playerIndex].seasonRatingMarks[marksIndex];
        }

        user1.players[playerIndex].averageRating = Number((sumOfMarks[0] / user1.players[playerIndex].seasonRatingMarks.length).toFixed(2));


        user2.players[playerIndex].seasonRatingMarks.push(user2.players[playerIndex].matchRating);

        for (let marksIndex = 0; marksIndex < user2.players[playerIndex].seasonRatingMarks.length; marksIndex++) {
            sumOfMarks[1] += user2.players[playerIndex].seasonRatingMarks[marksIndex];
        }

        user2.players[playerIndex].averageRating = Number((sumOfMarks[1] / user2.players[playerIndex].seasonRatingMarks.length).toFixed(2));
    }


    function sortById(a, b) {
        if (a.playerId < b.playerId) return -1;
        if (a.playerId > b.playerId) return 1;
        return 0;
    }

    user1.players.sort(sortById);
    user1.resultLastTeam.sort(sortById);
    user1.resultAllPlayers.sort(sortById);

    user2.players.sort(sortById);
    user2.resultLastTeam.sort(sortById);
    user2.resultAllPlayers.sort(sortById);


    let allPlayersIndex = 0;
    for (let playerIndex = 0; playerIndex < 11; playerIndex++) {
        user1.resultLastTeam[playerIndex].seasonRatingMarks = user1.players[playerIndex].seasonRatingMarks;
        user1.resultLastTeam[playerIndex].averageRating = user1.players[playerIndex].averageRating;


        while (user1.players[playerIndex].playerId !== user1.resultAllPlayers[allPlayersIndex].playerId) allPlayersIndex++;

        user1.resultAllPlayers[allPlayersIndex].seasonRatingMarks = user1.players[playerIndex].seasonRatingMarks;
        user1.resultAllPlayers[allPlayersIndex].averageRating = user1.players[playerIndex].averageRating;
    }

    allPlayersIndex = 0;
    for (let playerIndex = 0; playerIndex < 11; playerIndex++) {
        user2.resultLastTeam[playerIndex].seasonRatingMarks = user2.players[playerIndex].seasonRatingMarks;
        user2.resultLastTeam[playerIndex].averageRating = user2.players[playerIndex].averageRating;


        while (user2.players[playerIndex].playerId !== user2.resultAllPlayers[allPlayersIndex].playerId) allPlayersIndex++;

        user2.resultAllPlayers[allPlayersIndex].seasonRatingMarks = user2.players[playerIndex].seasonRatingMarks;
        user2.resultAllPlayers[allPlayersIndex].averageRating = user2.players[playerIndex].averageRating;
    }
    // рассчёт рейтинга игроков за сезон (среднее арифм)===========================


    // изменение статуса unavailable для всех игроков юзеров===========================
    for (let plIdx = 0; plIdx < user1.resultAllPlayers; plIdx++) {
        let currPlayer = user1.resultAllPlayers[plIdx];
        if (currPlayer.unavailableMatchesCount > 0) currPlayer.unavailableMatchesCount--;
    }

    for (let plIdx = 0; plIdx < user2.resultAllPlayers; plIdx++) {
        let currPlayer = user2.resultAllPlayers[plIdx];
        if (currPlayer.unavailableMatchesCount > 0) currPlayer.unavailableMatchesCount--;
    }
    // изменение статуса unavailable для всех игроков юзеров===========================


    let resultLogs = {
        user1: {
            id: user1.id,
            players: user1.players.map(player => {
                return {
                    playerId: player.playerId,
                    playerName: player.playerName,
                    head: player.head,
                    body: player.body,
                    clothing: player.clothing,
                    hair: player.hair,
                };
            })
        },
        user2: {
            id: user2.id,
            players: user2.players.map(player => {
                return {
                    playerId: player.playerId,
                    playerName: player.playerName,
                    head: player.head,
                    body: player.body,
                    clothing: player.clothing,
                    hair: player.hair,
                };
            })
        },
        matchEvents: matchLogs
    };


    //debug===========================================================================
    debugLogs.logs = resultLogs; //d
    debugLogs.score = goals[0] + '-' + goals[1]; //d
    debugLogs.user1.totalEvents = eventsArrs[0].join(' '); //d
    debugLogs.user2.totalEvents = eventsArrs[1].join(' '); //d

    let logsText = '';

    logsText += 'Звёзды игроков:\n=============================\n';

    logsText += 'Игрок 1:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${debugLogs.user1.playersAsm[i].playerName}: ${debugLogs.user1.playersAsm[i].asm}\n`;
    }
    logsText += '=================\n';

    logsText += 'Игрок 2:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${debugLogs.user2.playersAsm[i].playerName}: ${debugLogs.user2.playersAsm[i].asm}\n`;
    }
    logsText += '=================\n';

    logsText += '\n\nРейтинг карточек перед матчем:\n=============================\n';

    logsText += 'Игрок 1:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${user1.players[i].playerName}: 6.6\n`;
    }
    logsText += '=================\n';

    logsText += 'Игрок 2:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${user2.players[i].playerName}: 6.6\n`;
    }
    logsText += '=================\n';


    logsText += '\n\nЛоги матча:\n=============================\n';
    for (let i = 1; i < matchLogs.length; i++) {
        let playersRatingString = '';

        for (let j = 0; j < matchLogs[i].players.length; j++) {
            playersRatingString += `${matchLogs[i].players[j].playerName} (${matchLogs[i].players[j].ratingDiff}), `;
        }

        playersRatingString = playersRatingString.substring(0, playersRatingString.length - 2);

        logsText += `${matchLogs[i].minute} минута, игрок ${matchLogs[i].user + 1}, событие ${matchLogs[i].momentType}.\nРезультат: ${matchLogs[i].result}.\nИзменение рейтинга: ${playersRatingString}.\n====================================\n`;
    }


    logsText += `\n\nСчёт: ${goals[0]}-${goals[1]}\n`;


    let yellowCards = [[], []];
    for (let i = 1; i < matchLogs.length; i++) {
        let event = matchLogs[i];
        if (event.momentType === 11 && event.result.endsWith('card')) yellowCards[event.user].push({
            actedPlayer: event.players[0].playerName,
            injuredPlayer: event.players[1].playerName,
        });
    }

    logsText += `\n\nЖёлтые карточки:\n\n`;

    logsText += `Игрок 1:\n===============\n`;
    for (let i = 0; i < yellowCards[0].length; i++) {
        logsText += `Injured: ${yellowCards[0][i].injuredPlayer}, Acted: ${yellowCards[0][i].actedPlayer}\n`;
    }
    logsText += `===============\n`;

    logsText += `\nИгрок 2:\n===============\n`;
    for (let i = 0; i < yellowCards[1].length; i++) {
        logsText += `Injured: ${yellowCards[1][i].injuredPlayer}, Acted: ${yellowCards[1][i].actedPlayer}\n`;
    }
    logsText += `===============\n`;


    logsText += '\n\nРейтинг карточек после матча:\n=============================\n';

    logsText += 'Игрок 1:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${user1.players[i].playerName}: ${user1.players[i].matchRating}\n`;
    }
    logsText += '=================\n';

    logsText += 'Игрок 2:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${user2.players[i].playerName}: ${user2.players[i].matchRating}\n`;
    }
    logsText += '=================\n';

    debugLogs.logsText = logsText;
    //debug===========================================================================

    if (saveToDB) {
        let
            user1UpdateLastTeamQuery = prisma.user.update({
                where: {
                    id: user1.id,
                },
                data: {
                    lastTeam: JSON.stringify(user1.resultLastTeam)
                }
            }),
            user1UpdateAllPlayersQuery = prisma.user_players.update({
                where: {
                    userId: user1.id,
                },
                data: {
                    playersJson: JSON.stringify(user1.resultAllPlayers)
                }
            }),
            user2UpdateLastTeamQuery = prisma.user.update({
                where: {
                    id: user2.id,
                },
                data: {
                    lastTeam: JSON.stringify(user2.resultLastTeam)
                }
            }),
            user2UpdateAllPlayersQuery = prisma.user_players.update({
                where: {
                    userId: user2.id,
                },
                data: {
                    playersJson: JSON.stringify(user2.resultAllPlayers)
                }
            }),
            matchUpdateQuery = prisma.match.update({
                where: {
                    id: match.id
                },
                data: {
                    logs: JSON.stringify(resultLogs),
                    score: goals[0] + ':' + goals[1],
                }
            });

        await prisma.$transaction([user1UpdateLastTeamQuery, user1UpdateAllPlayersQuery, user2UpdateLastTeamQuery, user2UpdateAllPlayersQuery, matchUpdateQuery]);
    }

    return debugLogs;
}

async function playDebugMatch_v7(matchId, saveToDB) {
    function findInjured_111(eventedUser, playersWithSkills, injuredPlayers) {
        let STAmPlayersCount = playersWithSkills.STAm.length,
            STAzPlayersCount = playersWithSkills.STAz.length,
            possibleInjuredPlayers = [],
            injuredPlayer;

        if (STAmPlayersCount) {
            for (let j = 0; j < playersWithSkills.STAm.length; j++) {
                let currPlayer = playersWithSkills.STAm[j];
                if (!injuredPlayers.includes(currPlayer.playerId)) possibleInjuredPlayers.push(currPlayer);
            }
        }

        if (!possibleInjuredPlayers.length && STAzPlayersCount) {
            for (let j = 0; j < playersWithSkills.STAz.length; j++) {
                let currPlayer = playersWithSkills.STAz[j];
                if (!injuredPlayers.includes(currPlayer.playerId)) possibleInjuredPlayers.push(currPlayer);
            }
        }

        if (!possibleInjuredPlayers.length) {
            for (let j = 0; j < 5; j++) {
                let currPlayer = eventedUser.players[j];
                if (!injuredPlayers.includes(currPlayer.playerId)) possibleInjuredPlayers.push(currPlayer);
            }

            if (!possibleInjuredPlayers.length) {
                for (let j = 0; j < 5; j++) possibleInjuredPlayers.push(eventedUser.players[j]);
            }
        }

        injuredPlayer = possibleInjuredPlayers[MathService.randomInteger(0, possibleInjuredPlayers.length - 1)];

        return injuredPlayer;
    }

    function findActed_111(anotherUser) {
        let actedPlayer = anotherUser.players[MathService.randomInteger(0, anotherUser.players.length - 2)];

        return actedPlayer;
    }

    function findActed112() {

    }

    const match = await prisma.match.findFirst({
        select: {
            id: true,
            player1: {
                select: {
                    id: true,
                    avatar: true,
                    lastTactic: true,
                    lastTeam: true,
                    players: {
                        select: {
                            playersJson: true
                        }
                    },
                },
            },
            player2: {
                select: {
                    id: true,
                    avatar: true,
                    lastTactic: true,
                    lastTeam: true,
                    players: {
                        select: {
                            playersJson: true
                        }
                    },
                }
            },
        },
        where: {
            id: matchId
        },
    });

    let
        matchLogs = [],
        user1 = {
            id: match.player1.id,
            avatar: match.player1.avatar,
            tactic: JSON.parse(match.player1.lastTactic),
            players: JSON.parse(match.player1.lastTeam).map(player => {
                return {
                    playerId: player.playerId,
                    playerName: player.playerName,
                    head: player.head,
                    body: player.body,
                    clothing: player.clothing,
                    hair: player.hair,
                    physicalSkills: player.physicalSkills,
                    technicalSkills: player.technicalSkills,
                    mood: player.mood,
                    position: player.position,
                    isGoalKeeper: player.isGoalKeeper,
                    seasonRatingMarks: player.seasonRatingMarks,
                    averageRating: player.averageRating,
                    seasonYellowCardsCount: player.seasonYellowCardsCount,
                    matchRating: 6.6,
                }
            }),
            resultLastTeam: JSON.parse(match.player1.lastTeam),
            resultAllPlayers: JSON.parse(match.player1.players.playersJson),
        },
        user2 = {
            id: match.player2.id,
            avatar: match.player2.avatar,
            tactic: JSON.parse(match.player2.lastTactic),
            players: JSON.parse(match.player2.lastTeam).map(player => {
                return {
                    playerId: player.playerId,
                    playerName: player.playerName,
                    head: player.head,
                    body: player.body,
                    clothing: player.clothing,
                    hair: player.hair,
                    physicalSkills: player.physicalSkills,
                    technicalSkills: player.technicalSkills,
                    mood: player.mood,
                    position: player.position,
                    isGoalKeeper: player.isGoalKeeper,
                    seasonRatingMarks: player.seasonRatingMarks,
                    averageRating: player.averageRating,
                    seasonYellowCardsCount: player.seasonYellowCardsCount,
                    matchRating: 6.6,
                }
            }),
            resultLastTeam: JSON.parse(match.player2.lastTeam),
            resultAllPlayers: JSON.parse(match.player2.players.playersJson),
        },
        playersOnPositions = [
            {
                'FW': [],
                'WG': [],
                'CM': [],
                'WB': [],
                'CD': [],
                'GK': [],
            },
            {
                'FW': [],
                'WG': [],
                'CM': [],
                'WB': [],
                'CD': [],
                'GK': [],
            }
        ],
        playersWithSkills = [
            {
                AGIp: [],
                TCKLp: [],
                PASp: [],
                STAz: [],
                STAm: [],
                AGIm: [],
            },
            {
                AGIp: [],
                TCKLp: [],
                PASp: [],
                STAz: [],
                STAm: [],
                AGIm: [],
            },
        ],
        T = [0, 0],
        goals = [0, 0],
        eventsArrs = [[], []], //d
        debugLogs = {
            matchId: match.id,
            score: null,
            user1: {
                id: user1.id,
                players: user1.players,
                playersAsm: [],
                homeBonus: 3,
                avatarBonus: 0,
                T: 0,
            },
            user2: {
                id: user2.id,
                players: user2.players,
                playersAsm: [],
                homeBonus: 0,
                avatarBonus: 0,
                T: 0,
            },
        }; //d


    user1.players.forEach((player) => {
        //распределение в массивах игроков на позициях
        playersOnPositions[0][player.position].push(player);

        switch (player.position) {
            case 'FW':
                player.technicalSkills.shoot *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.agility *= 3;
                player.physicalSkills.jump *= 3;
                break;

            case 'WG':
                player.technicalSkills.cross *= 3;
                player.technicalSkills.shoot *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.agility *= 3;
                break;

            case 'CM':
                player.technicalSkills.pass *= 3;
                player.physicalSkills.agility *= 3;
                player.physicalSkills.strength *= 3;
                break;

            case 'CD':
                player.technicalSkills.tackling *= 3;
                player.physicalSkills.strength *= 3;
                player.physicalSkills.jump *= 3;
                break;

            case 'WB':
                player.technicalSkills.cross *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.jump *= 3;
                break;
        }

        if (player.physicalSkills.agility === 3) playersWithSkills[0].AGIp.push(player);
        else if (player.physicalSkills.agility === -3) playersWithSkills[0].AGIm.push(player);

        if (player.technicalSkills.tackling === 3) playersWithSkills[0].TCKLp.push(player);

        if (player.technicalSkills.pass === 3) playersWithSkills[0].PASp.push(player);

        if (player.physicalSkills.stamina === -3) playersWithSkills[0].STAm.push(player);
        else if (player.physicalSkills.stamina === 0) playersWithSkills[0].STAz.push(player);


        //получение asm игрока
        let phy = 0, te = 0, asm;

        for (let skill in player.physicalSkills) {
            phy += player.physicalSkills[skill];
        }
        for (let skill in player.technicalSkills) {
            te += player.technicalSkills[skill];
        }

        phy = Math.min(Math.max(1, phy), 5);
        te = Math.min(Math.max(1, te), 5);

        asm = (phy + te) + player.mood;
        asm = Math.min(Math.max(1, asm), 10);

        if (asm % 1 !== 0) {
            asm += 0.5 * (player.mood < 0 ? -1 : 1);
        }

        T[0] += asm;

        debugLogs.user1.playersAsm.push({
            playerId: player.playerId,
            playerName: player.playerName,
            asm,
        }); //d
    });
    user2.players.forEach((player) => {
        //распределение в массивах игроков на позициях
        playersOnPositions[1][player.position].push(player);

        switch (player.position) {
            case 'FW':
                player.technicalSkills.shoot *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.agility *= 3;
                player.physicalSkills.jump *= 3;
                break;

            case 'WG':
                player.technicalSkills.cross *= 3;
                player.technicalSkills.shoot *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.agility *= 3;
                break;

            case 'CM':
                player.technicalSkills.pass *= 3;
                player.physicalSkills.agility *= 3;
                player.physicalSkills.strength *= 3;
                break;

            case 'CD':
                player.technicalSkills.tackling *= 3;
                player.physicalSkills.strength *= 3;
                player.physicalSkills.jump *= 3;
                break;

            case 'WB':
                player.technicalSkills.cross *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.jump *= 3;
                break;
        }

        if (player.physicalSkills.agility === 3) playersWithSkills[1].AGIp.push(player);
        else if (player.physicalSkills.agility === -3) playersWithSkills[1].AGIm.push(player);

        if (player.technicalSkills.tackling === 3) playersWithSkills[1].TCKLp.push(player);

        if (player.technicalSkills.pass === 3) playersWithSkills[1].PASp.push(player);

        if (player.physicalSkills.stamina === -3) playersWithSkills[1].STAm.push(player);
        else if (player.physicalSkills.stamina === 0) playersWithSkills[1].STAz.push(player);


        //получение asm игрока
        let phy = 0, te = 0, asm;

        for (let skill in player.physicalSkills) {
            phy += player.physicalSkills[skill];
        }
        for (let skill in player.technicalSkills) {
            te += player.technicalSkills[skill];
        }

        phy = Math.min(Math.max(1, phy), 5);
        te = Math.min(Math.max(1, te), 5);

        asm = (phy + te) + player.mood;
        asm = Math.min(Math.max(1, asm), 10);

        if (asm % 1 !== 0) {
            asm += 0.5 * (player.mood < 0 ? -1 : 1);
        }

        T[1] += asm;


        debugLogs.user2.playersAsm.push({
            playerId: player.playerId,
            playerName: player.playerName,
            asm,
        }); //d
    });


    function sortPlayers(a, b) {
        if (a.isGoalKeeper) return 1;
        if (b.isGoalKeeper) return -1;

        if (a.averageRating < b.averageRating) return -1;
        if (a.averageRating > b.averageRating) return 1;

        return 0;
    }

    user1.players.sort(sortPlayers);
    user2.players.sort(sortPlayers); // сортировка игроков по возрастанию рейтинга (GK всегда последние)


    T[0] += 3; //доп очки за домашнюю тиму
    if (user1.avatar !== user2.avatar) {
        if (avatarDefying[user1.avatar].includes(user2.avatar)) {
            T[0] += 3;

            debugLogs.user1.avatarBonus = 3;//debug
        }
        else if (avatarDefying[user2.avatar].includes(user1.avatar)) {
            T[1] += 3;

            debugLogs.user2.avatarBonus = 3;//debug
        }
    } // доп очки за контр тренеров

    debugLogs.user1.T = T[0]; //d
    debugLogs.user2.T = T[1]; //d


    let advantage = Math.abs(T[0] - T[1]);
    if (advantage <= 5) {
        if (T[0] > T[1]) {
            T[1] = T[0];
        }
        else {
            T[0] = T[1];
        }
    }
    else if (advantage <= 8) {
        if (T[0] > T[1]) {
            T[0] += 3;
        }
        else {
            T[1] += 3;
        }
    }
    else {
        if (T[0] > T[1]) {
            T[0] += advantage;
        }
        else {
            T[1] += advantage;
        }
    }

    debugLogs.user1.T_adv = T[0]; //d
    debugLogs.user2.T_adv = T[1]; //d


    function changeRating(player, ratingDiff) {
        player.matchRating = Number((player.matchRating + ratingDiff).toFixed(2));
    }

    let xG = [0, 0], momentsCount = [0, 0], xG1 = [0, 0], xG2 = [0, 0], lastPotGoalMinute = null;


    matchLogs.push({
        minute: 0,
        user: null,
        momentType: null,
        result: 'Match started!'
    });


    //первый тайм ===================================================================
    momentsCount[0] = Math.round(T[0] / ((T[0] + T[1]) / 15));
    momentsCount[1] = 15 - momentsCount[0];

    for (let i = 3; i <= 45; i += 3) {
        let player = MathService.randomFloat(0, T[0] + T[1]) <= T[0] ? 0 : 1,
            randNum = MathService.randomInteger(1, 10),
            momentType = randNum >= 1 && randNum <= 2 ? 13 : randNum >= 3 && randNum <= 6 ? 12 : 11,
            momentWeight = 0.5 * (momentType - 9);

        if (momentsCount[player] === 0) player = (player + 1) % 2;
        momentsCount[player]--;


        T[player] += momentWeight; // чтобы получить вес 1/1.5/2 (11 -9. 12 - 9, 13 - 9)
        xG[player] += momentWeight;
        xG1[player] += momentWeight;


        matchLogs.push({
            minute: i,
            user: player,
            momentType,
            result: ''
        });
        eventsArrs[player].push(momentType); //d
    }

    xG[0] /= 10;
    xG[1] /= 10;
    xG1[0] /= 10;
    xG1[1] /= 10;
    //первый тайм ===================================================================


    eventsArrs[0].push("==="); //d
    eventsArrs[1].push("==="); //d


    //второй тайм ===================================================================
    momentsCount[0] = Math.round(T[0] / ((T[0] + T[1]) / 15));
    momentsCount[1] = 15 - momentsCount[0];

    for (let i = 48; i <= 90; i += 3) {
        let player = MathService.randomFloat(0, T[0] + T[1]) <= T[0] ? 0 : 1,
            randNum = MathService.randomInteger(1, 10),
            momentType = randNum >= 1 && randNum <= 2 ? 13 : randNum >= 3 && randNum <= 6 ? 12 : 11,
            momentWeight = 0.5 * (momentType - 9);

        if (momentsCount[player] === 0) player = (player + 1) % 2;
        momentsCount[player]--;


        T[player] += momentWeight; // чтобы получить вес 1/1.5/2 (11 -9. 12 - 9, 13 - 9)
        xG[player] += momentWeight;
        xG2[player] += momentWeight;


        matchLogs.push({
            minute: i,
            user: player,
            momentType,
            result: ''
        });
        eventsArrs[player].push(momentType); //d
    }

    xG[0] /= 10;
    xG[1] /= 10;
    xG2[0] /= 10;
    xG2[1] /= 10;
    //второй тайм ===================================================================

    for (let i = matchLogs.length - 1; i > 0; i--) {
        if (matchLogs[i].momentType === 13) {
            lastPotGoalMinute = matchLogs[i].minute;
            break;
        }
    }

    let playersWithYellowCards = [[], []], injuredPlayers = [[], []], kickedPlayers = [0, 0];

    xG[0] = xG1[0];
    xG[1] = xG1[1];

    for (let i = 0; i < 15; i++) {
        let event = matchLogs[i + 1];

        let eventCode,
            eventedUser, scoredUser, anotherUser,
            AGIpLength, TCKLpLength, PASpLength, AGImLength, STAmLength, STAzLength, // для удобства
            actedPlayer, possibleActedPlayers, injuredPlayer;

        switch (event.momentType) {
            case 11:
                eventedUser = event.user === 0 ? user1 : user2;

                eventCode = MathService.randomInteger(111, 115);

                switch (eventCode) {
                    case 111:
                        let anotherUser = eventedUser === user1 ? user2 : user1;
                        matchLogs[i + 1].players = [];

                        injuredPlayer = findInjured_111(eventedUser, playersWithSkills[event.user], injuredPlayers[event.user]);
                        injuredPlayers[event.user].push(injuredPlayer.playerId);
                        changeRating(injuredPlayer, -0.2);

                        actedPlayer = findActed_111(anotherUser);
                        actedPlayer.seasonYellowCardsCount++;
                        playersWithYellowCards[(event.user + 1) % 2].push(actedPlayer.playerId);
                        changeRating(actedPlayer, -0.4);


                        if (playersWithYellowCards[(event.user + 1) % 2].includes(actedPlayer.playerId)) {
                            actedPlayer.unavailableMatchesCount = 4;

                            // удаление из массива игроков
                            for (let plIdx = 0; plIdx < anotherUser.players.length; plIdx++) {
                                if (anotherUser.players[plIdx].playerId === actedPlayer.playerId) {
                                    anotherUser.players.splice(plIdx, 1);
                                    break;
                                }
                            }

                            // удаление из игроков на позициях
                            for (let plIdx = 0; plIdx < playersOnPositions[(event.user + 1) % 2][actedPlayer.position].length; plIdx++) {
                                if (playersOnPositions[(event.user + 1) % 2][actedPlayer.position][plIdx].playerId === actedPlayer.playerId) {
                                    playersOnPositions[(event.user + 1) % 2][actedPlayer.position].splice(plIdx, 1);
                                    break;
                                }
                            }

                            // удаление из игроков по скиллах ===========================================================================
                            if (actedPlayer.physicalSkills.agility > 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].AGIp.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].AGIp[plIdx].playerId === actedPlayer.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].AGIp.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }
                            else if (actedPlayer.physicalSkills.agility < 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].AGIm.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].AGIm[plIdx].playerId === actedPlayer.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].AGIm.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }

                            if (actedPlayer.physicalSkills.stamina === 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].STAz.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].STAz[plIdx].playerId === actedPlayer.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].STAz.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }
                            else if (actedPlayer.physicalSkills.stamina < 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].STAm.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].STAm[plIdx].playerId === actedPlayer.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].STAm.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }

                            if (actedPlayer.technicalSkills.tackling > 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].TCKLp.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].TCKLp[plIdx].playerId === actedPlayer.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].TCKLp.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }

                            if (actedPlayer.technicalSkills.pass > 0) {
                                for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].PASp.length; plIdx++) {
                                    if (playersWithSkills[(event.user + 1) % 2].PASp[plIdx].playerId === actedPlayer.playerId) {
                                        playersWithSkills[(event.user + 1) % 2].PASp.splice(plIdx, 1);
                                        break;
                                    }
                                }
                            }
                            // удаление из игроков по скиллах ===========================================================================
                        }


                        if (actedPlayer.seasonYellowCardsCount === 8) {
                            //unavailable
                        }


                        // while (playersWithYellowCards[(event.user + 1) % 2].includes(actedPlayer.playerId)) actedPlayer = anotherUser.players[MathService.randomInteger(0, 9)];


                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.4,
                        });
                        matchLogs[i + 1].players.push({
                            playerId: injuredPlayer.playerId,
                            playerName: injuredPlayer.playerName,
                            position: injuredPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `${injuredPlayer.playerName} is injured - ${actedPlayer.playerName} will be punished by a yellow card`;
                        break;

                    case 112:
                        matchLogs[i + 1].players = [];

                        AGImLength = playersWithSkills[event.user].AGIm.length;

                        if (AGImLength) actedPlayer = playersWithSkills[event.user].AGIm[MathService.randomInteger(0, AGImLength - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `Unlucky dribbling - ${actedPlayer.playerName}`;
                        break;

                    case 113:
                        matchLogs[i + 1].players = [];

                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];

                        actedPlayer = possibleActedPlayers[MathService.randomInteger(0, possibleActedPlayers.length - 1)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `Unlucky cross - ${actedPlayer.playerName}`;
                        break;

                    case 114:
                        matchLogs[i + 1].players = [];
                        matchLogs[i + 1].result = `Slow passing in the midfield`;
                        break;

                    case 115:
                        matchLogs[i + 1].players = [];

                        actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `${actedPlayer.playerName} made a mistake`;
                        break;
                }
                break;

            case 12:
                eventedUser = event.user === 0 ? user1 : user2;

                eventCode = MathService.randomInteger(121, 125);

                switch (eventCode) {
                    case 121:
                        matchLogs[i + 1].players = [];

                        actedPlayer = eventedUser.players[MathService.randomInteger(0, 9 - kickedPlayers[event.user])];

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0,
                        });

                        matchLogs[i + 1].result = `Shot off target`;
                        break;

                    case 122:
                        AGIpLength = playersWithSkills[event.user].AGIp.length;

                        if (AGIpLength) actedPlayer = playersWithSkills[event.user].AGIp[MathService.randomInteger(0, AGIpLength - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(5 - kickedPlayers[event.user], 9 - kickedPlayers[event.user])];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.playerId,
                                playerName: actedPlayer.playerName,
                                position: actedPlayer.position,
                                ratingDiff: 0.2,
                            }
                        ];

                        matchLogs[i + 1].result = `Successful dribbling by ${actedPlayer.playerName}`;
                        break;

                    case 123:
                        matchLogs[i + 1].players = [];

                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];
                        possibleActedPlayers.sort(function (a, b) {
                            return a - b;
                        });

                        actedPlayer = possibleActedPlayers[possibleActedPlayers.length - 1];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.2,
                        });

                        matchLogs[i + 1].result = `Promising cross by ${actedPlayer.playerName}`;
                        break;

                    case 124:
                        matchLogs[i + 1].players = [];

                        TCKLpLength = playersWithSkills[event.user].TCKLp.length;

                        if (TCKLpLength) actedPlayer = playersWithSkills[event.user].TCKLp[MathService.randomInteger(0, TCKLpLength - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(5 - kickedPlayers[event.user], 9 - kickedPlayers[event.user])];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.2,
                        });

                        matchLogs[i + 1].result = `Interception by ${actedPlayer.playerName}`;
                        break;

                    case 125:
                        matchLogs[i + 1].players = [];

                        PASpLength = playersWithSkills[event.user].PASp.length;

                        if (PASpLength) actedPlayer = playersWithSkills[event.user].PASp[MathService.randomInteger(0, PASpLength - 1)];
                        else {
                            playersOnPositions[event.user].CM.sort(function (a, b) {
                                return a - b;
                            })
                            actedPlayer = playersOnPositions[event.user].CM[playersOnPositions[event.user].CM.length - 1];
                        }
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.2,
                        });

                        matchLogs[i + 1].result = `Promising through pass by ${actedPlayer.playerName}`;
                        break;
                }
                break;

            case 13:
                let chanceNumbers = Math.floor(xG[event.user] / 0.25);

                if (event.minute === lastPotGoalMinute && goals[0] === goals[1]) chanceNumbers++;

                let goal = MathService.randomInteger(1, 10) <= chanceNumbers ? 1 : 0;

                if (goal) {
                    let scoredPosition, scoredIndex, scoredPlayer, assistantPosition, assistantIndex, assistantPlayer;

                    scoredUser = event.user === 0 ? user1 : user2;
                    anotherUser = event.user === 0 ? user2 : user1;

                    goals[event.user]++;
                    xG[event.user] = Math.max(0, xG[event.user] - 1); //чтобы xG игрока не был меньше 0

                    switch (scoredUser.tactic.teamFocus) {
                        case 'wing-play':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                eventCode = 131;

                                scoredPlayer = playersOnPositions[event.user].FW[0];
                                changeRating(scoredPlayer, 0.8);

                                assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                changeRating(assistantPlayer, 0.8);

                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }


                                matchLogs[i + 1].players = [
                                    {
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerId: assistantPlayer.playerId,
                                        playerName: assistantPlayer.playerName,
                                        position: assistantPlayer.position,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    },
                                ];
                                matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                            }
                            else {
                                eventCode = MathService.randomInteger(131, 136);

                                switch (eventCode) {
                                    case 131:
                                        scoredPlayer = playersOnPositions[event.user].FW[0];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                        assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                        assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.playerId,
                                                playerName: scoredPlayer.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.playerId,
                                                playerName: assistantPlayer.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                                        break;

                                    case 132:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.4);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.4,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`
                                        break;

                                    case 133:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`
                                        break;

                                    case 134:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerId: assistantPlayer.playerId,
                                            playerName: assistantPlayer.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                                        break;

                                    case 135:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`
                                        break;

                                    case 136:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.5,
                                        });

                                        matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`
                                        break;
                                }
                            }
                            break;

                        case 'midfield':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                eventCode = 134;
                                matchLogs[i + 1].players = [];

                                scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                changeRating(scoredPlayer, 0.8);

                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                changeRating(assistantPlayer, 0.8);

                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }

                                matchLogs[i + 1].players.push({
                                    playerId: scoredPlayer.playerId,
                                    playerName: scoredPlayer.playerName,
                                    position: scoredPlayer.position,
                                    role: 'player',
                                    ratingDiff: 0.8,
                                });
                                matchLogs[i + 1].players.push({
                                    playerId: assistantPlayer.playerId,
                                    position: assistantPlayer.position,
                                    role: 'assistant',
                                    ratingDiff: 0.8,
                                });
                                matchLogs[i + 1].players.push({
                                    playerName: 'Scored team players',
                                    position: 'Scored team positions',
                                    role: 'none',
                                    ratingDiff: 0.2,
                                });

                                matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                            }
                            else {
                                eventCode = MathService.randomInteger(131, 136);

                                switch (eventCode) {
                                    case 131:
                                        scoredPlayer = playersOnPositions[event.user].FW[0];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                        assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                        assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.playerId,
                                                playerName: scoredPlayer.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.playerId,
                                                playerName: assistantPlayer.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                                        break;

                                    case 132:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.4);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.4,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`
                                        break;

                                    case 133:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`
                                        break;

                                    case 134:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerId: assistantPlayer.playerId,
                                            playerName: assistantPlayer.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                                        break;

                                    case 135:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`
                                        break;

                                    case 136:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.5,
                                        });

                                        matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`
                                        break;
                                }
                            }
                            break;

                        case 'stepUp':
                            eventCode = MathService.randomInteger(131, 136);

                            switch (eventCode) {
                                case 131:
                                    scoredPlayer = playersOnPositions[event.user].FW[0];
                                    changeRating(scoredPlayer, 0.8);

                                    assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                    assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                    assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                    changeRating(assistantPlayer, 0.8);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerId: assistantPlayer.playerId,
                                            playerName: assistantPlayer.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        },
                                    ];
                                    matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                                    break;

                                case 132:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 0.4);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.4,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`
                                    break;

                                case 133:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 1);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 1,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`
                                    break;

                                case 134:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 0.8);

                                    assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                    changeRating(assistantPlayer, 0.8);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerId: assistantPlayer.playerId,
                                        playerName: assistantPlayer.playerName,
                                        position: assistantPlayer.position,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                                    break;

                                case 135:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 1);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 1,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`
                                    break;

                                case 136:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 0.8);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.5,
                                    });

                                    matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`
                                    break;
                            }
                            break;
                    }


                    //поиск виноватого игрока ================================================
                    let value = Math.random(),
                        anotherUserIdx = (event.user + 1) % 2,
                        guiltPlayer;

                    if (value <= 0.15) guiltPlayer = playersOnPositions[anotherUserIdx].GK[0];
                    else if (value <= 0.30) {
                        let possibleGuiltPlayers = [...playersOnPositions[anotherUserIdx].FW, ...playersOnPositions[anotherUserIdx].WG];
                        guiltPlayer = possibleGuiltPlayers[MathService.randomInteger(0, possibleGuiltPlayers.length - 1)];
                    }
                    else if (value <= 0.60) guiltPlayer = playersOnPositions[anotherUserIdx].CM[MathService.randomInteger(0, playersOnPositions[anotherUserIdx].CM.length - 1)];
                    else {
                        let possibleGuiltPlayers = [...playersOnPositions[anotherUserIdx].CD, ...playersOnPositions[anotherUserIdx].WB];
                        guiltPlayer = possibleGuiltPlayers[MathService.randomInteger(0, possibleGuiltPlayers.length - 1)];
                    }
                    changeRating(guiltPlayer, -0.2);

                    matchLogs[i + 1].players.push({
                        playerName: guiltPlayer.playerName,
                        position: guiltPlayer.position,
                        role: 'guilt',
                        ratingDiff: -0.2,
                    });
                    //поиск виноватого игрока ================================================


                    for (let playerIndex = 0; playerIndex < anotherUser.players.length; playerIndex++) {
                        changeRating(anotherUser.players[playerIndex], -0.2);
                    } // -0.2 пропустившим гол игрокам
                    matchLogs[i + 1].players.push({
                        playerName: 'Another team players',
                        position: 'Another team positions',
                        role: 'none',
                        ratingDiff: -0.2,
                    });
                }
                else {
                    eventCode = 130;

                    let anotherUser = event.user === 0 ? user2 : user1;

                    actedPlayer = anotherUser.players[10];
                    changeRating(actedPlayer, 0.4);


                    matchLogs[i + 1].players = [
                        {
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.4,
                        }
                    ];
                    matchLogs[i + 1].result = `Shot on target`;
                }

                matchLogs[i + 1].code = eventCode;
                break;
        }

        matchLogs[i + 1].code = eventCode;
        matchLogs[i + 1].score = goals[0] + '-' + goals[1];
    }

    xG[0] += xG2[0];
    xG[1] += xG2[1];

    for (let i = 15; i < 30; i++) {
        let event = matchLogs[i + 1];

        let eventCode,
            eventedUser, scoredUser, anotherUser,
            AGIpLength, TCKLpLength, PASpLength, AGImLength, STAmLength, STAzLength, // для удобства
            actedPlayer, possibleActedPlayers, injuredPlayer;

        switch (event.momentType) {
            case 11:
                eventedUser = event.user === 0 ? user1 : user2;

                eventCode = MathService.randomInteger(111, 115);

                switch (eventCode) {
                    case 111:
                        matchLogs[i + 1].players = [];

                        STAmLength = playersWithSkills[event.user].STAm.length;
                        STAzLength = playersWithSkills[event.user].STAz.length;


                        let possibleInjuredPlayers = [];

                        if (STAmLength) {
                            for (let j = 0; j < playersWithSkills[event.user].STAm.length; j++) {
                                let currPlayer = playersWithSkills[event.user].STAm[j];
                                if (!injuredPlayers[event.user].includes(currPlayer.playerId)) possibleInjuredPlayers.push(currPlayer);
                            }
                        }

                        if (!possibleInjuredPlayers.length && STAzLength) {
                            for (let j = 0; j < playersWithSkills[event.user].STAz.length; j++) {
                                let currPlayer = playersWithSkills[event.user].STAz[j];
                                if (!injuredPlayers[event.user].includes(currPlayer.playerId)) possibleInjuredPlayers.push(currPlayer);
                            }
                        }

                        if (!possibleInjuredPlayers.length) {
                            for (let j = 0; j < 5; j++) {
                                let currPlayer = eventedUser.players[j];
                                if (!injuredPlayers[event.user].includes(currPlayer.playerId)) possibleInjuredPlayers.push(currPlayer);
                            }

                            if (!possibleInjuredPlayers.length) {
                                for (let j = 0; j < 5; j++) possibleInjuredPlayers.push(eventedUser.players[j]);
                            }
                        }

                        injuredPlayer = possibleInjuredPlayers[MathService.randomInteger(0, possibleInjuredPlayers.length - 1)];
                        changeRating(injuredPlayer, -0.2);
                        injuredPlayers[event.user].push(injuredPlayer.playerId);


                        let anotherUser = eventedUser === user1 ? user2 : user1;
                        actedPlayer = anotherUser.players[MathService.randomInteger(0, 9)];
                        while (playersWithYellowCards[(event.user + 1) % 2].includes(actedPlayer.playerId)) actedPlayer = anotherUser.players[MathService.randomInteger(0, 9)];
                        changeRating(actedPlayer, -0.4);


                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.4,
                        });
                        matchLogs[i + 1].players.push({
                            playerId: injuredPlayer.playerId,
                            playerName: injuredPlayer.playerName,
                            position: injuredPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `${injuredPlayer.playerName} is injured - ${actedPlayer.playerName} will be punished by a yellow card`;

                        playersWithYellowCards[(event.user + 1) % 2].push(actedPlayer.playerId);
                        break;

                    case 112:
                        matchLogs[i + 1].players = [];

                        AGImLength = playersWithSkills[event.user].AGIm.length;

                        if (AGImLength) actedPlayer = playersWithSkills[event.user].AGIm[MathService.randomInteger(0, AGImLength - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `Unlucky dribbling - ${actedPlayer.playerName}`;
                        break;

                    case 113:
                        matchLogs[i + 1].players = [];

                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];

                        actedPlayer = possibleActedPlayers[MathService.randomInteger(0, possibleActedPlayers.length - 1)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `Unlucky cross - ${actedPlayer.playerName}`;
                        break;

                    case 114:
                        matchLogs[i + 1].players = [];
                        matchLogs[i + 1].result = `Slow passing in the midfield`;
                        break;

                    case 115:
                        matchLogs[i + 1].players = [];

                        actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `${actedPlayer.playerName} made a mistake`;
                        break;
                }
                break;

            case 12:
                eventedUser = event.user === 0 ? user1 : user2;

                eventCode = MathService.randomInteger(121, 125);

                switch (eventCode) {
                    case 121:
                        matchLogs[i + 1].players = [];

                        actedPlayer = eventedUser.players[MathService.randomInteger(0, 9)];

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0,
                        });

                        matchLogs[i + 1].result = `Shot off target`;
                        break;

                    case 122:
                        AGIpLength = playersWithSkills[event.user].AGIp.length;

                        if (AGIpLength) actedPlayer = playersWithSkills[event.user].AGIp[MathService.randomInteger(0, AGIpLength - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(5, 9)];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.playerId,
                                playerName: actedPlayer.playerName,
                                position: actedPlayer.position,
                                ratingDiff: 0.2,
                            }
                        ];

                        matchLogs[i + 1].result = `Successful dribbling by ${actedPlayer.playerName}`;
                        break;

                    case 123:
                        matchLogs[i + 1].players = [];

                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];
                        possibleActedPlayers.sort(function (a, b) {
                            return a - b;
                        });

                        actedPlayer = possibleActedPlayers[possibleActedPlayers.length - 1];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.2,
                        });

                        matchLogs[i + 1].result = `Promising cross by ${actedPlayer.playerName}`;
                        break;

                    case 124:
                        matchLogs[i + 1].players = [];

                        TCKLpLength = playersWithSkills[event.user].TCKLp.length;

                        if (TCKLpLength) actedPlayer = playersWithSkills[event.user].TCKLp[MathService.randomInteger(0, TCKLpLength - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(5, 9)];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.2,
                        });

                        matchLogs[i + 1].result = `Interception by ${actedPlayer.playerName}`;
                        break;

                    case 125:
                        matchLogs[i + 1].players = [];

                        PASpLength = playersWithSkills[event.user].PASp.length;

                        if (PASpLength) actedPlayer = playersWithSkills[event.user].PASp[MathService.randomInteger(0, PASpLength - 1)];
                        else {
                            playersOnPositions[event.user].CM.sort(function (a, b) {
                                return a - b;
                            })
                            actedPlayer = playersOnPositions[event.user].CM[playersOnPositions[event.user].CM.length - 1];
                        }
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.2,
                        });

                        matchLogs[i + 1].result = `Promising through pass by ${actedPlayer.playerName}`;
                        break;
                }
                break;

            case 13:
                let chanceNumbers = Math.floor(xG[event.user] / 0.25);

                if (event.minute === lastPotGoalMinute && goals[0] === goals[1]) chanceNumbers++;

                let goal = MathService.randomInteger(1, 10) <= chanceNumbers ? 1 : 0;

                if (goal) {
                    let scoredPosition, scoredIndex, scoredPlayer, assistantPosition, assistantIndex, assistantPlayer;

                    scoredUser = event.user === 0 ? user1 : user2;
                    anotherUser = event.user === 0 ? user2 : user1;

                    goals[event.user]++;
                    xG[event.user] = Math.max(0, xG[event.user] - 1); //чтобы xG игрока не был меньше 0

                    switch (scoredUser.tactic.teamFocus) {
                        case 'wing-play':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                eventCode = 131;

                                scoredPlayer = playersOnPositions[event.user].FW[0];
                                changeRating(scoredPlayer, 0.8);

                                assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                changeRating(assistantPlayer, 0.8);

                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }


                                matchLogs[i + 1].players = [
                                    {
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerId: assistantPlayer.playerId,
                                        playerName: assistantPlayer.playerName,
                                        position: assistantPlayer.position,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    },
                                ];
                                matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                            }
                            else {
                                eventCode = MathService.randomInteger(131, 136);

                                switch (eventCode) {
                                    case 131:
                                        scoredPlayer = playersOnPositions[event.user].FW[0];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                        assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                        assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.playerId,
                                                playerName: scoredPlayer.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.playerId,
                                                playerName: assistantPlayer.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                                        break;

                                    case 132:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.4);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.4,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`
                                        break;

                                    case 133:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`
                                        break;

                                    case 134:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerId: assistantPlayer.playerId,
                                            playerName: assistantPlayer.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                                        break;

                                    case 135:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`
                                        break;

                                    case 136:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.5,
                                        });

                                        matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`
                                        break;
                                }
                            }
                            break;

                        case 'midfield':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                eventCode = 134;
                                matchLogs[i + 1].players = [];

                                scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                changeRating(scoredPlayer, 0.8);

                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                changeRating(assistantPlayer, 0.8);

                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }

                                matchLogs[i + 1].players.push({
                                    playerId: scoredPlayer.playerId,
                                    playerName: scoredPlayer.playerName,
                                    position: scoredPlayer.position,
                                    role: 'player',
                                    ratingDiff: 0.8,
                                });
                                matchLogs[i + 1].players.push({
                                    playerId: assistantPlayer.playerId,
                                    position: assistantPlayer.position,
                                    role: 'assistant',
                                    ratingDiff: 0.8,
                                });
                                matchLogs[i + 1].players.push({
                                    playerName: 'Scored team players',
                                    position: 'Scored team positions',
                                    role: 'none',
                                    ratingDiff: 0.2,
                                });

                                matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                            }
                            else {
                                eventCode = MathService.randomInteger(131, 136);

                                switch (eventCode) {
                                    case 131:
                                        scoredPlayer = playersOnPositions[event.user].FW[0];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                        assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                        assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.playerId,
                                                playerName: scoredPlayer.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.playerId,
                                                playerName: assistantPlayer.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                                        break;

                                    case 132:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.4);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.4,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`
                                        break;

                                    case 133:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`
                                        break;

                                    case 134:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerId: assistantPlayer.playerId,
                                            playerName: assistantPlayer.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                                        break;

                                    case 135:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`
                                        break;

                                    case 136:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.5,
                                        });

                                        matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`
                                        break;
                                }
                            }
                            break;

                        case 'stepUp':
                            eventCode = MathService.randomInteger(131, 136);

                            switch (eventCode) {
                                case 131:
                                    scoredPlayer = playersOnPositions[event.user].FW[0];
                                    changeRating(scoredPlayer, 0.8);

                                    assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                    assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                    assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                    changeRating(assistantPlayer, 0.8);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerId: assistantPlayer.playerId,
                                            playerName: assistantPlayer.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        },
                                    ];
                                    matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                                    break;

                                case 132:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 0.4);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.4,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`
                                    break;

                                case 133:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 1);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 1,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`
                                    break;

                                case 134:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 0.8);

                                    assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                    changeRating(assistantPlayer, 0.8);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerId: assistantPlayer.playerId,
                                        playerName: assistantPlayer.playerName,
                                        position: assistantPlayer.position,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                                    break;

                                case 135:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 1);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 1,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`
                                    break;

                                case 136:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 0.8);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.5,
                                    });

                                    matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`
                                    break;
                            }
                            break;
                    }


                    //поиск виноватого игрока ================================================
                    let value = Math.random(),
                        anotherUserIdx = (event.user + 1) % 2,
                        guiltPlayer;

                    if (value <= 0.15) guiltPlayer = playersOnPositions[anotherUserIdx].GK[0];
                    else if (value <= 0.30) {
                        let possibleGuiltPlayers = [...playersOnPositions[anotherUserIdx].FW, ...playersOnPositions[anotherUserIdx].WG];
                        guiltPlayer = possibleGuiltPlayers[MathService.randomInteger(0, possibleGuiltPlayers.length - 1)];
                    }
                    else if (value <= 0.60) guiltPlayer = playersOnPositions[anotherUserIdx].CM[MathService.randomInteger(0, playersOnPositions[anotherUserIdx].CM.length - 1)];
                    else {
                        let possibleGuiltPlayers = [...playersOnPositions[anotherUserIdx].CD, ...playersOnPositions[anotherUserIdx].WB];
                        guiltPlayer = possibleGuiltPlayers[MathService.randomInteger(0, possibleGuiltPlayers.length - 1)];
                    }
                    changeRating(guiltPlayer, -0.2);

                    matchLogs[i + 1].players.push({
                        playerName: guiltPlayer.playerName,
                        position: guiltPlayer.position,
                        role: 'guilt',
                        ratingDiff: -0.2,
                    });
                    //поиск виноватого игрока ================================================


                    for (let playerIndex = 0; playerIndex < anotherUser.players.length; playerIndex++) {
                        changeRating(anotherUser.players[playerIndex], -0.2);
                    } // -0.2 всем, кому гол
                    matchLogs[i + 1].players.push({
                        playerName: 'Another team players',
                        position: 'Another team positions',
                        role: 'none',
                        ratingDiff: -0.2,
                    });
                }
                else {
                    eventCode = 130;

                    let anotherUser = event.user === 0 ? user2 : user1;

                    actedPlayer = anotherUser.players[10];
                    changeRating(actedPlayer, 0.4);


                    matchLogs[i + 1].players = [
                        {
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.4,
                        }
                    ];
                    matchLogs[i + 1].result = `Shot on target`;
                }

                matchLogs[i + 1].code = eventCode;
                break;
        }

        matchLogs[i + 1].code = eventCode;
        matchLogs[i + 1].score = goals[0] + '-' + goals[1];
    }


    // xG[0] = xG1[0];
    // xG[1] = xG1[1];
    //
    // for (let i = 0; i < 30; i++) {
    //     if (i === 15) {
    //         xG[0] += xG2[0];
    //         xG[1] += xG2[1];
    //     }
    //
    //     let event = matchLogs[i + 1];
    //
    //     let eventCode,
    //         eventedUser, scoredUser, anotherUser,
    //         AGIpLength, TCKLpLength, PASpLength, AGImLength, STAmLength, STAzLength, // для удобства
    //         actedPlayer, possibleActedPlayers, injuredPlayer;
    //
    //     switch (event.momentType) {
    //         case 11:
    //             eventedUser = event.user === 0 ? user1 : user2;
    //
    //             eventCode = MathService.randomInteger(111, 115);
    //
    //             switch (eventCode) {
    //                 case 111:
    //                     let anotherUser = eventedUser === user1 ? user2 : user1;
    //                     matchLogs[i + 1].players = [];
    //
    //                     injuredPlayer = findInjured_111(eventedUser, playersWithSkills[event.user], injuredPlayers[event.user]);
    //                     injuredPlayers[event.user].push(injuredPlayer.playerId);
    //                     changeRating(injuredPlayer, -0.2);
    //
    //                     actedPlayer = findActed_111(anotherUser);
    //                     actedPlayer.seasonYellowCardsCount++;
    //                     playersWithYellowCards[(event.user + 1) % 2].push(actedPlayer.playerId);
    //                     changeRating(actedPlayer, -0.4);
    //
    //                     console.log(actedPlayer, 'dfs');
    //
    //
    //                     if (playersWithYellowCards[(event.user + 1) % 2].includes(actedPlayer.playerId)) {
    //                         actedPlayer.unavailableMatchesCount = 4;
    //
    //                         // удаление из массива игроков
    //                         for (let plIdx = 0; plIdx < anotherUser.players.length; plIdx++) {
    //                             if (anotherUser.players[plIdx].playerId === actedPlayer.playerId) {
    //                                 anotherUser.players.splice(plIdx, 1);
    //                                 break;
    //                             }
    //                         }
    //
    //                         // удаление из игроков на позициях
    //                         for (let plIdx = 0; plIdx < playersOnPositions[(event.user + 1) % 2][actedPlayer.position].length; plIdx++) {
    //                             if (playersOnPositions[(event.user + 1) % 2][actedPlayer.position][plIdx].playerId === actedPlayer.playerId) {
    //                                 playersOnPositions[(event.user + 1) % 2][actedPlayer.position].splice(plIdx, 1);
    //                                 break;
    //                             }
    //                         }
    //
    //                         // удаление из игроков по скиллах ===========================================================================
    //                         if (actedPlayer.physicalSkills.agility > 0) {
    //                             for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].AGIp.length; plIdx++) {
    //                                 if (playersWithSkills[(event.user + 1) % 2].AGIp[plIdx].playerId === actedPlayer.playerId) {
    //                                     playersWithSkills[(event.user + 1) % 2].AGIp.splice(plIdx, 1);
    //                                     break;
    //                                 }
    //                             }
    //                         } else if (actedPlayer.physicalSkills.agility < 0) {
    //                             for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].AGIm.length; plIdx++) {
    //                                 if (playersWithSkills[(event.user + 1) % 2].AGIm[plIdx].playerId === actedPlayer.playerId) {
    //                                     playersWithSkills[(event.user + 1) % 2].AGIm.splice(plIdx, 1);
    //                                     break;
    //                                 }
    //                             }
    //                         }
    //
    //                         if (actedPlayer.physicalSkills.stamina === 0) {
    //                             for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].STAz.length; plIdx++) {
    //                                 if (playersWithSkills[(event.user + 1) % 2].STAz[plIdx].playerId === actedPlayer.playerId) {
    //                                     playersWithSkills[(event.user + 1) % 2].STAz.splice(plIdx, 1);
    //                                     break;
    //                                 }
    //                             }
    //                         } else if (actedPlayer.physicalSkills.stamina < 0) {
    //                             for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].STAm.length; plIdx++) {
    //                                 if (playersWithSkills[(event.user + 1) % 2].STAm[plIdx].playerId === actedPlayer.playerId) {
    //                                     playersWithSkills[(event.user + 1) % 2].STAm.splice(plIdx, 1);
    //                                     break;
    //                                 }
    //                             }
    //                         }
    //
    //                         if (actedPlayer.technicalSkills.tackling > 0) {
    //                             for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].TCKLp.length; plIdx++) {
    //                                 if (playersWithSkills[(event.user + 1) % 2].TCKLp[plIdx].playerId === actedPlayer.playerId) {
    //                                     playersWithSkills[(event.user + 1) % 2].TCKLp.splice(plIdx, 1);
    //                                     break;
    //                                 }
    //                             }
    //                         }
    //
    //                         if (actedPlayer.technicalSkills.pass > 0) {
    //                             for (let plIdx = 0; plIdx < playersWithSkills[(event.user + 1) % 2].PASp.length; plIdx++) {
    //                                 if (playersWithSkills[(event.user + 1) % 2].PASp[plIdx].playerId === actedPlayer.playerId) {
    //                                     playersWithSkills[(event.user + 1) % 2].PASp.splice(plIdx, 1);
    //                                     break;
    //                                 }
    //                             }
    //                         }
    //                         // удаление из игроков по скиллах ===========================================================================
    //                     }
    //
    //
    //                     if (actedPlayer.seasonYellowCardsCount === 8) {
    //                         //unavailable
    //                     }
    //
    //
    //                     // while (playersWithYellowCards[(event.user + 1) % 2].includes(actedPlayer.playerId)) actedPlayer = anotherUser.players[MathService.randomInteger(0, 9)];
    //
    //
    //                     matchLogs[i + 1].players.push({
    //                         playerId: actedPlayer.playerId,
    //                         playerName: actedPlayer.playerName,
    //                         position: actedPlayer.position,
    //                         ratingDiff: -0.4,
    //                     });
    //                     matchLogs[i + 1].players.push({
    //                         playerId: injuredPlayer.playerId,
    //                         playerName: injuredPlayer.playerName,
    //                         position: injuredPlayer.position,
    //                         ratingDiff: -0.2,
    //                     });
    //
    //                     matchLogs[i + 1].result = `${injuredPlayer.playerName} is injured - ${actedPlayer.playerName} will be punished by a yellow card`;
    //                     break;
    //
    //                 case 112:
    //                     matchLogs[i + 1].players = [];
    //
    //                     AGImLength = playersWithSkills[event.user].AGIm.length;
    //
    //                     if (AGImLength) actedPlayer = playersWithSkills[event.user].AGIm[MathService.randomInteger(0, AGImLength - 1)];
    //                     else actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
    //                     changeRating(actedPlayer, -0.2);
    //
    //                     matchLogs[i + 1].players.push({
    //                         playerId: actedPlayer.playerId,
    //                         playerName: actedPlayer.playerName,
    //                         position: actedPlayer.position,
    //                         ratingDiff: -0.2,
    //                     });
    //
    //                     matchLogs[i + 1].result = `Unlucky dribbling - ${actedPlayer.playerName}`;
    //                     break;
    //
    //                 case 113:
    //                     matchLogs[i + 1].players = [];
    //
    //                     possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];
    //
    //                     actedPlayer = possibleActedPlayers[MathService.randomInteger(0, possibleActedPlayers.length - 1)];
    //                     changeRating(actedPlayer, -0.2);
    //
    //                     matchLogs[i + 1].players.push({
    //                         playerId: actedPlayer.playerId,
    //                         playerName: actedPlayer.playerName,
    //                         position: actedPlayer.position,
    //                         ratingDiff: -0.2,
    //                     });
    //
    //                     matchLogs[i + 1].result = `Unlucky cross - ${actedPlayer.playerName}`;
    //                     break;
    //
    //                 case 114:
    //                     matchLogs[i + 1].players = [];
    //                     matchLogs[i + 1].result = `Slow passing in the midfield`;
    //                     break;
    //
    //                 case 115:
    //                     matchLogs[i + 1].players = [];
    //
    //                     actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
    //                     changeRating(actedPlayer, -0.2);
    //
    //                     matchLogs[i + 1].players.push({
    //                         playerId: actedPlayer.playerId,
    //                         playerName: actedPlayer.playerName,
    //                         position: actedPlayer.position,
    //                         ratingDiff: -0.2,
    //                     });
    //
    //                     matchLogs[i + 1].result = `${actedPlayer.playerName} made a mistake`;
    //                     break;
    //             }
    //             break;
    //
    //         case 12:
    //             eventedUser = event.user === 0 ? user1 : user2;
    //
    //             eventCode = MathService.randomInteger(121, 125);
    //
    //             switch (eventCode) {
    //                 case 121:
    //                     matchLogs[i + 1].players = [];
    //
    //                     actedPlayer = eventedUser.players[MathService.randomInteger(0, 9 - kickedPlayers[event.user])];
    //
    //                     matchLogs[i + 1].players.push({
    //                         playerId: actedPlayer.playerId,
    //                         playerName: actedPlayer.playerName,
    //                         position: actedPlayer.position,
    //                         ratingDiff: 0,
    //                     });
    //
    //                     matchLogs[i + 1].result = `Shot off target`;
    //                     break;
    //
    //                 case 122:
    //                     AGIpLength = playersWithSkills[event.user].AGIp.length;
    //
    //                     if (AGIpLength) actedPlayer = playersWithSkills[event.user].AGIp[MathService.randomInteger(0, AGIpLength - 1)];
    //                     else actedPlayer = eventedUser.players[MathService.randomInteger(5 - kickedPlayers[event.user], 9 - kickedPlayers[event.user])];
    //                     changeRating(actedPlayer, 0.2);
    //
    //                     matchLogs[i + 1].players = [
    //                         {
    //                             playerId: actedPlayer.playerId,
    //                             playerName: actedPlayer.playerName,
    //                             position: actedPlayer.position,
    //                             ratingDiff: 0.2,
    //                         }
    //                     ];
    //
    //                     matchLogs[i + 1].result = `Successful dribbling by ${actedPlayer.playerName}`;
    //                     break;
    //
    //                 case 123:
    //                     matchLogs[i + 1].players = [];
    //
    //                     possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];
    //                     possibleActedPlayers.sort(function (a, b) {
    //                         return a - b;
    //                     });
    //
    //                     actedPlayer = possibleActedPlayers[possibleActedPlayers.length - 1];
    //                     changeRating(actedPlayer, 0.2);
    //
    //                     matchLogs[i + 1].players.push({
    //                         playerId: actedPlayer.playerId,
    //                         playerName: actedPlayer.playerName,
    //                         position: actedPlayer.position,
    //                         ratingDiff: 0.2,
    //                     });
    //
    //                     matchLogs[i + 1].result = `Promising cross by ${actedPlayer.playerName}`;
    //                     break;
    //
    //                 case 124:
    //                     matchLogs[i + 1].players = [];
    //
    //                     TCKLpLength = playersWithSkills[event.user].TCKLp.length;
    //
    //                     if (TCKLpLength) actedPlayer = playersWithSkills[event.user].TCKLp[MathService.randomInteger(0, TCKLpLength - 1)];
    //                     else actedPlayer = eventedUser.players[MathService.randomInteger(5 - kickedPlayers[event.user], 9 - kickedPlayers[event.user])];
    //                     changeRating(actedPlayer, 0.2);
    //
    //                     matchLogs[i + 1].players.push({
    //                         playerId: actedPlayer.playerId,
    //                         playerName: actedPlayer.playerName,
    //                         position: actedPlayer.position,
    //                         ratingDiff: 0.2,
    //                     });
    //
    //                     matchLogs[i + 1].result = `Interception by ${actedPlayer.playerName}`;
    //                     break;
    //
    //                 case 125:
    //                     matchLogs[i + 1].players = [];
    //
    //                     PASpLength = playersWithSkills[event.user].PASp.length;
    //
    //                     if (PASpLength) actedPlayer = playersWithSkills[event.user].PASp[MathService.randomInteger(0, PASpLength - 1)];
    //                     else {
    //                         playersOnPositions[event.user].CM.sort(function (a, b) {
    //                             return a - b;
    //                         })
    //                         actedPlayer = playersOnPositions[event.user].CM[playersOnPositions[event.user].CM.length - 1];
    //                     }
    //                     changeRating(actedPlayer, 0.2);
    //
    //                     matchLogs[i + 1].players.push({
    //                         playerId: actedPlayer.playerId,
    //                         playerName: actedPlayer.playerName,
    //                         position: actedPlayer.position,
    //                         ratingDiff: 0.2,
    //                     });
    //
    //                     matchLogs[i + 1].result = `Promising through pass by ${actedPlayer.playerName}`;
    //                     break;
    //             }
    //             break;
    //
    //         case 13:
    //             let chanceNumbers = Math.floor(xG[event.user] / 0.25);
    //
    //             if (event.minute === lastPotGoalMinute && goals[0] === goals[1]) chanceNumbers++;
    //
    //             let goal = MathService.randomInteger(1, 10) <= chanceNumbers ? 1 : 0;
    //
    //             if (goal) {
    //                 let scoredPosition, scoredIndex, scoredPlayer, assistantPosition, assistantIndex, assistantPlayer;
    //
    //                 scoredUser = event.user === 0 ? user1 : user2;
    //                 anotherUser = event.user === 0 ? user2 : user1;
    //
    //                 goals[event.user]++;
    //                 xG[event.user] = Math.max(0, xG[event.user] - 1); //чтобы xG игрока не был меньше 0
    //
    //                 switch (scoredUser.tactic.teamFocus) {
    //                     case 'wing-play':
    //                         if (MathService.randomInteger(1, 3) <= 2) {
    //                             eventCode = 131;
    //
    //                             scoredPlayer = playersOnPositions[event.user].FW[0];
    //                             changeRating(scoredPlayer, 0.8);
    //
    //                             assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
    //                             assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
    //                             assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
    //                             changeRating(assistantPlayer, 0.8);
    //
    //                             for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
    //                                 let currPlayer = scoredUser.players[playerIndex];
    //                                 if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
    //                             }
    //
    //
    //                             matchLogs[i + 1].players = [
    //                                 {
    //                                     playerId: scoredPlayer.playerId,
    //                                     playerName: scoredPlayer.playerName,
    //                                     position: scoredPlayer.position,
    //                                     role: 'player',
    //                                     ratingDiff: 0.8,
    //                                 },
    //                                 {
    //                                     playerId: assistantPlayer.playerId,
    //                                     playerName: assistantPlayer.playerName,
    //                                     position: assistantPlayer.position,
    //                                     role: 'assistant',
    //                                     ratingDiff: 0.8,
    //                                 },
    //                                 {
    //                                     playerName: 'Scored team players',
    //                                     position: 'Scored team positions',
    //                                     role: 'none',
    //                                     ratingDiff: 0.2,
    //                                 },
    //                             ];
    //                             matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
    //                         } else {
    //                             eventCode = MathService.randomInteger(131, 136);
    //
    //                             switch (eventCode) {
    //                                 case 131:
    //                                     scoredPlayer = playersOnPositions[event.user].FW[0];
    //                                     changeRating(scoredPlayer, 0.8);
    //
    //                                     assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
    //                                     assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
    //                                     assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
    //                                     changeRating(assistantPlayer, 0.8);
    //
    //                                     for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
    //                                         let currPlayer = scoredUser.players[playerIndex];
    //                                         if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
    //                                     }
    //
    //                                     matchLogs[i + 1].players = [
    //                                         {
    //                                             playerId: scoredPlayer.playerId,
    //                                             playerName: scoredPlayer.playerName,
    //                                             position: scoredPlayer.position,
    //                                             role: 'player',
    //                                             ratingDiff: 0.8,
    //                                         },
    //                                         {
    //                                             playerId: assistantPlayer.playerId,
    //                                             playerName: assistantPlayer.playerName,
    //                                             position: assistantPlayer.position,
    //                                             role: 'assistant',
    //                                             ratingDiff: 0.8,
    //                                         },
    //                                         {
    //                                             playerName: 'Scored team players',
    //                                             position: 'Scored team positions',
    //                                             role: 'none',
    //                                             ratingDiff: 0.2,
    //                                         },
    //                                     ];
    //                                     matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
    //                                     break;
    //
    //                                 case 132:
    //                                     matchLogs[i + 1].players = [];
    //
    //                                     scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
    //                                     scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
    //                                     scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
    //                                     changeRating(scoredPlayer, 0.4);
    //
    //                                     for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
    //                                         let currPlayer = scoredUser.players[playerIndex];
    //                                         if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
    //                                     }
    //
    //                                     matchLogs[i + 1].players.push({
    //                                         playerId: scoredPlayer.playerId,
    //                                         playerName: scoredPlayer.playerName,
    //                                         position: scoredPlayer.position,
    //                                         role: 'player',
    //                                         ratingDiff: 0.4,
    //                                     });
    //                                     matchLogs[i + 1].players.push({
    //                                         playerName: 'Scored team players',
    //                                         position: 'Scored team positions',
    //                                         role: 'none',
    //                                         ratingDiff: 0.2,
    //                                     });
    //
    //                                     matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`
    //                                     break;
    //
    //                                 case 133:
    //                                     matchLogs[i + 1].players = [];
    //
    //                                     scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
    //                                     scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
    //                                     scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
    //                                     changeRating(scoredPlayer, 1);
    //
    //                                     for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
    //                                         let currPlayer = scoredUser.players[playerIndex];
    //                                         if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
    //                                     }
    //
    //                                     matchLogs[i + 1].players.push({
    //                                         playerId: scoredPlayer.playerId,
    //                                         playerName: scoredPlayer.playerName,
    //                                         position: scoredPlayer.position,
    //                                         role: 'player',
    //                                         ratingDiff: 1,
    //                                     });
    //                                     matchLogs[i + 1].players.push({
    //                                         playerName: 'Scored team players',
    //                                         position: 'Scored team positions',
    //                                         role: 'none',
    //                                         ratingDiff: 0.2,
    //                                     });
    //
    //                                     matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`
    //                                     break;
    //
    //                                 case 134:
    //                                     matchLogs[i + 1].players = [];
    //
    //                                     scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
    //                                     scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
    //                                     scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
    //                                     changeRating(scoredPlayer, 0.8);
    //
    //                                     assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
    //                                     changeRating(assistantPlayer, 0.8);
    //
    //                                     for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
    //                                         let currPlayer = scoredUser.players[playerIndex];
    //                                         if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
    //                                     }
    //
    //                                     matchLogs[i + 1].players.push({
    //                                         playerId: scoredPlayer.playerId,
    //                                         playerName: scoredPlayer.playerName,
    //                                         position: scoredPlayer.position,
    //                                         role: 'player',
    //                                         ratingDiff: 0.8,
    //                                     });
    //                                     matchLogs[i + 1].players.push({
    //                                         playerId: assistantPlayer.playerId,
    //                                         playerName: assistantPlayer.playerName,
    //                                         position: assistantPlayer.position,
    //                                         role: 'assistant',
    //                                         ratingDiff: 0.8,
    //                                     });
    //                                     matchLogs[i + 1].players.push({
    //                                         playerName: 'Scored team players',
    //                                         position: 'Scored team positions',
    //                                         role: 'none',
    //                                         ratingDiff: 0.2,
    //                                     });
    //
    //                                     matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
    //                                     break;
    //
    //                                 case 135:
    //                                     matchLogs[i + 1].players = [];
    //
    //                                     scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
    //                                     scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
    //                                     scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
    //                                     changeRating(scoredPlayer, 1);
    //
    //                                     for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
    //                                         let currPlayer = scoredUser.players[playerIndex];
    //                                         if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
    //                                     }
    //
    //                                     matchLogs[i + 1].players.push({
    //                                         playerId: scoredPlayer.playerId,
    //                                         playerName: scoredPlayer.playerName,
    //                                         position: scoredPlayer.position,
    //                                         role: 'player',
    //                                         ratingDiff: 1,
    //                                     });
    //                                     matchLogs[i + 1].players.push({
    //                                         playerName: 'Scored team players',
    //                                         position: 'Scored team positions',
    //                                         role: 'none',
    //                                         ratingDiff: 0.2,
    //                                     });
    //
    //                                     matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`
    //                                     break;
    //
    //                                 case 136:
    //                                     matchLogs[i + 1].players = [];
    //
    //                                     scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
    //                                     scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
    //                                     scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
    //                                     changeRating(scoredPlayer, 0.8);
    //
    //                                     for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
    //                                         let currPlayer = scoredUser.players[playerIndex];
    //                                         if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
    //                                     }
    //
    //                                     matchLogs[i + 1].players.push({
    //                                         playerId: scoredPlayer.playerId,
    //                                         playerName: scoredPlayer.playerName,
    //                                         position: scoredPlayer.position,
    //                                         role: 'player',
    //                                         ratingDiff: 0.8,
    //                                     });
    //                                     matchLogs[i + 1].players.push({
    //                                         playerName: 'Scored team players',
    //                                         position: 'Scored team positions',
    //                                         role: 'none',
    //                                         ratingDiff: 0.5,
    //                                     });
    //
    //                                     matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`
    //                                     break;
    //                             }
    //                         }
    //                         break;
    //
    //                     case 'midfield':
    //                         if (MathService.randomInteger(1, 3) <= 2) {
    //                             eventCode = 134;
    //                             matchLogs[i + 1].players = [];
    //
    //                             scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
    //                             scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
    //                             scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
    //                             changeRating(scoredPlayer, 0.8);
    //
    //                             assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
    //                             changeRating(assistantPlayer, 0.8);
    //
    //                             for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
    //                                 let currPlayer = scoredUser.players[playerIndex];
    //                                 if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
    //                             }
    //
    //                             matchLogs[i + 1].players.push({
    //                                 playerId: scoredPlayer.playerId,
    //                                 playerName: scoredPlayer.playerName,
    //                                 position: scoredPlayer.position,
    //                                 role: 'player',
    //                                 ratingDiff: 0.8,
    //                             });
    //                             matchLogs[i + 1].players.push({
    //                                 playerId: assistantPlayer.playerId,
    //                                 position: assistantPlayer.position,
    //                                 role: 'assistant',
    //                                 ratingDiff: 0.8,
    //                             });
    //                             matchLogs[i + 1].players.push({
    //                                 playerName: 'Scored team players',
    //                                 position: 'Scored team positions',
    //                                 role: 'none',
    //                                 ratingDiff: 0.2,
    //                             });
    //
    //                             matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
    //                         } else {
    //                             eventCode = MathService.randomInteger(131, 136);
    //
    //                             switch (eventCode) {
    //                                 case 131:
    //                                     scoredPlayer = playersOnPositions[event.user].FW[0];
    //                                     changeRating(scoredPlayer, 0.8);
    //
    //                                     assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
    //                                     assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
    //                                     assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
    //                                     changeRating(assistantPlayer, 0.8);
    //
    //                                     for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
    //                                         let currPlayer = scoredUser.players[playerIndex];
    //                                         if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
    //                                     }
    //
    //                                     matchLogs[i + 1].players = [
    //                                         {
    //                                             playerId: scoredPlayer.playerId,
    //                                             playerName: scoredPlayer.playerName,
    //                                             position: scoredPlayer.position,
    //                                             role: 'player',
    //                                             ratingDiff: 0.8,
    //                                         },
    //                                         {
    //                                             playerId: assistantPlayer.playerId,
    //                                             playerName: assistantPlayer.playerName,
    //                                             position: assistantPlayer.position,
    //                                             role: 'assistant',
    //                                             ratingDiff: 0.8,
    //                                         },
    //                                         {
    //                                             playerName: 'Scored team players',
    //                                             position: 'Scored team positions',
    //                                             role: 'none',
    //                                             ratingDiff: 0.2,
    //                                         },
    //                                     ];
    //                                     matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
    //                                     break;
    //
    //                                 case 132:
    //                                     matchLogs[i + 1].players = [];
    //
    //                                     scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
    //                                     scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
    //                                     scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
    //                                     changeRating(scoredPlayer, 0.4);
    //
    //                                     for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
    //                                         let currPlayer = scoredUser.players[playerIndex];
    //                                         if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
    //                                     }
    //
    //                                     matchLogs[i + 1].players.push({
    //                                         playerId: scoredPlayer.playerId,
    //                                         playerName: scoredPlayer.playerName,
    //                                         position: scoredPlayer.position,
    //                                         role: 'player',
    //                                         ratingDiff: 0.4,
    //                                     });
    //                                     matchLogs[i + 1].players.push({
    //                                         playerName: 'Scored team players',
    //                                         position: 'Scored team positions',
    //                                         role: 'none',
    //                                         ratingDiff: 0.2,
    //                                     });
    //
    //                                     matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`
    //                                     break;
    //
    //                                 case 133:
    //                                     matchLogs[i + 1].players = [];
    //
    //                                     scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
    //                                     scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
    //                                     scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
    //                                     changeRating(scoredPlayer, 1);
    //
    //                                     for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
    //                                         let currPlayer = scoredUser.players[playerIndex];
    //                                         if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
    //                                     }
    //
    //                                     matchLogs[i + 1].players.push({
    //                                         playerId: scoredPlayer.playerId,
    //                                         playerName: scoredPlayer.playerName,
    //                                         position: scoredPlayer.position,
    //                                         role: 'player',
    //                                         ratingDiff: 1,
    //                                     });
    //                                     matchLogs[i + 1].players.push({
    //                                         playerName: 'Scored team players',
    //                                         position: 'Scored team positions',
    //                                         role: 'none',
    //                                         ratingDiff: 0.2,
    //                                     });
    //
    //                                     matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`
    //                                     break;
    //
    //                                 case 134:
    //                                     matchLogs[i + 1].players = [];
    //
    //                                     scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
    //                                     scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
    //                                     scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
    //                                     changeRating(scoredPlayer, 0.8);
    //
    //                                     assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
    //                                     changeRating(assistantPlayer, 0.8);
    //
    //                                     for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
    //                                         let currPlayer = scoredUser.players[playerIndex];
    //                                         if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
    //                                     }
    //
    //                                     matchLogs[i + 1].players.push({
    //                                         playerId: scoredPlayer.playerId,
    //                                         playerName: scoredPlayer.playerName,
    //                                         position: scoredPlayer.position,
    //                                         role: 'player',
    //                                         ratingDiff: 0.8,
    //                                     });
    //                                     matchLogs[i + 1].players.push({
    //                                         playerId: assistantPlayer.playerId,
    //                                         playerName: assistantPlayer.playerName,
    //                                         position: assistantPlayer.position,
    //                                         role: 'assistant',
    //                                         ratingDiff: 0.8,
    //                                     });
    //                                     matchLogs[i + 1].players.push({
    //                                         playerName: 'Scored team players',
    //                                         position: 'Scored team positions',
    //                                         role: 'none',
    //                                         ratingDiff: 0.2,
    //                                     });
    //
    //                                     matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
    //                                     break;
    //
    //                                 case 135:
    //                                     matchLogs[i + 1].players = [];
    //
    //                                     scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
    //                                     scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
    //                                     scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
    //                                     changeRating(scoredPlayer, 1);
    //
    //                                     for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
    //                                         let currPlayer = scoredUser.players[playerIndex];
    //                                         if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
    //                                     }
    //
    //                                     matchLogs[i + 1].players.push({
    //                                         playerId: scoredPlayer.playerId,
    //                                         playerName: scoredPlayer.playerName,
    //                                         position: scoredPlayer.position,
    //                                         role: 'player',
    //                                         ratingDiff: 1,
    //                                     });
    //                                     matchLogs[i + 1].players.push({
    //                                         playerName: 'Scored team players',
    //                                         position: 'Scored team positions',
    //                                         role: 'none',
    //                                         ratingDiff: 0.2,
    //                                     });
    //
    //                                     matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`
    //                                     break;
    //
    //                                 case 136:
    //                                     matchLogs[i + 1].players = [];
    //
    //                                     scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
    //                                     scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
    //                                     scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
    //                                     changeRating(scoredPlayer, 0.8);
    //
    //                                     for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
    //                                         let currPlayer = scoredUser.players[playerIndex];
    //                                         if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
    //                                     }
    //
    //                                     matchLogs[i + 1].players.push({
    //                                         playerId: scoredPlayer.playerId,
    //                                         playerName: scoredPlayer.playerName,
    //                                         position: scoredPlayer.position,
    //                                         role: 'player',
    //                                         ratingDiff: 0.8,
    //                                     });
    //                                     matchLogs[i + 1].players.push({
    //                                         playerName: 'Scored team players',
    //                                         position: 'Scored team positions',
    //                                         role: 'none',
    //                                         ratingDiff: 0.5,
    //                                     });
    //
    //                                     matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`
    //                                     break;
    //                             }
    //                         }
    //                         break;
    //
    //                     case 'stepUp':
    //                         eventCode = MathService.randomInteger(131, 136);
    //
    //                         switch (eventCode) {
    //                             case 131:
    //                                 scoredPlayer = playersOnPositions[event.user].FW[0];
    //                                 changeRating(scoredPlayer, 0.8);
    //
    //                                 assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
    //                                 assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
    //                                 assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
    //                                 changeRating(assistantPlayer, 0.8);
    //
    //                                 for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
    //                                     let currPlayer = scoredUser.players[playerIndex];
    //                                     if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
    //                                 }
    //
    //                                 matchLogs[i + 1].players = [
    //                                     {
    //                                         playerId: scoredPlayer.playerId,
    //                                         playerName: scoredPlayer.playerName,
    //                                         position: scoredPlayer.position,
    //                                         role: 'player',
    //                                         ratingDiff: 0.8,
    //                                     },
    //                                     {
    //                                         playerId: assistantPlayer.playerId,
    //                                         playerName: assistantPlayer.playerName,
    //                                         position: assistantPlayer.position,
    //                                         role: 'assistant',
    //                                         ratingDiff: 0.8,
    //                                     },
    //                                     {
    //                                         playerName: 'Scored team players',
    //                                         position: 'Scored team positions',
    //                                         role: 'none',
    //                                         ratingDiff: 0.2,
    //                                     },
    //                                 ];
    //                                 matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
    //                                 break;
    //
    //                             case 132:
    //                                 matchLogs[i + 1].players = [];
    //
    //                                 scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
    //                                 scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
    //                                 scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
    //                                 changeRating(scoredPlayer, 0.4);
    //
    //                                 for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
    //                                     let currPlayer = scoredUser.players[playerIndex];
    //                                     if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
    //                                 }
    //
    //                                 matchLogs[i + 1].players.push({
    //                                     playerId: scoredPlayer.playerId,
    //                                     playerName: scoredPlayer.playerName,
    //                                     position: scoredPlayer.position,
    //                                     role: 'player',
    //                                     ratingDiff: 0.4,
    //                                 });
    //                                 matchLogs[i + 1].players.push({
    //                                     playerName: 'Scored team players',
    //                                     position: 'Scored team positions',
    //                                     role: 'none',
    //                                     ratingDiff: 0.2,
    //                                 });
    //
    //                                 matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`
    //                                 break;
    //
    //                             case 133:
    //                                 matchLogs[i + 1].players = [];
    //
    //                                 scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
    //                                 scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
    //                                 scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
    //                                 changeRating(scoredPlayer, 1);
    //
    //                                 for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
    //                                     let currPlayer = scoredUser.players[playerIndex];
    //                                     if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
    //                                 }
    //
    //                                 matchLogs[i + 1].players.push({
    //                                     playerId: scoredPlayer.playerId,
    //                                     playerName: scoredPlayer.playerName,
    //                                     position: scoredPlayer.position,
    //                                     role: 'player',
    //                                     ratingDiff: 1,
    //                                 });
    //                                 matchLogs[i + 1].players.push({
    //                                     playerName: 'Scored team players',
    //                                     position: 'Scored team positions',
    //                                     role: 'none',
    //                                     ratingDiff: 0.2,
    //                                 });
    //
    //                                 matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`
    //                                 break;
    //
    //                             case 134:
    //                                 matchLogs[i + 1].players = [];
    //
    //                                 scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
    //                                 scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
    //                                 scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
    //                                 changeRating(scoredPlayer, 0.8);
    //
    //                                 assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
    //                                 changeRating(assistantPlayer, 0.8);
    //
    //                                 for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
    //                                     let currPlayer = scoredUser.players[playerIndex];
    //                                     if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
    //                                 }
    //
    //                                 matchLogs[i + 1].players.push({
    //                                     playerId: scoredPlayer.playerId,
    //                                     playerName: scoredPlayer.playerName,
    //                                     position: scoredPlayer.position,
    //                                     role: 'player',
    //                                     ratingDiff: 0.8,
    //                                 });
    //                                 matchLogs[i + 1].players.push({
    //                                     playerId: assistantPlayer.playerId,
    //                                     playerName: assistantPlayer.playerName,
    //                                     position: assistantPlayer.position,
    //                                     role: 'assistant',
    //                                     ratingDiff: 0.8,
    //                                 });
    //                                 matchLogs[i + 1].players.push({
    //                                     playerName: 'Scored team players',
    //                                     position: 'Scored team positions',
    //                                     role: 'none',
    //                                     ratingDiff: 0.2,
    //                                 });
    //
    //                                 matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
    //                                 break;
    //
    //                             case 135:
    //                                 matchLogs[i + 1].players = [];
    //
    //                                 scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
    //                                 scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
    //                                 scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
    //                                 changeRating(scoredPlayer, 1);
    //
    //                                 for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
    //                                     let currPlayer = scoredUser.players[playerIndex];
    //                                     if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
    //                                 }
    //
    //                                 matchLogs[i + 1].players.push({
    //                                     playerId: scoredPlayer.playerId,
    //                                     playerName: scoredPlayer.playerName,
    //                                     position: scoredPlayer.position,
    //                                     role: 'player',
    //                                     ratingDiff: 1,
    //                                 });
    //                                 matchLogs[i + 1].players.push({
    //                                     playerName: 'Scored team players',
    //                                     position: 'Scored team positions',
    //                                     role: 'none',
    //                                     ratingDiff: 0.2,
    //                                 });
    //
    //                                 matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`
    //                                 break;
    //
    //                             case 136:
    //                                 matchLogs[i + 1].players = [];
    //
    //                                 scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
    //                                 scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
    //                                 scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
    //                                 changeRating(scoredPlayer, 0.8);
    //
    //                                 for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
    //                                     let currPlayer = scoredUser.players[playerIndex];
    //                                     if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
    //                                 }
    //
    //                                 matchLogs[i + 1].players.push({
    //                                     playerId: scoredPlayer.playerId,
    //                                     playerName: scoredPlayer.playerName,
    //                                     position: scoredPlayer.position,
    //                                     role: 'player',
    //                                     ratingDiff: 0.8,
    //                                 });
    //                                 matchLogs[i + 1].players.push({
    //                                     playerName: 'Scored team players',
    //                                     position: 'Scored team positions',
    //                                     role: 'none',
    //                                     ratingDiff: 0.5,
    //                                 });
    //
    //                                 matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`
    //                                 break;
    //                         }
    //                         break;
    //                 }
    //
    //
    //                 //поиск виноватого игрока ================================================
    //                 let value = Math.random(),
    //                     anotherUserIdx = (event.user + 1) % 2,
    //                     guiltPlayer;
    //
    //                 if (value <= 0.15) guiltPlayer = playersOnPositions[anotherUserIdx].GK[0];
    //                 else if (value <= 0.30) {
    //                     let possibleGuiltPlayers = [...playersOnPositions[anotherUserIdx].FW, ...playersOnPositions[anotherUserIdx].WG];
    //                     guiltPlayer = possibleGuiltPlayers[MathService.randomInteger(0, possibleGuiltPlayers.length - 1)];
    //                 } else if (value <= 0.60) guiltPlayer = playersOnPositions[anotherUserIdx].CM[MathService.randomInteger(0, playersOnPositions[anotherUserIdx].CM.length - 1)];
    //                 else {
    //                     let possibleGuiltPlayers = [...playersOnPositions[anotherUserIdx].CD, ...playersOnPositions[anotherUserIdx].WB];
    //                     guiltPlayer = possibleGuiltPlayers[MathService.randomInteger(0, possibleGuiltPlayers.length - 1)];
    //                 }
    //                 changeRating(guiltPlayer, -0.2);
    //
    //                 matchLogs[i + 1].players.push({
    //                     playerName: guiltPlayer.playerName,
    //                     position: guiltPlayer.position,
    //                     role: 'guilt',
    //                     ratingDiff: -0.2,
    //                 });
    //                 //поиск виноватого игрока ================================================
    //
    //
    //                 for (let playerIndex = 0; playerIndex < anotherUser.players.length; playerIndex++) {
    //                     changeRating(anotherUser.players[playerIndex], -0.2);
    //                 } // -0.2 пропустившим гол игрокам
    //                 matchLogs[i + 1].players.push({
    //                     playerName: 'Another team players',
    //                     position: 'Another team positions',
    //                     role: 'none',
    //                     ratingDiff: -0.2,
    //                 });
    //             } else {
    //                 eventCode = 130;
    //
    //                 let anotherUser = event.user === 0 ? user2 : user1;
    //
    //                 actedPlayer = anotherUser.players[10];
    //                 changeRating(actedPlayer, 0.4);
    //
    //
    //                 matchLogs[i + 1].players = [
    //                     {
    //                         playerId: actedPlayer.playerId,
    //                         playerName: actedPlayer.playerName,
    //                         position: actedPlayer.position,
    //                         ratingDiff: 0.4,
    //                     }
    //                 ];
    //                 matchLogs[i + 1].result = `Shot on target`;
    //             }
    //
    //             matchLogs[i + 1].code = eventCode;
    //             break;
    //     }
    //
    //     matchLogs[i + 1].code = eventCode;
    //     matchLogs[i + 1].score = goals[0] + '-' + goals[1];
    // }


    // рассчёт рейтинга игроков за сезон (среднее арифм)===========================
    for (let playerIndex = 0; playerIndex < 11; playerIndex++) {
        let sumOfMarks = [0, 0];

        user1.players[playerIndex].seasonRatingMarks.push(user1.players[playerIndex].matchRating);

        for (let marksIndex = 0; marksIndex < user1.players[playerIndex].seasonRatingMarks.length; marksIndex++) {
            sumOfMarks[0] += user1.players[playerIndex].seasonRatingMarks[marksIndex];
        }

        user1.players[playerIndex].averageRating = Number((sumOfMarks[0] / user1.players[playerIndex].seasonRatingMarks.length).toFixed(2));


        user2.players[playerIndex].seasonRatingMarks.push(user2.players[playerIndex].matchRating);

        for (let marksIndex = 0; marksIndex < user2.players[playerIndex].seasonRatingMarks.length; marksIndex++) {
            sumOfMarks[1] += user2.players[playerIndex].seasonRatingMarks[marksIndex];
        }

        user2.players[playerIndex].averageRating = Number((sumOfMarks[1] / user2.players[playerIndex].seasonRatingMarks.length).toFixed(2));
    }


    function sortById(a, b) {
        if (a.playerId < b.playerId) return -1;
        if (a.playerId > b.playerId) return 1;
        return 0;
    }

    user1.players.sort(sortById);
    user1.resultLastTeam.sort(sortById);
    user1.resultAllPlayers.sort(sortById);

    user2.players.sort(sortById);
    user2.resultLastTeam.sort(sortById);
    user2.resultAllPlayers.sort(sortById);


    let allPlayersIndex = 0;
    for (let playerIndex = 0; playerIndex < 11; playerIndex++) {
        user1.resultLastTeam[playerIndex].seasonRatingMarks = user1.players[playerIndex].seasonRatingMarks;
        user1.resultLastTeam[playerIndex].averageRating = user1.players[playerIndex].averageRating;


        while (user1.players[playerIndex].playerId !== user1.resultAllPlayers[allPlayersIndex].playerId) allPlayersIndex++;

        user1.resultAllPlayers[allPlayersIndex].seasonRatingMarks = user1.players[playerIndex].seasonRatingMarks;
        user1.resultAllPlayers[allPlayersIndex].averageRating = user1.players[playerIndex].averageRating;
    }

    allPlayersIndex = 0;
    for (let playerIndex = 0; playerIndex < 11; playerIndex++) {
        user2.resultLastTeam[playerIndex].seasonRatingMarks = user2.players[playerIndex].seasonRatingMarks;
        user2.resultLastTeam[playerIndex].averageRating = user2.players[playerIndex].averageRating;


        while (user2.players[playerIndex].playerId !== user2.resultAllPlayers[allPlayersIndex].playerId) allPlayersIndex++;

        user2.resultAllPlayers[allPlayersIndex].seasonRatingMarks = user2.players[playerIndex].seasonRatingMarks;
        user2.resultAllPlayers[allPlayersIndex].averageRating = user2.players[playerIndex].averageRating;
    }
    // рассчёт рейтинга игроков за сезон (среднее арифм)===========================


    // изменение статуса unavailable для всех игроков юзеров===========================
    for (let plIdx = 0; plIdx < user1.resultAllPlayers; plIdx++) {
        let currPlayer = user1.resultAllPlayers[plIdx];
        if (currPlayer.unavailableMatchesCount > 0) currPlayer.unavailableMatchesCount--;
    }

    for (let plIdx = 0; plIdx < user2.resultAllPlayers; plIdx++) {
        let currPlayer = user2.resultAllPlayers[plIdx];
        if (currPlayer.unavailableMatchesCount > 0) currPlayer.unavailableMatchesCount--;
    }
    // изменение статуса unavailable для всех игроков юзеров===========================


    let resultLogs = {
        user1: {
            id: user1.id,
            players: user1.players.map(player => {
                return {
                    playerId: player.playerId,
                    playerName: player.playerName,
                    head: player.head,
                    body: player.body,
                    clothing: player.clothing,
                    hair: player.hair,
                };
            })
        },
        user2: {
            id: user2.id,
            players: user2.players.map(player => {
                return {
                    playerId: player.playerId,
                    playerName: player.playerName,
                    head: player.head,
                    body: player.body,
                    clothing: player.clothing,
                    hair: player.hair,
                };
            })
        },
        matchEvents: matchLogs
    };


    //debug===========================================================================
    debugLogs.logs = resultLogs; //d
    debugLogs.score = goals[0] + '-' + goals[1]; //d
    debugLogs.user1.totalEvents = eventsArrs[0].join(' '); //d
    debugLogs.user2.totalEvents = eventsArrs[1].join(' '); //d

    let logsText = '';

    logsText += 'Звёзды игроков:\n=============================\n';

    logsText += 'Игрок 1:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${debugLogs.user1.playersAsm[i].playerName}: ${debugLogs.user1.playersAsm[i].asm}\n`;
    }
    logsText += '=================\n';

    logsText += 'Игрок 2:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${debugLogs.user2.playersAsm[i].playerName}: ${debugLogs.user2.playersAsm[i].asm}\n`;
    }
    logsText += '=================\n';

    logsText += '\n\nРейтинг карточек перед матчем:\n=============================\n';

    logsText += 'Игрок 1:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${user1.players[i].playerName}: 6.6\n`;
    }
    logsText += '=================\n';

    logsText += 'Игрок 2:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${user2.players[i].playerName}: 6.6\n`;
    }
    logsText += '=================\n';


    logsText += '\n\nЛоги матча:\n=============================\n';
    for (let i = 1; i < matchLogs.length; i++) {
        let playersRatingString = '';

        for (let j = 0; j < matchLogs[i].players.length; j++) {
            playersRatingString += `${matchLogs[i].players[j].playerName} (${matchLogs[i].players[j].ratingDiff}), `;
        }

        playersRatingString = playersRatingString.substring(0, playersRatingString.length - 2);

        logsText += `${matchLogs[i].minute} минута, игрок ${matchLogs[i].user + 1}, событие ${matchLogs[i].momentType}.\nРезультат: ${matchLogs[i].result}.\nИзменение рейтинга: ${playersRatingString}.\n====================================\n`;
    }


    logsText += `\n\nСчёт: ${goals[0]}-${goals[1]}\n`;


    let yellowCards = [[], []];
    for (let i = 1; i < matchLogs.length; i++) {
        let event = matchLogs[i];
        if (event.momentType === 11 && event.result.endsWith('card')) yellowCards[event.user].push({
            actedPlayer: event.players[0].playerName,
            injuredPlayer: event.players[1].playerName,
        });
    }

    logsText += `\n\nЖёлтые карточки:\n\n`;

    logsText += `Игрок 1:\n===============\n`;
    for (let i = 0; i < yellowCards[0].length; i++) {
        logsText += `Injured: ${yellowCards[0][i].injuredPlayer}, Acted: ${yellowCards[0][i].actedPlayer}\n`;
    }
    logsText += `===============\n`;

    logsText += `\nИгрок 2:\n===============\n`;
    for (let i = 0; i < yellowCards[1].length; i++) {
        logsText += `Injured: ${yellowCards[1][i].injuredPlayer}, Acted: ${yellowCards[1][i].actedPlayer}\n`;
    }
    logsText += `===============\n`;


    logsText += '\n\nРейтинг карточек после матча:\n=============================\n';

    logsText += 'Игрок 1:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${user1.players[i].playerName}: ${user1.players[i].matchRating}\n`;
    }
    logsText += '=================\n';

    logsText += 'Игрок 2:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${user2.players[i].playerName}: ${user2.players[i].matchRating}\n`;
    }
    logsText += '=================\n';

    debugLogs.logsText = logsText;
    //debug===========================================================================

    if (saveToDB) {
        let
            user1UpdateLastTeamQuery = prisma.user.update({
                where: {
                    id: user1.id,
                },
                data: {
                    lastTeam: JSON.stringify(user1.resultLastTeam)
                }
            }),
            user1UpdateAllPlayersQuery = prisma.user_players.update({
                where: {
                    userId: user1.id,
                },
                data: {
                    playersJson: JSON.stringify(user1.resultAllPlayers)
                }
            }),
            user2UpdateLastTeamQuery = prisma.user.update({
                where: {
                    id: user2.id,
                },
                data: {
                    lastTeam: JSON.stringify(user2.resultLastTeam)
                }
            }),
            user2UpdateAllPlayersQuery = prisma.user_players.update({
                where: {
                    userId: user2.id,
                },
                data: {
                    playersJson: JSON.stringify(user2.resultAllPlayers)
                }
            }),
            matchUpdateQuery = prisma.match.update({
                where: {
                    id: match.id
                },
                data: {
                    logs: JSON.stringify(resultLogs),
                    score: goals[0] + ':' + goals[1],
                }
            });

        await prisma.$transaction([user1UpdateLastTeamQuery, user1UpdateAllPlayersQuery, user2UpdateLastTeamQuery, user2UpdateAllPlayersQuery, matchUpdateQuery]);
    }

    return debugLogs;
}

async function playDebugMatch_v6(matchId, saveToDB) {
    const match = await prisma.match.findFirst({
        select: {
            id: true,
            player1: {
                select: {
                    id: true,
                    avatar: true,
                    lastTactic: true,
                    lastTeam: true,
                    players: {
                        select: {
                            playersJson: true
                        }
                    },
                },
            },
            player2: {
                select: {
                    id: true,
                    avatar: true,
                    lastTactic: true,
                    lastTeam: true,
                    players: {
                        select: {
                            playersJson: true
                        }
                    },
                }
            },
        },
        where: {
            id: matchId
        },
    });

    let
        matchLogs = [],
        user1 = {
            id: match.player1.id,
            avatar: match.player1.avatar,
            tactic: JSON.parse(match.player1.lastTactic),
            players: JSON.parse(match.player1.lastTeam).map(player => {
                return {
                    playerId: player.playerId,
                    playerName: player.playerName,
                    head: player.head,
                    body: player.body,
                    clothing: player.clothing,
                    hair: player.hair,
                    physicalSkills: player.physicalSkills,
                    technicalSkills: player.technicalSkills,
                    mood: player.mood,
                    position: player.position,
                    isGoalKeeper: player.isGoalKeeper,
                    seasonRatingMarks: player.seasonRatingMarks,
                    averageRating: player.averageRating,
                    matchRating: 6.6,
                }
            }),
            resultLastTeam: JSON.parse(match.player1.lastTeam),
            resultAllPlayers: JSON.parse(match.player1.players.playersJson),
        },
        user2 = {
            id: match.player2.id,
            avatar: match.player2.avatar,
            tactic: JSON.parse(match.player2.lastTactic),
            players: JSON.parse(match.player2.lastTeam).map(player => {
                return {
                    playerId: player.playerId,
                    playerName: player.playerName,
                    head: player.head,
                    body: player.body,
                    clothing: player.clothing,
                    hair: player.hair,
                    physicalSkills: player.physicalSkills,
                    technicalSkills: player.technicalSkills,
                    mood: player.mood,
                    position: player.position,
                    isGoalKeeper: player.isGoalKeeper,
                    seasonRatingMarks: player.seasonRatingMarks,
                    averageRating: player.averageRating,
                    matchRating: 6.6,
                }
            }),
            resultLastTeam: JSON.parse(match.player2.lastTeam),
            resultAllPlayers: JSON.parse(match.player2.players.playersJson),
        },
        playersOnPositions = [
            {
                'FW': [],
                'WG': [],
                'CM': [],
                'WB': [],
                'CD': [],
                'GK': [],
            },
            {
                'FW': [],
                'WG': [],
                'CM': [],
                'WB': [],
                'CD': [],
                'GK': [],
            }
        ],
        playersWithSkills = [
            {
                AGIp: [],
                TCKLp: [],
                PASp: [],
                STAz: [],
                STAm: [],
                AGIm: [],
            },
            {
                AGIp: [],
                TCKLp: [],
                PASp: [],
                STAz: [],
                STAm: [],
                AGIm: [],
            },
        ],
        T = [0, 0],
        goals = [0, 0],
        eventsArrs = [[], []], //d
        debugLogs = {
            matchId: match.id,
            score: null,
            user1: {
                id: user1.id,
                players: user1.players,
                playersAsm: [],
                homeBonus: 3,
                avatarBonus: 0,
                T: 0,
            },
            user2: {
                id: user2.id,
                players: user2.players,
                playersAsm: [],
                homeBonus: 0,
                avatarBonus: 0,
                T: 0,
            },
        }; //d


    user1.players.forEach((player) => {
        //распределение в массивах игроков на позициях
        playersOnPositions[0][player.position].push(player);

        switch (player.position) {
            case 'FW':
                player.technicalSkills.shoot *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.agility *= 3;
                player.physicalSkills.jump *= 3;
                break;

            case 'WG':
                player.technicalSkills.cross *= 3;
                player.technicalSkills.shoot *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.agility *= 3;
                break;

            case 'CM':
                player.technicalSkills.pass *= 3;
                player.physicalSkills.agility *= 3;
                player.physicalSkills.strength *= 3;
                break;

            case 'CD':
                player.technicalSkills.tackling *= 3;
                player.physicalSkills.strength *= 3;
                player.physicalSkills.jump *= 3;
                break;

            case 'WB':
                player.technicalSkills.cross *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.jump *= 3;
                break;
        }

        if (player.physicalSkills.agility === 3) playersWithSkills[0].AGIp.push(player);
        else if (player.physicalSkills.agility === -3) playersWithSkills[0].AGIm.push(player);

        if (player.technicalSkills.tackling === 3) playersWithSkills[0].TCKLp.push(player);

        if (player.technicalSkills.pass === 3) playersWithSkills[0].PASp.push(player);

        if (player.physicalSkills.stamina === -3) playersWithSkills[0].STAm.push(player);
        else if (player.physicalSkills.stamina === 0) playersWithSkills[0].STAz.push(player);


        //получение asm игрока
        let phy = 0, te = 0, asm;

        for (let skill in player.physicalSkills) {
            phy += player.physicalSkills[skill];
        }
        for (let skill in player.technicalSkills) {
            te += player.technicalSkills[skill];
        }

        phy = Math.min(Math.max(1, phy), 5);
        te = Math.min(Math.max(1, te), 5);

        asm = ((phy + te) / 2) + (player.mood / 2);
        asm = Math.min(Math.max(1, asm), 5);

        if (asm % 1 !== 0) {
            asm += 0.5 * (player.mood < 0 ? -1 : 1);
        }

        T[0] += asm;

        debugLogs.user1.playersAsm.push({
            playerId: player.playerId,
            playerName: player.playerName,
            asm,
        }); //d
    });
    user2.players.forEach((player) => {
        //распределение в массивах игроков на позициях
        playersOnPositions[1][player.position].push(player);

        switch (player.position) {
            case 'FW':
                player.technicalSkills.shoot *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.agility *= 3;
                player.physicalSkills.jump *= 3;
                break;

            case 'WG':
                player.technicalSkills.cross *= 3;
                player.technicalSkills.shoot *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.agility *= 3;
                break;

            case 'CM':
                player.technicalSkills.pass *= 3;
                player.physicalSkills.agility *= 3;
                player.physicalSkills.strength *= 3;
                break;

            case 'CD':
                player.technicalSkills.tackling *= 3;
                player.physicalSkills.strength *= 3;
                player.physicalSkills.jump *= 3;
                break;

            case 'WB':
                player.technicalSkills.cross *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.jump *= 3;
                break;
        }

        if (player.physicalSkills.agility === 3) playersWithSkills[1].AGIp.push(player);
        else if (player.physicalSkills.agility === -3) playersWithSkills[1].AGIm.push(player);

        if (player.technicalSkills.tackling === 3) playersWithSkills[1].TCKLp.push(player);

        if (player.technicalSkills.pass === 3) playersWithSkills[1].PASp.push(player);

        if (player.physicalSkills.stamina === -3) playersWithSkills[1].STAm.push(player);
        else if (player.physicalSkills.stamina === 0) playersWithSkills[1].STAz.push(player);


        //получение asm игрока
        let phy = 0, te = 0, asm;

        for (let skill in player.physicalSkills) {
            phy += player.physicalSkills[skill];
        }
        for (let skill in player.technicalSkills) {
            te += player.technicalSkills[skill];
        }

        phy = Math.min(Math.max(1, phy), 5);
        te = Math.min(Math.max(1, te), 5);

        asm = ((phy + te) / 2) + (player.mood / 2);
        asm = Math.min(Math.max(1, asm), 5);

        if (asm % 1 !== 0) {
            asm += 0.5 * (player.mood < 0 ? -1 : 1);
        }

        T[1] += asm;


        debugLogs.user2.playersAsm.push({
            playerId: player.playerId,
            playerName: player.playerName,
            asm,
        }); //d
    });


    function sortPlayers(a, b) {
        if (a.isGoalKeeper) return 1;
        if (b.isGoalKeeper) return -1;

        if (a.averageRating < b.averageRating) return -1;
        if (a.averageRating > b.averageRating) return 1;

        return 0;
    }

    user1.players.sort(sortPlayers);
    user2.players.sort(sortPlayers); // сортировка игроков по возрастанию рейтинга (GK всегда последние)


    T[0] += 3; //доп очки за домашнюю тиму
    if (user1.avatar !== user2.avatar) {
        if (avatarDefying[user1.avatar].includes(user2.avatar)) {
            T[0] += 3;

            debugLogs.user1.avatarBonus = 3;//debug
        }
        else if (avatarDefying[user2.avatar].includes(user1.avatar)) {
            T[1] += 3;

            debugLogs.user2.avatarBonus = 3;//debug
        }
    } // доп очки за контр тренеров

    debugLogs.user1.T = T[0]; //d
    debugLogs.user2.T = T[1]; //d


    let advantage = Math.abs(T[0] - T[1]);
    if (advantage <= 5) {
        if (T[0] > T[1]) {
            T[1] = T[0];
        }
        else {
            T[0] = T[1];
        }
    }
    else if (advantage <= 8) {
        if (T[0] > T[1]) {
            T[0] += 3;
        }
        else {
            T[1] += 3;
        }
    }
    else {
        if (T[0] > T[1]) {
            T[0] += advantage;
        }
        else {
            T[1] += advantage;
        }
    }

    debugLogs.user1.T_adv = T[0]; //d
    debugLogs.user2.T_adv = T[1]; //d


    function changeRating(player, ratingDiff) {
        player.matchRating = Number((player.matchRating + ratingDiff).toFixed(2));
    }

    let xG = [0, 0], momentsCount = [0, 0], xG1 = [0, 0], xG2 = [0, 0], lastPotGoalMinute = null;


    matchLogs.push({
        minute: 0,
        user: null,
        momentType: null,
        result: 'Match started!'
    });


    //первый тайм ===================================================================
    momentsCount[0] = Math.round(T[0] / ((T[0] + T[1]) / 15));
    momentsCount[1] = 15 - momentsCount[0];

    for (let i = 3; i <= 45; i += 3) {
        let player = MathService.randomFloat(0, T[0] + T[1]) <= T[0] ? 0 : 1,
            randNum = MathService.randomInteger(1, 10),
            momentType = randNum >= 1 && randNum <= 2 ? 13 : randNum >= 3 && randNum <= 6 ? 12 : 11,
            momentWeight = 0.5 * (momentType - 9);

        if (momentsCount[player] === 0) player = (player + 1) % 2;
        momentsCount[player]--;


        T[player] += momentWeight; // чтобы получить вес 1/1.5/2 (11 -9. 12 - 9, 13 - 9)
        xG[player] += momentWeight;
        xG1[player] += momentWeight;


        matchLogs.push({
            minute: i,
            user: player,
            momentType,
            result: ''
        });
        eventsArrs[player].push(momentType); //d
    }

    xG[0] /= 10;
    xG[1] /= 10;
    xG1[0] /= 10;
    xG1[1] /= 10;
    //первый тайм ===================================================================


    eventsArrs[0].push("==="); //d
    eventsArrs[1].push("==="); //d


    //второй тайм ===================================================================
    momentsCount[0] = Math.round(T[0] / ((T[0] + T[1]) / 15));
    momentsCount[1] = 15 - momentsCount[0];

    for (let i = 48; i <= 90; i += 3) {
        let player = MathService.randomFloat(0, T[0] + T[1]) <= T[0] ? 0 : 1,
            randNum = MathService.randomInteger(1, 10),
            momentType = randNum >= 1 && randNum <= 2 ? 13 : randNum >= 3 && randNum <= 6 ? 12 : 11,
            momentWeight = 0.5 * (momentType - 9);

        if (momentsCount[player] === 0) player = (player + 1) % 2;
        momentsCount[player]--;


        T[player] += momentWeight; // чтобы получить вес 1/1.5/2 (11 -9. 12 - 9, 13 - 9)
        xG[player] += momentWeight;
        xG2[player] += momentWeight;


        matchLogs.push({
            minute: i,
            user: player,
            momentType,
            result: ''
        });
        eventsArrs[player].push(momentType); //d
    }

    xG[0] /= 10;
    xG[1] /= 10;
    xG2[0] /= 10;
    xG2[1] /= 10;
    //второй тайм ===================================================================

    for (let i = matchLogs.length - 1; i > 0; i--) {
        if (matchLogs[i].momentType === 13) {
            lastPotGoalMinute = matchLogs[i].minute;
            break;
        }
    }


    let playersWithYellowCards = [[], []];

    xG[0] = xG1[0];
    xG[1] = xG1[1];

    for (let i = 0; i < 15; i++) {
        let event = matchLogs[i + 1];

        let eventCode,
            eventedUser, scoredUser, anotherUser,
            AGIpLength, TCKLpLength, PASpLength, AGImLength, STAmLength, STAzLength, // для удобства
            actedPlayer, possibleActedPlayers, injuredPlayer;

        switch (event.momentType) {
            case 11:
                eventedUser = event.user === 0 ? user1 : user2;

                eventCode = MathService.randomInteger(111, 115);

                switch (eventCode) {
                    case 111:
                        matchLogs[i + 1].players = [];

                        STAmLength = playersWithSkills[event.user].STAm.length;
                        STAzLength = playersWithSkills[event.user].STAz.length;

                        if (STAmLength) injuredPlayer = playersWithSkills[event.user].STAm[MathService.randomInteger(0, STAmLength - 1)];
                        else if (STAzLength) injuredPlayer = playersWithSkills[event.user].STAz[MathService.randomInteger(0, STAzLength - 1)];
                        else injuredPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(injuredPlayer, -0.2);

                        let anotherUser = eventedUser === user1 ? user2 : user1;
                        actedPlayer = anotherUser.players[MathService.randomInteger(0, 9)];
                        while (playersWithYellowCards[(event.user + 1) % 2].includes(actedPlayer.playerId)) actedPlayer = anotherUser.players[MathService.randomInteger(0, 9)];
                        changeRating(actedPlayer, -0.4);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.4,
                        });
                        matchLogs[i + 1].players.push({
                            playerId: injuredPlayer.playerId,
                            playerName: injuredPlayer.playerName,
                            position: injuredPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `${injuredPlayer.playerName} is injured - ${actedPlayer.playerName} will be punished by a yellow card`;

                        playersWithYellowCards[(event.user + 1) % 2].push(actedPlayer.playerId);
                        break;

                    case 112:
                        matchLogs[i + 1].players = [];

                        AGImLength = playersWithSkills[event.user].AGIm.length;

                        if (AGImLength) actedPlayer = playersWithSkills[event.user].AGIm[MathService.randomInteger(0, AGImLength - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `Unlucky dribbling - ${actedPlayer.playerName}`;
                        break;

                    case 113:
                        matchLogs[i + 1].players = [];

                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];

                        actedPlayer = possibleActedPlayers[MathService.randomInteger(0, possibleActedPlayers.length - 1)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `Unlucky cross - ${actedPlayer.playerName}`;
                        break;

                    case 114:
                        matchLogs[i + 1].players = [];
                        matchLogs[i + 1].result = `Slow passing in the midfield`;
                        break;

                    case 115:
                        matchLogs[i + 1].players = [];

                        actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `${actedPlayer.playerName} made a mistake`;
                        break;
                }
                break;

            case 12:
                eventedUser = event.user === 0 ? user1 : user2;

                eventCode = MathService.randomInteger(121, 125);

                switch (eventCode) {
                    case 121:
                        matchLogs[i + 1].players = [];

                        actedPlayer = eventedUser.players[MathService.randomInteger(0, 9)];

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0,
                        });

                        matchLogs[i + 1].result = `Shot off target`;
                        break;

                    case 122:
                        AGIpLength = playersWithSkills[event.user].AGIp.length;

                        if (AGIpLength) actedPlayer = playersWithSkills[event.user].AGIp[MathService.randomInteger(0, AGIpLength - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(5, 9)];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.playerId,
                                playerName: actedPlayer.playerName,
                                position: actedPlayer.position,
                                ratingDiff: 0.2,
                            }
                        ];

                        matchLogs[i + 1].result = `Successful dribbling by ${actedPlayer.playerName}`;
                        break;

                    case 123:
                        matchLogs[i + 1].players = [];

                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];
                        possibleActedPlayers.sort(function (a, b) {
                            return a - b;
                        });

                        actedPlayer = possibleActedPlayers[possibleActedPlayers.length - 1];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.2,
                        });

                        matchLogs[i + 1].result = `Promising cross by ${actedPlayer.playerName}`;
                        break;

                    case 124:
                        matchLogs[i + 1].players = [];

                        TCKLpLength = playersWithSkills[event.user].TCKLp.length;

                        if (TCKLpLength) actedPlayer = playersWithSkills[event.user].TCKLp[MathService.randomInteger(0, TCKLpLength - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(5, 9)];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.2,
                        });

                        matchLogs[i + 1].result = `Interception by ${actedPlayer.playerName}`;
                        break;

                    case 125:
                        matchLogs[i + 1].players = [];

                        PASpLength = playersWithSkills[event.user].PASp.length;

                        if (PASpLength) actedPlayer = playersWithSkills[event.user].PASp[MathService.randomInteger(0, PASpLength - 1)];
                        else {
                            playersOnPositions[event.user].CM.sort(function (a, b) {
                                return a - b;
                            })
                            actedPlayer = playersOnPositions[event.user].CM[playersOnPositions[event.user].CM.length - 1];
                        }
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.2,
                        });

                        matchLogs[i + 1].result = `Promising through pass by ${actedPlayer.playerName}`;
                        break;
                }
                break;

            case 13:
                let chanceNumbers = Math.floor(xG[event.user] / 0.25);

                if (event.minute === lastPotGoalMinute && goals[0] === goals[1]) chanceNumbers++;

                let goal = MathService.randomInteger(1, 10) <= chanceNumbers ? 1 : 0;

                if (goal) {
                    let scoredPosition, scoredIndex, scoredPlayer, assistantPosition, assistantIndex, assistantPlayer;

                    scoredUser = event.user === 0 ? user1 : user2;
                    anotherUser = event.user === 0 ? user2 : user1;

                    goals[event.user]++;
                    xG[event.user] = Math.max(0, xG[event.user] - 1); //чтобы xG игрока не был меньше 0

                    switch (scoredUser.tactic.teamFocus) {
                        case 'wing-play':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                eventCode = 131;

                                scoredPlayer = playersOnPositions[event.user].FW[0];
                                changeRating(scoredPlayer, 0.8);

                                assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                changeRating(assistantPlayer, 0.8);

                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }


                                matchLogs[i + 1].players = [
                                    {
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerId: assistantPlayer.playerId,
                                        playerName: assistantPlayer.playerName,
                                        position: assistantPlayer.position,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    },
                                ];
                                matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                            }
                            else {
                                eventCode = MathService.randomInteger(131, 136);

                                switch (eventCode) {
                                    case 131:
                                        scoredPlayer = playersOnPositions[event.user].FW[0];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                        assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                        assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.playerId,
                                                playerName: scoredPlayer.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.playerId,
                                                playerName: assistantPlayer.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                                        break;

                                    case 132:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.4);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.4,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`
                                        break;

                                    case 133:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`
                                        break;

                                    case 134:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerId: assistantPlayer.playerId,
                                            playerName: assistantPlayer.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                                        break;

                                    case 135:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`
                                        break;

                                    case 136:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.5,
                                        });

                                        matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`
                                        break;
                                }
                            }
                            break;

                        case 'midfield':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                eventCode = 134;
                                matchLogs[i + 1].players = [];

                                scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                changeRating(scoredPlayer, 0.8);

                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                changeRating(assistantPlayer, 0.8);

                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }

                                matchLogs[i + 1].players.push({
                                    playerId: scoredPlayer.playerId,
                                    playerName: scoredPlayer.playerName,
                                    position: scoredPlayer.position,
                                    role: 'player',
                                    ratingDiff: 0.8,
                                });
                                matchLogs[i + 1].players.push({
                                    playerId: assistantPlayer.playerId,
                                    position: assistantPlayer.position,
                                    role: 'assistant',
                                    ratingDiff: 0.8,
                                });
                                matchLogs[i + 1].players.push({
                                    playerName: 'Scored team players',
                                    position: 'Scored team positions',
                                    role: 'none',
                                    ratingDiff: 0.2,
                                });

                                matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                            }
                            else {
                                eventCode = MathService.randomInteger(131, 136);

                                switch (eventCode) {
                                    case 131:
                                        scoredPlayer = playersOnPositions[event.user].FW[0];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                        assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                        assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.playerId,
                                                playerName: scoredPlayer.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.playerId,
                                                playerName: assistantPlayer.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                                        break;

                                    case 132:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.4);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.4,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`
                                        break;

                                    case 133:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`
                                        break;

                                    case 134:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerId: assistantPlayer.playerId,
                                            playerName: assistantPlayer.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                                        break;

                                    case 135:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`
                                        break;

                                    case 136:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.5,
                                        });

                                        matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`
                                        break;
                                }
                            }
                            break;

                        case 'stepUp':
                            eventCode = MathService.randomInteger(131, 136);

                            switch (eventCode) {
                                case 131:
                                    scoredPlayer = playersOnPositions[event.user].FW[0];
                                    changeRating(scoredPlayer, 0.8);

                                    assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                    assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                    assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                    changeRating(assistantPlayer, 0.8);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerId: assistantPlayer.playerId,
                                            playerName: assistantPlayer.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        },
                                    ];
                                    matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                                    break;

                                case 132:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 0.4);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.4,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`
                                    break;

                                case 133:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 1);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 1,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`
                                    break;

                                case 134:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 0.8);

                                    assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                    changeRating(assistantPlayer, 0.8);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerId: assistantPlayer.playerId,
                                        playerName: assistantPlayer.playerName,
                                        position: assistantPlayer.position,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                                    break;

                                case 135:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 1);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 1,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`
                                    break;

                                case 136:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 0.8);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.5,
                                    });

                                    matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`
                                    break;
                            }
                            break;
                    }


                    //поиск виноватого игрока ================================================
                    let value = Math.random(),
                        anotherUserIdx = (event.user + 1) % 2,
                        guiltPlayer;

                    if (value <= 0.15) guiltPlayer = playersOnPositions[anotherUserIdx].GK[0];
                    else if (value <= 0.30) {
                        let possibleGuiltPlayers = [...playersOnPositions[anotherUserIdx].FW, ...playersOnPositions[anotherUserIdx].WG];
                        guiltPlayer = possibleGuiltPlayers[MathService.randomInteger(0, possibleGuiltPlayers.length - 1)];
                    }
                    else if (value <= 0.60) guiltPlayer = playersOnPositions[anotherUserIdx].CM[MathService.randomInteger(0, playersOnPositions[anotherUserIdx].CM.length - 1)];
                    else {
                        let possibleGuiltPlayers = [...playersOnPositions[anotherUserIdx].CD, ...playersOnPositions[anotherUserIdx].WB];
                        guiltPlayer = possibleGuiltPlayers[MathService.randomInteger(0, possibleGuiltPlayers.length - 1)];
                    }
                    changeRating(guiltPlayer, -0.2);

                    matchLogs[i + 1].players.push({
                        playerName: guiltPlayer.playerName,
                        position: guiltPlayer.position,
                        role: 'guilt',
                        ratingDiff: -0.2,
                    });
                    //поиск виноватого игрока ================================================


                    for (let playerIndex = 0; playerIndex < anotherUser.players.length; playerIndex++) {
                        changeRating(anotherUser.players[playerIndex], -0.2);
                    } // -0.2 пропустившим гол игрокам
                    matchLogs[i + 1].players.push({
                        playerName: 'Another team players',
                        position: 'Another team positions',
                        role: 'none',
                        ratingDiff: -0.2,
                    });
                }
                else {
                    eventCode = 130;

                    let anotherUser = event.user === 0 ? user2 : user1;

                    actedPlayer = anotherUser.players[10];
                    changeRating(actedPlayer, 0.4);


                    matchLogs[i + 1].players = [
                        {
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.4,
                        }
                    ];
                    matchLogs[i + 1].result = `Shot on target`;
                }

                matchLogs[i + 1].code = eventCode;
                break;
        }

        matchLogs[i + 1].code = eventCode;
        matchLogs[i + 1].score = goals[0] + '-' + goals[1];
    }

    xG[0] += xG2[0];
    xG[1] += xG2[1];

    for (let i = 15; i < 30; i++) {
        let event = matchLogs[i + 1];

        let eventCode,
            eventedUser, scoredUser, anotherUser,
            AGIpLength, TCKLpLength, PASpLength, AGImLength, STAmLength, STAzLength, // для удобства
            actedPlayer, possibleActedPlayers, injuredPlayer;

        switch (event.momentType) {
            case 11:
                eventedUser = event.user === 0 ? user1 : user2;

                eventCode = MathService.randomInteger(111, 115);

                switch (eventCode) {
                    case 111:
                        matchLogs[i + 1].players = [];

                        STAmLength = playersWithSkills[event.user].STAm.length;
                        STAzLength = playersWithSkills[event.user].STAz.length;

                        if (STAmLength) injuredPlayer = playersWithSkills[event.user].STAm[MathService.randomInteger(0, STAmLength - 1)];
                        else if (STAzLength) injuredPlayer = playersWithSkills[event.user].STAz[MathService.randomInteger(0, STAzLength - 1)];
                        else injuredPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(injuredPlayer, -0.2);

                        let anotherUser = eventedUser === user1 ? user2 : user1;
                        actedPlayer = anotherUser.players[MathService.randomInteger(0, 9)];
                        while (playersWithYellowCards[(event.user + 1) % 2].includes(actedPlayer.playerId)) actedPlayer = anotherUser.players[MathService.randomInteger(0, 9)];
                        changeRating(actedPlayer, -0.4);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.4,
                        });
                        matchLogs[i + 1].players.push({
                            playerId: injuredPlayer.playerId,
                            playerName: injuredPlayer.playerName,
                            position: injuredPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `${injuredPlayer.playerName} is injured - ${actedPlayer.playerName} will be punished by a yellow card`;

                        playersWithYellowCards[(event.user + 1) % 2].push(actedPlayer.playerId);
                        break;

                    case 112:
                        matchLogs[i + 1].players = [];

                        AGImLength = playersWithSkills[event.user].AGIm.length;

                        if (AGImLength) actedPlayer = playersWithSkills[event.user].AGIm[MathService.randomInteger(0, AGImLength - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `Unlucky dribbling - ${actedPlayer.playerName}`;
                        break;

                    case 113:
                        matchLogs[i + 1].players = [];

                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];

                        actedPlayer = possibleActedPlayers[MathService.randomInteger(0, possibleActedPlayers.length - 1)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `Unlucky cross - ${actedPlayer.playerName}`;
                        break;

                    case 114:
                        matchLogs[i + 1].players = [];
                        matchLogs[i + 1].result = `Slow passing in the midfield`;
                        break;

                    case 115:
                        matchLogs[i + 1].players = [];

                        actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `${actedPlayer.playerName} made a mistake`;
                        break;
                }
                break;

            case 12:
                eventedUser = event.user === 0 ? user1 : user2;

                eventCode = MathService.randomInteger(121, 125);

                switch (eventCode) {
                    case 121:
                        matchLogs[i + 1].players = [];

                        actedPlayer = eventedUser.players[MathService.randomInteger(0, 9)];

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0,
                        });

                        matchLogs[i + 1].result = `Shot off target`;
                        break;

                    case 122:
                        AGIpLength = playersWithSkills[event.user].AGIp.length;

                        if (AGIpLength) actedPlayer = playersWithSkills[event.user].AGIp[MathService.randomInteger(0, AGIpLength - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(5, 9)];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.playerId,
                                playerName: actedPlayer.playerName,
                                position: actedPlayer.position,
                                ratingDiff: 0.2,
                            }
                        ];

                        matchLogs[i + 1].result = `Successful dribbling by ${actedPlayer.playerName}`;
                        break;

                    case 123:
                        matchLogs[i + 1].players = [];

                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];
                        possibleActedPlayers.sort(function (a, b) {
                            return a - b;
                        });

                        actedPlayer = possibleActedPlayers[possibleActedPlayers.length - 1];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.2,
                        });

                        matchLogs[i + 1].result = `Promising cross by ${actedPlayer.playerName}`;
                        break;

                    case 124:
                        matchLogs[i + 1].players = [];

                        TCKLpLength = playersWithSkills[event.user].TCKLp.length;

                        if (TCKLpLength) actedPlayer = playersWithSkills[event.user].TCKLp[MathService.randomInteger(0, TCKLpLength - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(5, 9)];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.2,
                        });

                        matchLogs[i + 1].result = `Interception by ${actedPlayer.playerName}`;
                        break;

                    case 125:
                        matchLogs[i + 1].players = [];

                        PASpLength = playersWithSkills[event.user].PASp.length;

                        if (PASpLength) actedPlayer = playersWithSkills[event.user].PASp[MathService.randomInteger(0, PASpLength - 1)];
                        else {
                            playersOnPositions[event.user].CM.sort(function (a, b) {
                                return a - b;
                            })
                            actedPlayer = playersOnPositions[event.user].CM[playersOnPositions[event.user].CM.length - 1];
                        }
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.2,
                        });

                        matchLogs[i + 1].result = `Promising through pass by ${actedPlayer.playerName}`;
                        break;
                }
                break;

            case 13:
                let chanceNumbers = Math.floor(xG[event.user] / 0.25);

                if (event.minute === lastPotGoalMinute && goals[0] === goals[1]) chanceNumbers++;

                let goal = MathService.randomInteger(1, 10) <= chanceNumbers ? 1 : 0;

                if (goal) {
                    let scoredPosition, scoredIndex, scoredPlayer, assistantPosition, assistantIndex, assistantPlayer;

                    scoredUser = event.user === 0 ? user1 : user2;
                    anotherUser = event.user === 0 ? user2 : user1;

                    goals[event.user]++;
                    xG[event.user] = Math.max(0, xG[event.user] - 1); //чтобы xG игрока не был меньше 0

                    switch (scoredUser.tactic.teamFocus) {
                        case 'wing-play':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                eventCode = 131;

                                scoredPlayer = playersOnPositions[event.user].FW[0];
                                changeRating(scoredPlayer, 0.8);

                                assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                changeRating(assistantPlayer, 0.8);

                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }


                                matchLogs[i + 1].players = [
                                    {
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerId: assistantPlayer.playerId,
                                        playerName: assistantPlayer.playerName,
                                        position: assistantPlayer.position,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    },
                                ];
                                matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                            }
                            else {
                                eventCode = MathService.randomInteger(131, 136);

                                switch (eventCode) {
                                    case 131:
                                        scoredPlayer = playersOnPositions[event.user].FW[0];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                        assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                        assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.playerId,
                                                playerName: scoredPlayer.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.playerId,
                                                playerName: assistantPlayer.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                                        break;

                                    case 132:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.4);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.4,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`
                                        break;

                                    case 133:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`
                                        break;

                                    case 134:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerId: assistantPlayer.playerId,
                                            playerName: assistantPlayer.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                                        break;

                                    case 135:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`
                                        break;

                                    case 136:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.5,
                                        });

                                        matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`
                                        break;
                                }
                            }
                            break;

                        case 'midfield':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                eventCode = 134;
                                matchLogs[i + 1].players = [];

                                scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                changeRating(scoredPlayer, 0.8);

                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                changeRating(assistantPlayer, 0.8);

                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }

                                matchLogs[i + 1].players.push({
                                    playerId: scoredPlayer.playerId,
                                    playerName: scoredPlayer.playerName,
                                    position: scoredPlayer.position,
                                    role: 'player',
                                    ratingDiff: 0.8,
                                });
                                matchLogs[i + 1].players.push({
                                    playerId: assistantPlayer.playerId,
                                    position: assistantPlayer.position,
                                    role: 'assistant',
                                    ratingDiff: 0.8,
                                });
                                matchLogs[i + 1].players.push({
                                    playerName: 'Scored team players',
                                    position: 'Scored team positions',
                                    role: 'none',
                                    ratingDiff: 0.2,
                                });

                                matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                            }
                            else {
                                eventCode = MathService.randomInteger(131, 136);

                                switch (eventCode) {
                                    case 131:
                                        scoredPlayer = playersOnPositions[event.user].FW[0];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                        assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                        assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.playerId,
                                                playerName: scoredPlayer.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.playerId,
                                                playerName: assistantPlayer.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                                        break;

                                    case 132:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.4);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.4,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`
                                        break;

                                    case 133:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`
                                        break;

                                    case 134:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerId: assistantPlayer.playerId,
                                            playerName: assistantPlayer.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                                        break;

                                    case 135:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`
                                        break;

                                    case 136:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.5,
                                        });

                                        matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`
                                        break;
                                }
                            }
                            break;

                        case 'stepUp':
                            eventCode = MathService.randomInteger(131, 136);

                            switch (eventCode) {
                                case 131:
                                    scoredPlayer = playersOnPositions[event.user].FW[0];
                                    changeRating(scoredPlayer, 0.8);

                                    assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                    assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                    assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                    changeRating(assistantPlayer, 0.8);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerId: assistantPlayer.playerId,
                                            playerName: assistantPlayer.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        },
                                    ];
                                    matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                                    break;

                                case 132:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 0.4);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.4,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`
                                    break;

                                case 133:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 1);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 1,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`
                                    break;

                                case 134:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 0.8);

                                    assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                    changeRating(assistantPlayer, 0.8);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerId: assistantPlayer.playerId,
                                        playerName: assistantPlayer.playerName,
                                        position: assistantPlayer.position,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                                    break;

                                case 135:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 1);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 1,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`
                                    break;

                                case 136:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 0.8);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.5,
                                    });

                                    matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`
                                    break;
                            }
                            break;
                    }


                    //поиск виноватого игрока ================================================
                    let value = Math.random(),
                        anotherUserIdx = (event.user + 1) % 2,
                        guiltPlayer;

                    if (value <= 0.15) guiltPlayer = playersOnPositions[anotherUserIdx].GK[0];
                    else if (value <= 0.30) {
                        let possibleGuiltPlayers = [...playersOnPositions[anotherUserIdx].FW, ...playersOnPositions[anotherUserIdx].WG];
                        guiltPlayer = possibleGuiltPlayers[MathService.randomInteger(0, possibleGuiltPlayers.length - 1)];
                    }
                    else if (value <= 0.60) guiltPlayer = playersOnPositions[anotherUserIdx].CM[MathService.randomInteger(0, playersOnPositions[anotherUserIdx].CM.length - 1)];
                    else {
                        let possibleGuiltPlayers = [...playersOnPositions[anotherUserIdx].CD, ...playersOnPositions[anotherUserIdx].WB];
                        guiltPlayer = possibleGuiltPlayers[MathService.randomInteger(0, possibleGuiltPlayers.length - 1)];
                    }
                    changeRating(guiltPlayer, -0.2);

                    matchLogs[i + 1].players.push({
                        playerName: guiltPlayer.playerName,
                        position: guiltPlayer.position,
                        role: 'guilt',
                        ratingDiff: -0.2,
                    });
                    //поиск виноватого игрока ================================================


                    for (let playerIndex = 0; playerIndex < anotherUser.players.length; playerIndex++) {
                        changeRating(anotherUser.players[playerIndex], -0.2);
                    } // -0.2 всем, кому гол
                    matchLogs[i + 1].players.push({
                        playerName: 'Another team players',
                        position: 'Another team positions',
                        role: 'none',
                        ratingDiff: -0.2,
                    });
                }
                else {
                    eventCode = 130;

                    let anotherUser = event.user === 0 ? user2 : user1;

                    actedPlayer = anotherUser.players[10];
                    changeRating(actedPlayer, 0.4);


                    matchLogs[i + 1].players = [
                        {
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.4,
                        }
                    ];
                    matchLogs[i + 1].result = `Shot on target`;
                }

                matchLogs[i + 1].code = eventCode;
                break;
        }

        matchLogs[i + 1].code = eventCode;
        matchLogs[i + 1].score = goals[0] + '-' + goals[1];
    }


    // рассчёт рейтинга игроков за сезон (среднее арифм)===========================
    for (let playerIndex = 0; playerIndex < 11; playerIndex++) {
        let sumOfMarks = [0, 0];

        user1.players[playerIndex].seasonRatingMarks.push(user1.players[playerIndex].matchRating);

        for (let marksIndex = 0; marksIndex < user1.players[playerIndex].seasonRatingMarks.length; marksIndex++) {
            sumOfMarks[0] += user1.players[playerIndex].seasonRatingMarks[marksIndex];
        }

        user1.players[playerIndex].averageRating = Number((sumOfMarks[0] / user1.players[playerIndex].seasonRatingMarks.length).toFixed(2));


        user2.players[playerIndex].seasonRatingMarks.push(user2.players[playerIndex].matchRating);

        for (let marksIndex = 0; marksIndex < user2.players[playerIndex].seasonRatingMarks.length; marksIndex++) {
            sumOfMarks[1] += user2.players[playerIndex].seasonRatingMarks[marksIndex];
        }

        user2.players[playerIndex].averageRating = Number((sumOfMarks[1] / user2.players[playerIndex].seasonRatingMarks.length).toFixed(2));
    }

    function sortById(a, b) {
        if (a.playerId < b.playerId) return -1;
        if (a.playerId > b.playerId) return 1;
        return 0;
    }

    user1.players.sort(sortById);
    user1.resultLastTeam.sort(sortById);
    user1.resultAllPlayers.sort(sortById);

    let allPlayersIndex = 0;
    for (let playerIndex = 0; playerIndex < 11; playerIndex++) {
        user1.resultLastTeam[playerIndex].seasonRatingMarks = user1.players[playerIndex].seasonRatingMarks;
        user1.resultLastTeam[playerIndex].averageRating = user1.players[playerIndex].averageRating;


        while (user1.players[playerIndex].playerId !== user1.resultAllPlayers[allPlayersIndex].playerId) allPlayersIndex++;

        user1.resultAllPlayers[allPlayersIndex].seasonRatingMarks = user1.players[playerIndex].seasonRatingMarks;
        user1.resultAllPlayers[allPlayersIndex].averageRating = user1.players[playerIndex].averageRating;
    }


    user2.players.sort(sortById);
    user2.resultLastTeam.sort(sortById);
    user2.resultAllPlayers.sort(sortById);

    allPlayersIndex = 0;
    for (let playerIndex = 0; playerIndex < 11; playerIndex++) {
        user2.resultLastTeam[playerIndex].seasonRatingMarks = user2.players[playerIndex].seasonRatingMarks;
        user2.resultLastTeam[playerIndex].averageRating = user2.players[playerIndex].averageRating;


        while (user2.players[playerIndex].playerId !== user2.resultAllPlayers[allPlayersIndex].playerId) allPlayersIndex++;

        user2.resultAllPlayers[allPlayersIndex].seasonRatingMarks = user2.players[playerIndex].seasonRatingMarks;
        user2.resultAllPlayers[allPlayersIndex].averageRating = user2.players[playerIndex].averageRating;
    }
    // рассчёт рейтинга игроков за сезон (среднее арифм)===========================

    let resultLogs = {
        user1: {
            id: user1.id,
            players: user1.players.map(player => {
                return {
                    playerId: player.playerId,
                    playerName: player.playerName,
                    head: player.head,
                    body: player.body,
                    clothing: player.clothing,
                    hair: player.hair,
                };
            })
        },
        user2: {
            id: user2.id,
            players: user2.players.map(player => {
                return {
                    playerId: player.playerId,
                    playerName: player.playerName,
                    head: player.head,
                    body: player.body,
                    clothing: player.clothing,
                    hair: player.hair,
                };
            })
        },
        matchEvents: matchLogs
    };


    //debug===========================================================================
    debugLogs.logs = resultLogs; //d
    debugLogs.score = goals[0] + '-' + goals[1]; //d
    debugLogs.user1.totalEvents = eventsArrs[0].join(' '); //d
    debugLogs.user2.totalEvents = eventsArrs[1].join(' '); //d

    let logsText = '';

    logsText += 'Звёзды игроков:\n=============================\n';

    logsText += 'Игрок 1:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${debugLogs.user1.playersAsm[i].playerName}: ${debugLogs.user1.playersAsm[i].asm}\n`;
    }
    logsText += '=================\n';

    logsText += 'Игрок 2:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${debugLogs.user2.playersAsm[i].playerName}: ${debugLogs.user2.playersAsm[i].asm}\n`;
    }
    logsText += '=================\n';

    logsText += '\n\nРейтинг карточек перед матчем:\n=============================\n';

    logsText += 'Игрок 1:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${user1.players[i].playerName}: 6.6\n`;
    }
    logsText += '=================\n';

    logsText += 'Игрок 2:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${user2.players[i].playerName}: 6.6\n`;
    }
    logsText += '=================\n';


    logsText += '\n\nЛоги матча:\n=============================\n';
    for (let i = 1; i < matchLogs.length; i++) {
        let playersRatingString = '';

        for (let j = 0; j < matchLogs[i].players.length; j++) {
            playersRatingString += `${matchLogs[i].players[j].playerName} (${matchLogs[i].players[j].ratingDiff}), `;
        }

        playersRatingString = playersRatingString.substring(0, playersRatingString.length - 2);

        logsText += `${matchLogs[i].minute} минута, игрок ${matchLogs[i].user + 1}, событие ${matchLogs[i].momentType}.\nРезультат: ${matchLogs[i].result}.\nИзменение рейтинга: ${playersRatingString}.\n====================================\n`;
    }


    logsText += `\n\nСчёт: ${goals[0]}-${goals[1]}\n`;


    let yellowCards = [[], []];
    for (let i = 1; i < matchLogs.length; i++) {
        let event = matchLogs[i];
        if (event.momentType === 11 && event.result.endsWith('card')) yellowCards[event.user].push({
            actedPlayer: event.players[0].playerName,
            injuredPlayer: event.players[1].playerName,
        });
    }

    logsText += `\n\nЖёлтые карточки:\n\n`;

    logsText += `Игрок 1:\n===============\n`;
    for (let i = 0; i < yellowCards[0].length; i++) {
        logsText += `Injured: ${yellowCards[0][i].injuredPlayer}, Acted: ${yellowCards[0][i].actedPlayer}\n`;
    }
    logsText += `===============\n`;

    logsText += `\nИгрок 2:\n===============\n`;
    for (let i = 0; i < yellowCards[1].length; i++) {
        logsText += `Injured: ${yellowCards[1][i].injuredPlayer}, Acted: ${yellowCards[1][i].actedPlayer}\n`;
    }
    logsText += `===============\n`;


    logsText += '\n\nРейтинг карточек после матча:\n=============================\n';

    logsText += 'Игрок 1:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${user1.players[i].playerName}: ${user1.players[i].matchRating}\n`;
    }
    logsText += '=================\n';

    logsText += 'Игрок 2:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${user2.players[i].playerName}: ${user2.players[i].matchRating}\n`;
    }
    logsText += '=================\n';

    debugLogs.logsText = logsText;
    //debug===========================================================================

    if (saveToDB) {
        let
            user1UpdateLastTeamQuery = prisma.user.update({
                where: {
                    id: user1.id,
                },
                data: {
                    lastTeam: JSON.stringify(user1.resultLastTeam)
                }
            }),
            user1UpdateAllPlayersQuery = prisma.user_players.update({
                where: {
                    userId: user1.id,
                },
                data: {
                    playersJson: JSON.stringify(user1.resultAllPlayers)
                }
            }),
            user2UpdateLastTeamQuery = prisma.user.update({
                where: {
                    id: user2.id,
                },
                data: {
                    lastTeam: JSON.stringify(user2.resultLastTeam)
                }
            }),
            user2UpdateAllPlayersQuery = prisma.user_players.update({
                where: {
                    userId: user2.id,
                },
                data: {
                    playersJson: JSON.stringify(user2.resultAllPlayers)
                }
            }),
            matchUpdateQuery = prisma.match.update({
                where: {
                    id: match.id
                },
                data: {
                    logs: JSON.stringify(resultLogs),
                    score: goals[0] + ':' + goals[1],
                }
            });

        await prisma.$transaction([user1UpdateLastTeamQuery, user1UpdateAllPlayersQuery, user2UpdateLastTeamQuery, user2UpdateAllPlayersQuery, matchUpdateQuery]);
    }

    return debugLogs;
}

async function playDebugMatch_v5(matchId, saveToDB) {
    const match = await prisma.match.findFirst({
        select: {
            id: true,
            player1: {
                select: {
                    id: true,
                    avatar: true,
                    lastTactic: true,
                    lastTeam: true,
                    players: {
                        select: {
                            playersJson: true
                        }
                    },
                },
            },
            player2: {
                select: {
                    id: true,
                    avatar: true,
                    lastTactic: true,
                    lastTeam: true,
                    players: {
                        select: {
                            playersJson: true
                        }
                    },
                }
            },
        },
        where: {
            id: matchId
        },
    });

    let
        matchLogs = [],
        user1 = {
            id: match.player1.id,
            avatar: match.player1.avatar,
            tactic: JSON.parse(match.player1.lastTactic),
            players: JSON.parse(match.player1.lastTeam).map(player => {
                return {
                    playerId: player.playerId,
                    playerName: player.playerName,
                    physicalSkills: player.physicalSkills,
                    technicalSkills: player.technicalSkills,
                    mood: player.mood,
                    position: player.position,
                    isGoalKeeper: player.isGoalKeeper,
                    seasonRatingMarks: player.seasonRatingMarks,
                    averageRating: player.averageRating,
                    matchRating: 6.6,
                }
            }),
            resultLastTeam: JSON.parse(match.player1.lastTeam),
            resultAllPlayers: JSON.parse(match.player1.players.playersJson),
        },
        user2 = {
            id: match.player2.id,
            avatar: match.player2.avatar,
            tactic: JSON.parse(match.player2.lastTactic),
            players: JSON.parse(match.player2.lastTeam).map(player => {
                return {
                    playerId: player.playerId,
                    playerName: player.playerName,
                    physicalSkills: player.physicalSkills,
                    technicalSkills: player.technicalSkills,
                    mood: player.mood,
                    position: player.position,
                    isGoalKeeper: player.isGoalKeeper,
                    seasonRatingMarks: player.seasonRatingMarks,
                    averageRating: player.averageRating,
                    matchRating: 6.6,
                }
            }),
            resultLastTeam: JSON.parse(match.player2.lastTeam),
            resultAllPlayers: JSON.parse(match.player2.players.playersJson),
        },
        playersOnPositions = [
            {
                'FW': [],
                'WG': [],
                'CM': [],
                'WB': [],
                'CD': [],
                'GK': [],
            },
            {
                'FW': [],
                'WG': [],
                'CM': [],
                'WB': [],
                'CD': [],
                'GK': [],
            }
        ],
        playersWithSkills = [
            {
                AGIp: [],
                TCKLp: [],
                PASp: [],
                STAz: [],
                STAm: [],
                AGIm: [],
            },
            {
                AGIp: [],
                TCKLp: [],
                PASp: [],
                STAz: [],
                STAm: [],
                AGIm: [],
            },
        ],
        T = [0, 0],
        goals = [0, 0],
        eventsArrs = [[], []], //d
        debugLogs = {
            matchId: match.id,
            score: null,
            user1: {
                id: user1.id,
                players: user1.players,
                playersAsm: [],
                homeBonus: 3,
                avatarBonus: 0,
                T: 0,
            },
            user2: {
                id: user2.id,
                players: user2.players,
                playersAsm: [],
                homeBonus: 0,
                avatarBonus: 0,
                T: 0,
            },
        }; //d


    user1.players.forEach((player) => {
        //распределение в массивах игроков на позициях
        playersOnPositions[0][player.position].push(player);

        switch (player.position) {
            case 'FW':
                player.technicalSkills.shoot *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.agility *= 3;
                player.physicalSkills.jump *= 3;
                break;

            case 'WG':
                player.technicalSkills.cross *= 3;
                player.technicalSkills.shoot *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.agility *= 3;
                break;

            case 'CM':
                player.technicalSkills.pass *= 3;
                player.physicalSkills.agility *= 3;
                player.physicalSkills.strength *= 3;
                break;

            case 'CD':
                player.technicalSkills.tackling *= 3;
                player.physicalSkills.strength *= 3;
                player.physicalSkills.jump *= 3;
                break;

            case 'WB':
                player.technicalSkills.cross *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.jump *= 3;
                break;
        }

        if (player.physicalSkills.agility === 3) playersWithSkills[0].AGIp.push(player);
        else if (player.physicalSkills.agility === -3) playersWithSkills[0].AGIm.push(player);

        if (player.technicalSkills.tackling === 3) playersWithSkills[0].TCKLp.push(player);

        if (player.technicalSkills.pass === 3) playersWithSkills[0].PASp.push(player);

        if (player.physicalSkills.stamina === -3) playersWithSkills[0].STAm.push(player);
        else if (player.physicalSkills.stamina === 0) playersWithSkills[0].STAz.push(player);


        //получение asm игрока
        let phy = 0, te = 0, asm;

        for (let skill in player.physicalSkills) {
            phy += player.physicalSkills[skill];
        }
        for (let skill in player.technicalSkills) {
            te += player.technicalSkills[skill];
        }

        phy = Math.min(Math.max(1, phy), 5);
        te = Math.min(Math.max(1, te), 5);

        asm = ((phy + te) / 2) + (player.mood / 2);
        asm = Math.min(Math.max(1, asm), 5);

        if (asm % 1 !== 0) {
            asm += 0.5 * (player.mood < 0 ? -1 : 1);
        }

        T[0] += asm;

        debugLogs.user1.playersAsm.push(player.playerName + '=' + asm); //d
    });
    user2.players.forEach((player) => {
        //распределение в массивах игроков на позициях
        playersOnPositions[1][player.position].push(player);

        switch (player.position) {
            case 'FW':
                player.technicalSkills.shoot *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.agility *= 3;
                player.physicalSkills.jump *= 3;
                break;

            case 'WG':
                player.technicalSkills.cross *= 3;
                player.technicalSkills.shoot *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.agility *= 3;
                break;

            case 'CM':
                player.technicalSkills.pass *= 3;
                player.physicalSkills.agility *= 3;
                player.physicalSkills.strength *= 3;
                break;

            case 'CD':
                player.technicalSkills.tackling *= 3;
                player.physicalSkills.strength *= 3;
                player.physicalSkills.jump *= 3;
                break;

            case 'WB':
                player.technicalSkills.cross *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.jump *= 3;
                break;
        }

        if (player.physicalSkills.agility === 3) playersWithSkills[1].AGIp.push(player);
        else if (player.physicalSkills.agility === -3) playersWithSkills[1].AGIm.push(player);

        if (player.technicalSkills.tackling === 3) playersWithSkills[1].TCKLp.push(player);

        if (player.technicalSkills.pass === 3) playersWithSkills[1].PASp.push(player);

        if (player.physicalSkills.stamina === -3) playersWithSkills[1].STAm.push(player);
        else if (player.physicalSkills.stamina === 0) playersWithSkills[1].STAz.push(player);


        //получение asm игрока
        let phy = 0, te = 0, asm;

        for (let skill in player.physicalSkills) {
            phy += player.physicalSkills[skill];
        }
        for (let skill in player.technicalSkills) {
            te += player.technicalSkills[skill];
        }

        phy = Math.min(Math.max(1, phy), 5);
        te = Math.min(Math.max(1, te), 5);

        asm = ((phy + te) / 2) + (player.mood / 2);
        asm = Math.min(Math.max(1, asm), 5);

        if (asm % 1 !== 0) {
            asm += 0.5 * (player.mood < 0 ? -1 : 1);
        }

        T[1] += asm;


        debugLogs.user2.playersAsm.push(player.playerName + '=' + asm); //d
    });


    function sortPlayers(a, b) {
        if (a.isGoalKeeper) return 1;
        if (b.isGoalKeeper) return -1;

        if (a.averageRating < b.averageRating) return -1;
        if (a.averageRating > b.averageRating) return 1;

        return 0;
    }

    user1.players.sort(sortPlayers);
    user2.players.sort(sortPlayers); // сортировка игроков по возрастанию рейтинга (GK всегда последние)


    T[0] += 3; //доп очки за домашнюю тиму
    if (user1.avatar !== user2.avatar) {
        if (avatarDefying[user1.avatar].includes(user2.avatar)) {
            T[0] += 3;

            debugLogs.user1.avatarBonus = 3;//debug
        }
        else if (avatarDefying[user2.avatar].includes(user1.avatar)) {
            T[1] += 3;

            debugLogs.user2.avatarBonus = 3;//debug
        }
    } // доп очки за контр тренеров

    debugLogs.user1.T = T[0]; //d
    debugLogs.user2.T = T[1]; //d


    let advantage = Math.abs(T[0] - T[1]);
    if (advantage <= 5) {
        if (T[0] > T[1]) {
            T[1] = T[0];
        }
        else {
            T[0] = T[1];
        }
    }
    else if (advantage <= 8) {
        if (T[0] > T[1]) {
            T[0] += 3;
        }
        else {
            T[1] += 3;
        }
    }
    else {
        if (T[0] > T[1]) {
            T[0] += advantage;
        }
        else {
            T[1] += advantage;
        }
    }

    debugLogs.user1.T_adv = T[0]; //d
    debugLogs.user2.T_adv = T[1]; //d


    function changeRating(player, ratingDiff) {
        player.matchRating = Number((player.matchRating + ratingDiff).toFixed(2));
    }

    let xG = [0, 0], momentsCount = [0, 0], xG1 = [0, 0], xG2 = [0, 0], lastPotGoalMinute = null;


    matchLogs.push({
        minute: 0,
        user: null,
        momentType: null,
        result: 'Match started!'
    });
    //первый тайм ===================================================================
    momentsCount[0] = Math.round(T[0] / ((T[0] + T[1]) / 15));
    momentsCount[1] = 15 - momentsCount[0];

    for (let i = 3; i <= 45; i += 3) {
        let player = MathService.randomFloat(0, T[0] + T[1]) <= T[0] ? 0 : 1,
            randNum = MathService.randomInteger(1, 10),
            momentType = randNum >= 1 && randNum <= 2 ? 13 : randNum >= 3 && randNum <= 6 ? 12 : 11,
            momentWeight = 0.5 * (momentType - 9);

        if (momentsCount[player] === 0) player = (player + 1) % 2;
        momentsCount[player]--;


        T[player] += momentWeight; // чтобы получить вес 1/1.5/2 (11 -9. 12 - 9, 13 - 9)
        xG[player] += momentWeight;
        xG1[player] += momentWeight;


        matchLogs.push({
            minute: i,
            user: player,
            momentType,
            result: ''
        });
        eventsArrs[player].push(momentType); //d
    }

    xG[0] /= 10;
    xG[1] /= 10;
    xG1[0] /= 10;
    xG1[1] /= 10;

    for (let i = 0; i < 15; i++) {
        let event = matchLogs[i + 1];

        let eventCode,
            eventedUser, scoredUser, anotherUser,
            AGIpLength, TCKLpLength, PASpLength, AGImLength, STAmLength, STAzLength, // для удобства
            actedPlayer, possibleActedPlayers, injuredPlayer;

        switch (event.momentType) {
            case 11:
                eventedUser = event.user === 0 ? user1 : user2;

                eventCode = MathService.randomInteger(111, 115);

                switch (eventCode) {
                    case 111:
                        matchLogs[i + 1].players = [];

                        STAmLength = playersWithSkills[event.user].STAm.length;
                        STAzLength = playersWithSkills[event.user].STAz.length;

                        if (STAmLength) injuredPlayer = playersWithSkills[event.user].STAm[MathService.randomInteger(0, STAmLength - 1)];
                        else if (STAzLength) injuredPlayer = playersWithSkills[event.user].STAz[MathService.randomInteger(0, STAzLength - 1)];
                        else injuredPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(injuredPlayer, -0.2);

                        let anotherUser = eventedUser === user1 ? user2 : user1;
                        actedPlayer = anotherUser.players[MathService.randomInteger(0, 9)];
                        changeRating(actedPlayer, -0.4);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.4,
                        });
                        matchLogs[i + 1].players.push({
                            playerId: injuredPlayer.playerId,
                            playerName: injuredPlayer.playerName,
                            position: injuredPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `${injuredPlayer.playerName} is injured - ${actedPlayer.playerName} will be punished by a yellow card`;
                        break;

                    case 112:
                        matchLogs[i + 1].players = [];

                        AGImLength = playersWithSkills[event.user].AGIm.length;

                        if (AGImLength) actedPlayer = playersWithSkills[event.user].AGIm[MathService.randomInteger(0, AGImLength - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `Unlucky dribbling - ${actedPlayer.playerName}`;
                        break;

                    case 113:
                        matchLogs[i + 1].players = [];

                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];

                        actedPlayer = possibleActedPlayers[MathService.randomInteger(0, possibleActedPlayers.length - 1)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `Unlucky cross - ${actedPlayer.playerName}`;
                        break;

                    case 114:
                        matchLogs[i + 1].players = [];
                        matchLogs[i + 1].result = `Slow passing in the midfield`;
                        break;

                    case 115:
                        matchLogs[i + 1].players = [];

                        actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `${actedPlayer.playerName} made a mistake`;
                        break;
                }
                break;

            case 12:
                eventedUser = event.user === 0 ? user1 : user2;

                eventCode = MathService.randomInteger(121, 125);

                switch (eventCode) {
                    case 121:
                        matchLogs[i + 1].players = [];

                        actedPlayer = eventedUser.players[MathService.randomInteger(0, 9)];

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0,
                        });

                        matchLogs[i + 1].result = `Shot off target`;
                        break;

                    case 122:
                        AGIpLength = playersWithSkills[event.user].AGIp.length;

                        if (AGIpLength) actedPlayer = playersWithSkills[event.user].AGIp[MathService.randomInteger(0, AGIpLength - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(5, 9)];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.playerId,
                                playerName: actedPlayer.playerName,
                                position: actedPlayer.position,
                                ratingDiff: 0.2,
                            }
                        ];

                        matchLogs[i + 1].result = `Successful dribbling by ${actedPlayer.playerName}`;
                        break;

                    case 123:
                        matchLogs[i + 1].players = [];

                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];
                        possibleActedPlayers.sort(function (a, b) {
                            return a - b;
                        });

                        actedPlayer = possibleActedPlayers[possibleActedPlayers.length - 1];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.2,
                        });

                        matchLogs[i + 1].result = `Promising cross by ${actedPlayer.playerName}`;
                        break;

                    case 124:
                        matchLogs[i + 1].players = [];

                        TCKLpLength = playersWithSkills[event.user].TCKLp.length;

                        if (TCKLpLength) actedPlayer = playersWithSkills[event.user].TCKLp[MathService.randomInteger(0, TCKLpLength - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(5, 9)];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.2,
                        });

                        matchLogs[i + 1].result = `Interception by ${actedPlayer.playerName}`;
                        break;

                    case 125:
                        matchLogs[i + 1].players = [];

                        PASpLength = playersWithSkills[event.user].PASp.length;

                        if (PASpLength) actedPlayer = playersWithSkills[event.user].PASp[MathService.randomInteger(0, PASpLength - 1)];
                        else {
                            playersOnPositions[event.user].CM.sort(function (a, b) {
                                return a - b;
                            })
                            actedPlayer = playersOnPositions[event.user].CM[playersOnPositions[event.user].CM.length - 1];
                        }
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.2,
                        });

                        matchLogs[i + 1].result = `Promising through pass by ${actedPlayer.playerName}`;
                        break;
                }
                break;

            case 13:
                let chanceNumbers = Math.floor(xG[event.user] / 0.25),
                    goal = MathService.randomInteger(1, 10) <= chanceNumbers ? 1 : 0;

                if (goal) {
                    let scoredPosition, scoredIndex, scoredPlayer, assistantPosition, assistantIndex, assistantPlayer;

                    scoredUser = event.user === 0 ? user1 : user2;
                    anotherUser = event.user === 0 ? user2 : user1;

                    goals[event.user]++;
                    xG[event.user] = Math.max(0, xG[event.user] - 1); //чтобы xG игрока не был меньше 0

                    switch (scoredUser.tactic.teamFocus) {
                        case 'wing-play':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                eventCode = 131;

                                scoredPlayer = playersOnPositions[event.user].FW[0];
                                changeRating(scoredPlayer, 0.8);

                                assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                changeRating(assistantPlayer, 0.8);

                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }


                                matchLogs[i + 1].players = [
                                    {
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerId: assistantPlayer.playerId,
                                        playerName: assistantPlayer.playerName,
                                        position: assistantPlayer.position,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    },
                                ];
                                matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                            }
                            else {
                                eventCode = MathService.randomInteger(131, 136);

                                switch (eventCode) {
                                    case 131:
                                        scoredPlayer = playersOnPositions[event.user].FW[0];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                        assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                        assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.playerId,
                                                playerName: scoredPlayer.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.playerId,
                                                playerName: assistantPlayer.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                                        break;

                                    case 132:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.4);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.4,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`
                                        break;

                                    case 133:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`
                                        break;

                                    case 134:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerId: assistantPlayer.playerId,
                                            playerName: assistantPlayer.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                                        break;

                                    case 135:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`
                                        break;

                                    case 136:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.5,
                                        });

                                        matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`
                                        break;
                                }
                            }
                            break;

                        case 'midfield':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                eventCode = 134;
                                matchLogs[i + 1].players = [];

                                scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                changeRating(scoredPlayer, 0.8);

                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                changeRating(assistantPlayer, 0.8);

                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }

                                matchLogs[i + 1].players.push({
                                    playerId: scoredPlayer.playerId,
                                    playerName: scoredPlayer.playerName,
                                    position: scoredPlayer.position,
                                    role: 'player',
                                    ratingDiff: 0.8,
                                });
                                matchLogs[i + 1].players.push({
                                    playerId: assistantPlayer.playerId,
                                    position: assistantPlayer.position,
                                    role: 'assistant',
                                    ratingDiff: 0.8,
                                });
                                matchLogs[i + 1].players.push({
                                    playerName: 'Scored team players',
                                    position: 'Scored team positions',
                                    role: 'none',
                                    ratingDiff: 0.2,
                                });

                                matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                            }
                            else {
                                eventCode = MathService.randomInteger(131, 136);

                                switch (eventCode) {
                                    case 131:
                                        scoredPlayer = playersOnPositions[event.user].FW[0];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                        assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                        assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.playerId,
                                                playerName: scoredPlayer.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.playerId,
                                                playerName: assistantPlayer.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                                        break;

                                    case 132:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.4);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.4,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`
                                        break;

                                    case 133:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`
                                        break;

                                    case 134:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerId: assistantPlayer.playerId,
                                            playerName: assistantPlayer.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                                        break;

                                    case 135:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`
                                        break;

                                    case 136:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.5,
                                        });

                                        matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`
                                        break;
                                }
                            }
                            break;

                        case 'stepUp':
                            eventCode = MathService.randomInteger(131, 136);

                            switch (eventCode) {
                                case 131:
                                    scoredPlayer = playersOnPositions[event.user].FW[0];
                                    changeRating(scoredPlayer, 0.8);

                                    assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                    assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                    assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                    changeRating(assistantPlayer, 0.8);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerId: assistantPlayer.playerId,
                                            playerName: assistantPlayer.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        },
                                    ];
                                    matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                                    break;

                                case 132:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 0.4);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.4,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`
                                    break;

                                case 133:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 1);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 1,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`
                                    break;

                                case 134:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 0.8);

                                    assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                    changeRating(assistantPlayer, 0.8);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerId: assistantPlayer.playerId,
                                        playerName: assistantPlayer.playerName,
                                        position: assistantPlayer.position,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                                    break;

                                case 135:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 1);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 1,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`
                                    break;

                                case 136:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 0.8);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.5,
                                    });

                                    matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`
                                    break;
                            }
                            break;
                    }

                    for (let playerIndex = 0; playerIndex < anotherUser.players.length; playerIndex++) {
                        changeRating(anotherUser.players[playerIndex], -0.2);
                    } // -0.2 всем, кому гол
                    matchLogs[i + 1].players.push({
                        playerName: 'Another team players',
                        position: 'Another team positions',
                        role: 'none',
                        ratingDiff: -0.2,
                    });
                }
                else {
                    eventCode = 130;

                    let anotherUser = event.user === 0 ? user2 : user1;

                    actedPlayer = anotherUser.players[10];
                    changeRating(actedPlayer, 0.4);


                    matchLogs[i + 1].players = [
                        {
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.4,
                        }
                    ];
                    matchLogs[i + 1].result = `Shot on target`;
                }

                matchLogs[i + 1].code = eventCode;
                break;
        }

        matchLogs[i + 1].code = eventCode;
        matchLogs[i + 1].score = goals[0] + '-' + goals[1];
    }
    //первый тайм ===================================================================


    eventsArrs[0].push("==="); //d
    eventsArrs[1].push("==="); //d


    //второй тайм ===================================================================
    momentsCount[0] = Math.round(T[0] / ((T[0] + T[1]) / 15));
    momentsCount[1] = 15 - momentsCount[0];

    for (let i = 48; i <= 90; i += 3) {
        let player = MathService.randomFloat(0, T[0] + T[1]) <= T[0] ? 0 : 1,
            randNum = MathService.randomInteger(1, 10),
            momentType = randNum >= 1 && randNum <= 2 ? 13 : randNum >= 3 && randNum <= 6 ? 12 : 11,
            momentWeight = 0.5 * (momentType - 9);

        if (momentsCount[player] === 0) player = (player + 1) % 2;
        momentsCount[player]--;


        T[player] += momentWeight; // чтобы получить вес 1/1.5/2 (11 -9. 12 - 9, 13 - 9)
        xG[player] += momentWeight;
        xG2[player] += momentWeight;


        matchLogs.push({
            minute: i,
            user: player,
            momentType,
            result: ''
        });
        eventsArrs[player].push(momentType); //d
    }

    xG[0] /= 10;
    xG[1] /= 10;
    xG2[0] /= 10;
    xG2[1] /= 10;

    for (let i = 15; i < 30; i++) {
        let event = matchLogs[i + 1];

        let eventCode,
            eventedUser, scoredUser, anotherUser,
            AGIpLength, TCKLpLength, PASpLength, AGImLength, STAmLength, STAzLength, // для удобства
            actedPlayer, possibleActedPlayers, injuredPlayer;

        switch (event.momentType) {
            case 11:
                eventedUser = event.user === 0 ? user1 : user2;

                eventCode = MathService.randomInteger(111, 115);

                switch (eventCode) {
                    case 111:
                        matchLogs[i + 1].players = [];

                        STAmLength = playersWithSkills[event.user].STAm.length;
                        STAzLength = playersWithSkills[event.user].STAz.length;

                        if (STAmLength) injuredPlayer = playersWithSkills[event.user].STAm[MathService.randomInteger(0, STAmLength - 1)];
                        else if (STAzLength) injuredPlayer = playersWithSkills[event.user].STAz[MathService.randomInteger(0, STAzLength - 1)];
                        else injuredPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(injuredPlayer, -0.2);

                        let anotherUser = eventedUser === user1 ? user2 : user1;
                        actedPlayer = anotherUser.players[MathService.randomInteger(0, 9)];
                        changeRating(actedPlayer, -0.4);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.4,
                        });
                        matchLogs[i + 1].players.push({
                            playerId: injuredPlayer.playerId,
                            playerName: injuredPlayer.playerName,
                            position: injuredPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `${injuredPlayer.playerName} is injured - ${actedPlayer.playerName} will be punished by a yellow card`;
                        break;

                    case 112:
                        matchLogs[i + 1].players = [];

                        AGImLength = playersWithSkills[event.user].AGIm.length;

                        if (AGImLength) actedPlayer = playersWithSkills[event.user].AGIm[MathService.randomInteger(0, AGImLength - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `Unlucky dribbling - ${actedPlayer.playerName}`;
                        break;

                    case 113:
                        matchLogs[i + 1].players = [];

                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];

                        actedPlayer = possibleActedPlayers[MathService.randomInteger(0, possibleActedPlayers.length - 1)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `Unlucky cross - ${actedPlayer.playerName}`;
                        break;

                    case 114:
                        matchLogs[i + 1].players = [];
                        matchLogs[i + 1].result = `Slow passing in the midfield`;
                        break;

                    case 115:
                        matchLogs[i + 1].players = [];

                        actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `${actedPlayer.playerName} made a mistake`;
                        break;
                }
                break;

            case 12:
                eventedUser = event.user === 0 ? user1 : user2;

                eventCode = MathService.randomInteger(121, 125);

                switch (eventCode) {
                    case 121:
                        matchLogs[i + 1].players = [];

                        actedPlayer = eventedUser.players[MathService.randomInteger(0, 9)];

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0,
                        });

                        matchLogs[i + 1].result = `Shot off target`;
                        break;

                    case 122:
                        AGIpLength = playersWithSkills[event.user].AGIp.length;

                        if (AGIpLength) actedPlayer = playersWithSkills[event.user].AGIp[MathService.randomInteger(0, AGIpLength - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(5, 9)];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.playerId,
                                playerName: actedPlayer.playerName,
                                position: actedPlayer.position,
                                ratingDiff: 0.2,
                            }
                        ];

                        matchLogs[i + 1].result = `Successful dribbling by ${actedPlayer.playerName}`;
                        break;

                    case 123:
                        matchLogs[i + 1].players = [];

                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];
                        possibleActedPlayers.sort(function (a, b) {
                            return a - b;
                        });

                        actedPlayer = possibleActedPlayers[possibleActedPlayers.length - 1];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.2,
                        });

                        matchLogs[i + 1].result = `Promising cross by ${actedPlayer.playerName}`;
                        break;

                    case 124:
                        matchLogs[i + 1].players = [];

                        TCKLpLength = playersWithSkills[event.user].TCKLp.length;

                        if (TCKLpLength) actedPlayer = playersWithSkills[event.user].TCKLp[MathService.randomInteger(0, TCKLpLength - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(5, 9)];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.2,
                        });

                        matchLogs[i + 1].result = `Interception by ${actedPlayer.playerName}`;
                        break;

                    case 125:
                        matchLogs[i + 1].players = [];

                        PASpLength = playersWithSkills[event.user].PASp.length;

                        if (PASpLength) actedPlayer = playersWithSkills[event.user].PASp[MathService.randomInteger(0, PASpLength - 1)];
                        else {
                            playersOnPositions[event.user].CM.sort(function (a, b) {
                                return a - b;
                            })
                            actedPlayer = playersOnPositions[event.user].CM[playersOnPositions[event.user].CM.length - 1];
                        }
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.2,
                        });

                        matchLogs[i + 1].result = `Promising through pass by ${actedPlayer.playerName}`;
                        break;
                }
                break;

            case 13:
                let chanceNumbers = Math.floor(xG[event.user] / 0.25),
                    goal = MathService.randomInteger(1, 10) <= chanceNumbers ? 1 : 0;

                if (goal) {
                    let scoredPosition, scoredIndex, scoredPlayer, assistantPosition, assistantIndex, assistantPlayer;

                    scoredUser = event.user === 0 ? user1 : user2;
                    anotherUser = event.user === 0 ? user2 : user1;

                    goals[event.user]++;
                    xG[event.user] = Math.max(0, xG[event.user] - 1); //чтобы xG игрока не был меньше 0

                    switch (scoredUser.tactic.teamFocus) {
                        case 'wing-play':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                eventCode = 131;

                                scoredPlayer = playersOnPositions[event.user].FW[0];
                                changeRating(scoredPlayer, 0.8);

                                assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                changeRating(assistantPlayer, 0.8);

                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }


                                matchLogs[i + 1].players = [
                                    {
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerId: assistantPlayer.playerId,
                                        playerName: assistantPlayer.playerName,
                                        position: assistantPlayer.position,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    },
                                ];
                                matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                            }
                            else {
                                eventCode = MathService.randomInteger(131, 136);

                                switch (eventCode) {
                                    case 131:
                                        scoredPlayer = playersOnPositions[event.user].FW[0];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                        assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                        assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.playerId,
                                                playerName: scoredPlayer.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.playerId,
                                                playerName: assistantPlayer.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                                        break;

                                    case 132:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.4);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.4,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`
                                        break;

                                    case 133:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`
                                        break;

                                    case 134:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerId: assistantPlayer.playerId,
                                            playerName: assistantPlayer.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                                        break;

                                    case 135:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`
                                        break;

                                    case 136:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.5,
                                        });

                                        matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`
                                        break;
                                }
                            }
                            break;

                        case 'midfield':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                eventCode = 134;
                                matchLogs[i + 1].players = [];

                                scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                changeRating(scoredPlayer, 0.8);

                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                changeRating(assistantPlayer, 0.8);

                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }

                                matchLogs[i + 1].players.push({
                                    playerId: scoredPlayer.playerId,
                                    playerName: scoredPlayer.playerName,
                                    position: scoredPlayer.position,
                                    role: 'player',
                                    ratingDiff: 0.8,
                                });
                                matchLogs[i + 1].players.push({
                                    playerId: assistantPlayer.playerId,
                                    position: assistantPlayer.position,
                                    role: 'assistant',
                                    ratingDiff: 0.8,
                                });
                                matchLogs[i + 1].players.push({
                                    playerName: 'Scored team players',
                                    position: 'Scored team positions',
                                    role: 'none',
                                    ratingDiff: 0.2,
                                });

                                matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                            }
                            else {
                                eventCode = MathService.randomInteger(131, 136);

                                switch (eventCode) {
                                    case 131:
                                        scoredPlayer = playersOnPositions[event.user].FW[0];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                        assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                        assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.playerId,
                                                playerName: scoredPlayer.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.playerId,
                                                playerName: assistantPlayer.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                                        break;

                                    case 132:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.4);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.4,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`
                                        break;

                                    case 133:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`
                                        break;

                                    case 134:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerId: assistantPlayer.playerId,
                                            playerName: assistantPlayer.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                                        break;

                                    case 135:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`
                                        break;

                                    case 136:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.5,
                                        });

                                        matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`
                                        break;
                                }
                            }
                            break;

                        case 'stepUp':
                            eventCode = MathService.randomInteger(131, 136);

                            switch (eventCode) {
                                case 131:
                                    scoredPlayer = playersOnPositions[event.user].FW[0];
                                    changeRating(scoredPlayer, 0.8);

                                    assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                    assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                    assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                    changeRating(assistantPlayer, 0.8);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerId: assistantPlayer.playerId,
                                            playerName: assistantPlayer.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        },
                                    ];
                                    matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                                    break;

                                case 132:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 0.4);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.4,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`
                                    break;

                                case 133:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 1);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 1,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`
                                    break;

                                case 134:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 0.8);

                                    assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                    changeRating(assistantPlayer, 0.8);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerId: assistantPlayer.playerId,
                                        playerName: assistantPlayer.playerName,
                                        position: assistantPlayer.position,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                                    break;

                                case 135:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 1);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 1,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`
                                    break;

                                case 136:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 0.8);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.5,
                                    });

                                    matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`
                                    break;
                            }
                            break;
                    }

                    for (let playerIndex = 0; playerIndex < anotherUser.players.length; playerIndex++) {
                        changeRating(anotherUser.players[playerIndex], -0.2);
                    } // -0.2 всем, кому гол
                    matchLogs[i + 1].players.push({
                        playerName: 'Another team players',
                        position: 'Another team positions',
                        role: 'none',
                        ratingDiff: -0.2,
                    });
                }
                else {
                    eventCode = 130;

                    let anotherUser = event.user === 0 ? user2 : user1;

                    actedPlayer = anotherUser.players[10];
                    changeRating(actedPlayer, 0.4);


                    matchLogs[i + 1].players = [
                        {
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.4,
                        }
                    ];
                    matchLogs[i + 1].result = `Shot on target`;
                }

                matchLogs[i + 1].code = eventCode;
                break;
        }

        matchLogs[i + 1].code = eventCode;
        matchLogs[i + 1].score = goals[0] + '-' + goals[1];
    }
    //второй тайм ===================================================================


    // рассчёт рейтинга игроков за сезон (среднее арифм)===========================
    for (let playerIndex = 0; playerIndex < 11; playerIndex++) {
        let sumOfMarks = [0, 0];

        user1.players[playerIndex].seasonRatingMarks.push(user1.players[playerIndex].matchRating);

        for (let marksIndex = 0; marksIndex < user1.players[playerIndex].seasonRatingMarks.length; marksIndex++) {
            sumOfMarks[0] += user1.players[playerIndex].seasonRatingMarks[marksIndex];
        }

        user1.players[playerIndex].averageRating = Number((sumOfMarks[0] / user1.players[playerIndex].seasonRatingMarks.length).toFixed(2));


        user2.players[playerIndex].seasonRatingMarks.push(user2.players[playerIndex].matchRating);

        for (let marksIndex = 0; marksIndex < user2.players[playerIndex].seasonRatingMarks.length; marksIndex++) {
            sumOfMarks[1] += user2.players[playerIndex].seasonRatingMarks[marksIndex];
        }

        user2.players[playerIndex].averageRating = Number((sumOfMarks[1] / user2.players[playerIndex].seasonRatingMarks.length).toFixed(2));
    }

    function sortById(a, b) {
        if (a.playerId < b.playerId) return -1;
        if (a.playerId > b.playerId) return 1;
        return 0;
    }

    user1.players.sort(sortById);
    user1.resultLastTeam.sort(sortById);
    user1.resultAllPlayers.sort(sortById);

    let allPlayersIndex = 0;
    for (let playerIndex = 0; playerIndex < 11; playerIndex++) {
        user1.resultLastTeam[playerIndex].seasonRatingMarks = user1.players[playerIndex].seasonRatingMarks;
        user1.resultLastTeam[playerIndex].averageRating = user1.players[playerIndex].averageRating;


        while (user1.players[playerIndex].playerId !== user1.resultAllPlayers[allPlayersIndex].playerId) allPlayersIndex++;

        user1.resultAllPlayers[allPlayersIndex].seasonRatingMarks = user1.players[playerIndex].seasonRatingMarks;
        user1.resultAllPlayers[allPlayersIndex].averageRating = user1.players[playerIndex].averageRating;
    }


    user2.players.sort(sortById);
    user2.resultLastTeam.sort(sortById);
    user2.resultAllPlayers.sort(sortById);

    allPlayersIndex = 0;
    for (let playerIndex = 0; playerIndex < 11; playerIndex++) {
        user2.resultLastTeam[playerIndex].seasonRatingMarks = user2.players[playerIndex].seasonRatingMarks;
        user2.resultLastTeam[playerIndex].averageRating = user2.players[playerIndex].averageRating;


        while (user2.players[playerIndex].playerId !== user2.resultAllPlayers[allPlayersIndex].playerId) allPlayersIndex++;

        user2.resultAllPlayers[allPlayersIndex].seasonRatingMarks = user2.players[playerIndex].seasonRatingMarks;
        user2.resultAllPlayers[allPlayersIndex].averageRating = user2.players[playerIndex].averageRating;
    }
    // рассчёт рейтинга игроков за сезон (среднее арифм)===========================

    let resultLogs = {
        user1: {
            id: user1.id,
            playerIds: user1.players.map(player => {
                return player.playerId;
            })
        },
        user2: {
            id: user2.id,
            playerIds: user2.players.map(player => {
                return player.playerId;
            })
        },
        matchEvents: matchLogs
    };


    //debug===========================================================================
    debugLogs.logs = resultLogs; //d
    debugLogs.score = goals[0] + '-' + goals[1]; //d
    debugLogs.user1.totalEvents = eventsArrs[0].join(' '); //d
    debugLogs.user2.totalEvents = eventsArrs[1].join(' '); //d

    let logsText = '';

    logsText += 'Рейтинг карточек перед матчем:\n=============================\n';

    logsText += 'Игрок 1:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${user1.players[i].playerName}: 6.6\n`;
    }
    logsText += '=================\n';

    logsText += 'Игрок 2:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${user2.players[i].playerName}: 6.6\n`;
    }
    logsText += '=================\n';


    logsText += '\n\nЛоги матча:\n=============================\n';
    for (let i = 1; i < matchLogs.length; i++) {
        let playersRatingString = '';

        for (let j = 0; j < matchLogs[i].players.length; j++) {
            playersRatingString += `${matchLogs[i].players[j].playerName} (${matchLogs[i].players[j].ratingDiff}), `;
        }

        playersRatingString = playersRatingString.substring(0, playersRatingString.length - 2);

        logsText += `${matchLogs[i].minute} минута, игрок ${matchLogs[i].user + 1}, событие ${matchLogs[i].momentType}.\nРезультат: ${matchLogs[i].result}.\nИзменение рейтинга: ${playersRatingString}.\n====================================\n`;
    }


    logsText += `\n\nСчёт: ${goals[0]}-${goals[1]}\n`;


    let yellowCards = [[], []];
    for (let i = 1; i < matchLogs.length; i++) {
        let event = matchLogs[i];
        if (event.momentType === 11 && event.result.endsWith('card')) yellowCards[event.user].push({
            actedPlayer: event.players[0].playerName,
            injuredPlayer: event.players[1].playerName,
        });
    }

    logsText += `\n\nЖёлтые карточки:\n\n`;

    logsText += `Игрок 1:\n===============\n`;
    for (let i = 0; i < yellowCards[0].length; i++) {
        logsText += `Injured: ${yellowCards[0][i].injuredPlayer}, Acted: ${yellowCards[0][i].actedPlayer}\n`;
    }
    logsText += `===============\n`;

    logsText += `\nИгрок 2:\n===============\n`;
    for (let i = 0; i < yellowCards[1].length; i++) {
        logsText += `Injured: ${yellowCards[1][i].injuredPlayer}, Acted: ${yellowCards[1][i].actedPlayer}\n`;
    }
    logsText += `===============\n`;


    logsText += '\n\nРейтинг карточек после матча:\n=============================\n';

    logsText += 'Игрок 1:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${user1.players[i].playerName}: ${user1.players[i].matchRating}\n`;
    }
    logsText += '=================\n';

    logsText += 'Игрок 2:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${user2.players[i].playerName}: ${user2.players[i].matchRating}\n`;
    }
    logsText += '=================\n';

    debugLogs.logsText = logsText;
    //debug===========================================================================

    if (saveToDB) {
        let
            user1UpdateLastTeamQuery = prisma.user.update({
                where: {
                    id: user1.id,
                },
                data: {
                    lastTeam: JSON.stringify(user1.resultLastTeam)
                }
            }),
            user1UpdateAllPlayersQuery = prisma.user_players.update({
                where: {
                    userId: user1.id,
                },
                data: {
                    playersJson: JSON.stringify(user1.resultAllPlayers)
                }
            }),
            user2UpdateLastTeamQuery = prisma.user.update({
                where: {
                    id: user2.id,
                },
                data: {
                    lastTeam: JSON.stringify(user2.resultLastTeam)
                }
            }),
            user2UpdateAllPlayersQuery = prisma.user_players.update({
                where: {
                    userId: user2.id,
                },
                data: {
                    playersJson: JSON.stringify(user2.resultAllPlayers)
                }
            }),
            matchUpdateQuery = prisma.match.update({
                where: {
                    id: match.id
                },
                data: {
                    logs: JSON.stringify(resultLogs),
                    score: goals[0] + ':' + goals[1],
                }
            });

        await prisma.$transaction([user1UpdateLastTeamQuery, user1UpdateAllPlayersQuery, user2UpdateLastTeamQuery, user2UpdateAllPlayersQuery, matchUpdateQuery]);
    }

    return debugLogs;
}

async function playDebugMatch_v4(matchId, saveToDB) {
    const match = await prisma.match.findFirst({
        select: {
            id: true,
            player1: {
                select: {
                    id: true,
                    avatar: true,
                    lastTactic: true,
                    lastTeam: true,
                    players: {
                        select: {
                            playersJson: true
                        }
                    },
                },
            },
            player2: {
                select: {
                    id: true,
                    avatar: true,
                    lastTactic: true,
                    lastTeam: true,
                    players: {
                        select: {
                            playersJson: true
                        }
                    },
                }
            },
        },
        where: {
            id: matchId
        },
    });

    let
        matchLogs = [],
        user1 = {
            id: match.player1.id,
            avatar: match.player1.avatar,
            tactic: JSON.parse(match.player1.lastTactic),
            players: JSON.parse(match.player1.lastTeam).map(player => {
                return {
                    playerId: player.playerId,
                    playerName: player.playerName,
                    physicalSkills: player.physicalSkills,
                    technicalSkills: player.technicalSkills,
                    mood: player.mood,
                    position: player.position,
                    isGoalKeeper: player.isGoalKeeper,
                    seasonRatingMarks: player.seasonRatingMarks,
                    averageRating: player.averageRating,
                    matchRating: 6.6,
                }
            }),
            resultLastTeam: JSON.parse(match.player1.lastTeam),
            resultAllPlayers: JSON.parse(match.player1.players.playersJson),
        },
        user2 = {
            id: match.player2.id,
            avatar: match.player2.avatar,
            tactic: JSON.parse(match.player2.lastTactic),
            players: JSON.parse(match.player2.lastTeam).map(player => {
                return {
                    playerId: player.playerId,
                    playerName: player.playerName,
                    physicalSkills: player.physicalSkills,
                    technicalSkills: player.technicalSkills,
                    mood: player.mood,
                    position: player.position,
                    isGoalKeeper: player.isGoalKeeper,
                    seasonRatingMarks: player.seasonRatingMarks,
                    averageRating: player.averageRating,
                    matchRating: 6.6,
                }
            }),
            resultLastTeam: JSON.parse(match.player2.lastTeam),
            resultAllPlayers: JSON.parse(match.player2.players.playersJson),
        },
        playersOnPositions = [
            {
                'FW': [],
                'WG': [],
                'CM': [],
                'WB': [],
                'CD': [],
                'GK': [],
            },
            {
                'FW': [],
                'WG': [],
                'CM': [],
                'WB': [],
                'CD': [],
                'GK': [],
            }
        ],
        playersWithSkills = [
            {
                AGIp: [],
                TCKLp: [],
                PASp: [],
                STAz: [],
                STAm: [],
                AGIm: [],
            },
            {
                AGIp: [],
                TCKLp: [],
                PASp: [],
                STAz: [],
                STAm: [],
                AGIm: [],
            },
        ],
        T = [0, 0],
        goals = [0, 0],
        eventsArrs = [[], []], //d
        debugLogs = {
            matchId: match.id,
            score: null,
            user1: {
                id: user1.id,
                players: user1.players,
                playersAsm: [],
                homeBonus: 3,
                avatarBonus: 0,
                T: 0,
            },
            user2: {
                id: user2.id,
                players: user2.players,
                playersAsm: [],
                homeBonus: 0,
                avatarBonus: 0,
                T: 0,
            },
            events: []
        }; //d


    user1.players.forEach((player) => {
        //распределение в массивах игроков на позициях
        playersOnPositions[0][player.position].push(player);

        switch (player.position) {
            case 'FW':
                player.technicalSkills.shoot *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.agility *= 3;
                player.physicalSkills.jump *= 3;
                break;

            case 'WG':
                player.technicalSkills.cross *= 3;
                player.technicalSkills.shoot *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.agility *= 3;
                break;

            case 'CM':
                player.technicalSkills.pass *= 3;
                player.physicalSkills.agility *= 3;
                player.physicalSkills.strength *= 3;
                break;

            case 'CD':
                player.technicalSkills.tackling *= 3;
                player.physicalSkills.strength *= 3;
                player.physicalSkills.jump *= 3;
                break;

            case 'WB':
                player.technicalSkills.cross *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.jump *= 3;
                break;
        }

        if (player.physicalSkills.agility === 3) playersWithSkills[0].AGIp.push(player);
        else if (player.physicalSkills.agility === -3) playersWithSkills[0].AGIm.push(player);

        if (player.technicalSkills.tackling === 3) playersWithSkills[0].TCKLp.push(player);

        if (player.technicalSkills.pass === 3) playersWithSkills[0].PASp.push(player);

        if (player.physicalSkills.stamina === -3) playersWithSkills[0].STAm.push(player);
        else if (player.physicalSkills.stamina === 0) playersWithSkills[0].STAz.push(player);


        //получение asm игрока
        let phy = 0, te = 0, asm;

        for (let skill in player.physicalSkills) {
            phy += player.physicalSkills[skill];
        }
        for (let skill in player.technicalSkills) {
            te += player.technicalSkills[skill];
        }

        phy = Math.min(Math.max(1, phy), 5);
        te = Math.min(Math.max(1, te), 5);

        asm = ((phy + te) / 2) + (player.mood / 2);
        asm = Math.min(Math.max(1, asm), 5);

        if (asm % 1 !== 0) {
            asm += 0.5 * (player.mood < 0 ? -1 : 1);
        }

        T[0] += asm;

        debugLogs.user1.playersAsm.push(player.playerName + '=' + asm); //d
    });
    user2.players.forEach((player) => {
        //распределение в массивах игроков на позициях
        playersOnPositions[1][player.position].push(player);

        switch (player.position) {
            case 'FW':
                player.technicalSkills.shoot *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.agility *= 3;
                player.physicalSkills.jump *= 3;
                break;

            case 'WG':
                player.technicalSkills.cross *= 3;
                player.technicalSkills.shoot *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.agility *= 3;
                break;

            case 'CM':
                player.technicalSkills.pass *= 3;
                player.physicalSkills.agility *= 3;
                player.physicalSkills.strength *= 3;
                break;

            case 'CD':
                player.technicalSkills.tackling *= 3;
                player.physicalSkills.strength *= 3;
                player.physicalSkills.jump *= 3;
                break;

            case 'WB':
                player.technicalSkills.cross *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.jump *= 3;
                break;
        }

        if (player.physicalSkills.agility === 3) playersWithSkills[1].AGIp.push(player);
        else if (player.physicalSkills.agility === -3) playersWithSkills[1].AGIm.push(player);

        if (player.technicalSkills.tackling === 3) playersWithSkills[1].TCKLp.push(player);

        if (player.technicalSkills.pass === 3) playersWithSkills[1].PASp.push(player);

        if (player.physicalSkills.stamina === -3) playersWithSkills[1].STAm.push(player);
        else if (player.physicalSkills.stamina === 0) playersWithSkills[1].STAz.push(player);


        //получение asm игрока
        let phy = 0, te = 0, asm;

        for (let skill in player.physicalSkills) {
            phy += player.physicalSkills[skill];
        }
        for (let skill in player.technicalSkills) {
            te += player.technicalSkills[skill];
        }

        phy = Math.min(Math.max(1, phy), 5);
        te = Math.min(Math.max(1, te), 5);

        asm = ((phy + te) / 2) + (player.mood / 2);
        asm = Math.min(Math.max(1, asm), 5);

        if (asm % 1 !== 0) {
            asm += 0.5 * (player.mood < 0 ? -1 : 1);
        }

        T[1] += asm;


        debugLogs.user2.playersAsm.push(player.playerName + '=' + asm); //d
    });


    function sortPlayers(a, b) {
        if (a.isGoalKeeper) return 1;
        if (b.isGoalKeeper) return -1;

        if (a.averageRating < b.averageRating) return -1;
        if (a.averageRating > b.averageRating) return 1;

        return 0;
    }

    user1.players.sort(sortPlayers);
    user2.players.sort(sortPlayers); // сортировка игроков по возрастанию рейтинга (GK всегда последние)


    T[0] += 3; //доп очки за домашнюю тиму
    if (user1.avatar !== user2.avatar) {
        if (avatarDefying[user1.avatar].includes(user2.avatar)) {
            T[0] += 3;

            debugLogs.user1.avatarBonus = 3;//debug
        }
        else if (avatarDefying[user2.avatar].includes(user1.avatar)) {
            T[1] += 3;

            debugLogs.user2.avatarBonus = 3;//debug
        }
    } // доп очки за контр тренеров

    debugLogs.user1.T = T[0]; //d
    debugLogs.user2.T = T[1]; //d


    let advantage = Math.abs(T[0] - T[1]);
    if (advantage <= 5) {
        if (T[0] > T[1]) {
            T[1] = T[0];
        }
        else {
            T[0] = T[1];
        }
    }
    else if (advantage <= 8) {
        if (T[0] > T[1]) {
            T[0] += 3;
        }
        else {
            T[1] += 3;
        }
    }
    else {
        if (T[0] > T[1]) {
            T[0] += advantage;
        }
        else {
            T[1] += advantage;
        }
    }

    debugLogs.user1.T_adv = T[0]; //d
    debugLogs.user2.T_adv = T[1]; //d


    function changeRating(player, ratingDiff) {
        player.matchRating = Number((player.matchRating + ratingDiff).toFixed(2));
    }

    let matchEvents = [], xG = [0, 0], momentsCount = [0, 0];


    matchLogs.push({
        minute: 0,
        user: null,
        momentType: null,
        result: 'Match started!'
    });


    //первый тайм ===================================================================
    momentsCount[0] = Math.round(T[0] / ((T[0] + T[1]) / 15));
    momentsCount[1] = 15 - momentsCount[0];

    for (let i = 3; i <= 45; i += 3) {
        let player = MathService.randomFloat(0, T[0] + T[1]) <= T[0] ? 0 : 1,
            randNum = MathService.randomInteger(1, 10),
            momentType = randNum >= 1 && randNum <= 2 ? 13 : randNum >= 3 && randNum <= 6 ? 12 : 11,
            momentWeight = 0.5 * (momentType - 9);

        if (momentsCount[player] === 0) player = (player + 1) % 2;
        momentsCount[player]--;

        matchEvents.push({
            minute: i,
            player,
            momentType
        });
        T[player] += momentWeight; // чтобы получить вес 1/1.5/2 (11 -9. 12 - 9, 13 - 9)
        xG[player] += momentWeight;

        matchLogs.push({
            minute: i,
            user: player,
            momentType,
            result: ''
        });

        debugLogs.events.push({
            minute: i,
            user: player,
            momentType,
            tDiff: T[0] + '-' + T[1],
            result: '',
            score: ''
        }); //debug
        eventsArrs[player].push(momentType); //d
    }

    xG[0] /= 10;
    xG[1] /= 10;

    for (let i = 0; i < 15; i++) {
        let event = matchEvents[i];

        let eventCode,
            eventedUser, scoredUser, anotherUser,
            AGIpLength, TCKLpLength, PASpLength, AGImLength, STAmLength, STAzLength, // для удобства
            actedPlayer, possibleActedPlayers, injuredPlayer;

        switch (event.momentType) {
            case 11:
                eventedUser = event.user === 0 ? user1 : user2;

                eventCode = MathService.randomInteger(111, 115);

                switch (eventCode) {
                    case 111:
                        matchLogs[i + 1].players = [];

                        STAmLength = playersWithSkills[event.user].STAm.length;
                        STAzLength = playersWithSkills[event.user].STAz.length;

                        if (STAmLength) injuredPlayer = playersWithSkills[event.user].STAm[MathService.randomInteger(0, STAmLength - 1)];
                        else if (STAzLength) injuredPlayer = playersWithSkills[event.user].STAz[MathService.randomInteger(0, STAzLength - 1)];
                        else injuredPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(injuredPlayer, -0.2);

                        let anotherUser = eventedUser === user1 ? user2 : user1;
                        actedPlayer = anotherUser.players[MathService.randomInteger(0, 9)];
                        changeRating(actedPlayer, -0.4);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.4,
                        });
                        matchLogs[i + 1].players.push({
                            playerId: injuredPlayer.playerId,
                            playerName: injuredPlayer.playerName,
                            position: injuredPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `${injuredPlayer.playerName} is injured - ${actedPlayer.playerName} will be punished by a yellow card`;
                        break;

                    case 112:
                        matchLogs[i + 1].players = [];

                        AGImLength = playersWithSkills[event.user].AGIm.length;

                        if (AGImLength) actedPlayer = playersWithSkills[event.user].AGIm[MathService.randomInteger(0, AGImLength - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `Unlucky dribbling - ${actedPlayer.playerName}`;
                        break;

                    case 113:
                        matchLogs[i + 1].players = [];

                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];

                        actedPlayer = possibleActedPlayers[MathService.randomInteger(0, possibleActedPlayers.length - 1)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `Unlucky cross - ${actedPlayer.playerName}`;
                        break;

                    case 114:
                        matchLogs[i + 1].players = [];
                        matchLogs[i + 1].result = `Slow passing in the midfield`;
                        break;

                    case 115:
                        matchLogs[i + 1].players = [];

                        actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `${actedPlayer.playerName} made a mistake`;
                        break;
                }
                break;

            case 12:
                eventedUser = event.user === 0 ? user1 : user2;

                eventCode = MathService.randomInteger(121, 125);

                switch (eventCode) {
                    case 121:
                        matchLogs[i + 1].players = [];

                        actedPlayer = eventedUser.players[MathService.randomInteger(0, 9)];

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0,
                        });

                        matchLogs[i + 1].result = `Shot off target`;
                        break;

                    case 122:
                        AGIpLength = playersWithSkills[event.user].AGIp.length;

                        if (AGIpLength) actedPlayer = playersWithSkills[event.user].AGIp[MathService.randomInteger(0, AGIpLength - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(5, 9)];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.playerId,
                                playerName: actedPlayer.playerName,
                                position: actedPlayer.position,
                                ratingDiff: 0.2,
                            }
                        ];

                        matchLogs[i + 1].result = `Successful dribbling by ${actedPlayer.playerName}`;
                        break;

                    case 123:
                        matchLogs[i + 1].players = [];

                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];
                        possibleActedPlayers.sort(function (a, b) {
                            return a - b;
                        });

                        actedPlayer = possibleActedPlayers[possibleActedPlayers.length - 1];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.2,
                        });

                        matchLogs[i + 1].result = `Promising cross by ${actedPlayer.playerName}`;
                        break;

                    case 124:
                        matchLogs[i + 1].players = [];

                        TCKLpLength = playersWithSkills[event.user].TCKLp.length;

                        if (TCKLpLength) actedPlayer = playersWithSkills[event.user].TCKLp[MathService.randomInteger(0, TCKLpLength - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(5, 9)];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.2,
                        });

                        matchLogs[i + 1].result = `Interception by ${actedPlayer.playerName}`;
                        break;

                    case 125:
                        matchLogs[i + 1].players = [];

                        PASpLength = playersWithSkills[event.user].PASp.length;

                        if (PASpLength) actedPlayer = playersWithSkills[event.user].PASp[MathService.randomInteger(0, PASpLength - 1)];
                        else {
                            playersOnPositions[event.user].CM.sort(function (a, b) {
                                return a - b;
                            })
                            actedPlayer = playersOnPositions[event.user].CM[playersOnPositions[event.user].CM.length - 1];
                        }
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.2,
                        });

                        matchLogs[i + 1].result = `Promising through pass by ${actedPlayer.playerName}`;
                        break;
                }
                break;

            case 13:
                let chanceNumbers = Math.floor(xG[event.user] / 0.25),
                    goal = MathService.randomInteger(1, 10) <= chanceNumbers ? 1 : 0;

                if (goal) {
                    let scoredPosition, scoredIndex, scoredPlayer, assistantPosition, assistantIndex, assistantPlayer;

                    scoredUser = event.user === 0 ? user1 : user2;
                    anotherUser = event.user === 0 ? user2 : user1;

                    goals[event.user]++;
                    xG[event.user] = Math.max(0, xG[event.user] - 1); //чтобы xG игрока не был меньше 0

                    switch (scoredUser.tactic.teamFocus) {
                        case 'wing-play':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                eventCode = 131;

                                scoredPlayer = playersOnPositions[event.user].FW[0];
                                changeRating(scoredPlayer, 0.8);

                                assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                changeRating(assistantPlayer, 0.8);

                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }


                                matchLogs[i + 1].players = [
                                    {
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerId: assistantPlayer.playerId,
                                        playerName: assistantPlayer.playerName,
                                        position: assistantPlayer.position,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    },
                                ];
                                matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                            }
                            else {
                                eventCode = MathService.randomInteger(131, 136);

                                switch (eventCode) {
                                    case 131:
                                        scoredPlayer = playersOnPositions[event.user].FW[0];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                        assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                        assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.playerId,
                                                playerName: scoredPlayer.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.playerId,
                                                playerName: assistantPlayer.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                                        break;

                                    case 132:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.4);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.4,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`
                                        break;

                                    case 133:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`
                                        break;

                                    case 134:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerId: assistantPlayer.playerId,
                                            playerName: assistantPlayer.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                                        break;

                                    case 135:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`
                                        break;

                                    case 136:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.5,
                                        });

                                        matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`
                                        break;
                                }
                            }
                            break;

                        case 'midfield':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                eventCode = 134;
                                matchLogs[i + 1].players = [];

                                scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                changeRating(scoredPlayer, 0.8);

                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                changeRating(assistantPlayer, 0.8);

                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }

                                matchLogs[i + 1].players.push({
                                    playerId: scoredPlayer.playerId,
                                    playerName: scoredPlayer.playerName,
                                    position: scoredPlayer.position,
                                    role: 'player',
                                    ratingDiff: 0.8,
                                });
                                matchLogs[i + 1].players.push({
                                    playerId: assistantPlayer.playerId,
                                    playerName: assistantPlayer.playerName,
                                    position: assistantPlayer.position,
                                    role: 'assistant',
                                    ratingDiff: 0.8,
                                });
                                matchLogs[i + 1].players.push({
                                    playerName: 'Scored team players',
                                    position: 'Scored team positions',
                                    role: 'none',
                                    ratingDiff: 0.2,
                                });

                                matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                            }
                            else {
                                eventCode = MathService.randomInteger(131, 136);

                                switch (eventCode) {
                                    case 131:
                                        scoredPlayer = playersOnPositions[event.user].FW[0];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                        assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                        assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.playerId,
                                                playerName: scoredPlayer.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.playerId,
                                                playerName: assistantPlayer.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                                        break;

                                    case 132:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.4);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.4,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`
                                        break;

                                    case 133:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`
                                        break;

                                    case 134:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerId: assistantPlayer.playerId,
                                            playerName: assistantPlayer.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                                        break;

                                    case 135:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`
                                        break;

                                    case 136:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.5,
                                        });

                                        matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`
                                        break;
                                }
                            }
                            break;

                        case 'stepUp':
                            eventCode = MathService.randomInteger(131, 136);

                            switch (eventCode) {
                                case 131:
                                    scoredPlayer = playersOnPositions[event.user].FW[0];
                                    changeRating(scoredPlayer, 0.8);

                                    assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                    assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                    assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                    changeRating(assistantPlayer, 0.8);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerId: assistantPlayer.playerId,
                                            playerName: assistantPlayer.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        },
                                    ];
                                    matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                                    break;

                                case 132:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 0.4);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.4,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`
                                    break;

                                case 133:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 1);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 1,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`
                                    break;

                                case 134:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 0.8);

                                    assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                    changeRating(assistantPlayer, 0.8);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerId: assistantPlayer.playerId,
                                        playerName: assistantPlayer.playerName,
                                        position: assistantPlayer.position,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                                    break;

                                case 135:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 1);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 1,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`
                                    break;

                                case 136:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 0.8);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.5,
                                    });

                                    matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`
                                    break;
                            }
                            break;
                    }

                    for (let playerIndex = 0; playerIndex < anotherUser.players.length; playerIndex++) {
                        changeRating(anotherUser.players[playerIndex], -0.2);
                    } // -0.2 всем, кому гол
                    matchLogs[i + 1].players.push({
                        playerName: 'Another team players',
                        position: 'Another team positions',
                        role: 'none',
                        ratingDiff: -0.2,
                    });
                }
                else {
                    eventCode = 130;

                    let anotherUser = event.user === 0 ? user2 : user1;

                    actedPlayer = anotherUser.players[10];
                    changeRating(actedPlayer, 0.4);


                    matchLogs[i + 1].players = [
                        {
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.4,
                        }
                    ];
                    matchLogs[i + 1].result = `Shot on target`;
                }

                matchLogs[i + 1].code = eventCode;
                break;
        }

        matchLogs[i + 1].code = eventCode;
        matchLogs[i + 1].score = goals[0] + '-' + goals[1];
    }
    //первый тайм ===================================================================


    eventsArrs[0].push("==="); //d
    eventsArrs[1].push("==="); //d


    //второй тайм ===================================================================
    momentsCount[0] = Math.round(T[0] / ((T[0] + T[1]) / 15));
    momentsCount[1] = 15 - momentsCount[0];

    for (let i = 48; i <= 90; i += 3) {
        let player = MathService.randomFloat(0, T[0] + T[1]) <= T[0] ? 0 : 1,
            randNum = MathService.randomInteger(1, 10),
            momentType = randNum >= 1 && randNum <= 2 ? 13 : randNum >= 3 && randNum <= 6 ? 12 : 11,
            momentWeight = 0.5 * (momentType - 9);

        if (momentsCount[player] === 0) player = (player + 1) % 2;
        momentsCount[player]--;

        matchEvents.push({
            minute: i,
            player,
            momentType
        });
        T[player] += momentWeight; // чтобы получить вес 1/1.5/2 (11 -9. 12 - 9, 13 - 9)
        xG[player] += momentWeight;

        matchLogs.push({
            minute: i,
            user: player,
            momentType,
            result: ''
        });

        debugLogs.events.push({
            minute: i,
            user: player,
            momentType,
            tDiff: T[0] + '-' + T[1],
            result: '',
            score: ''
        }); //d
        eventsArrs[player].push(momentType); //d
    }

    xG[0] /= 10;
    xG[1] /= 10;

    for (let i = 15; i < 30; i++) {
        let event = matchEvents[i];

        let eventCode,
            eventedUser, scoredUser, anotherUser,
            AGIpLength, TCKLpLength, PASpLength, AGImLength, STAmLength, STAzLength, // для удобства
            actedPlayer, possibleActedPlayers, injuredPlayer;

        switch (event.momentType) {
            case 11:
                eventedUser = event.user === 0 ? user1 : user2;

                eventCode = MathService.randomInteger(111, 115);

                switch (eventCode) {
                    case 111:
                        matchLogs[i + 1].players = [];

                        STAmLength = playersWithSkills[event.user].STAm.length;
                        STAzLength = playersWithSkills[event.user].STAz.length;

                        if (STAmLength) injuredPlayer = playersWithSkills[event.user].STAm[MathService.randomInteger(0, STAmLength - 1)];
                        else if (STAzLength) injuredPlayer = playersWithSkills[event.user].STAz[MathService.randomInteger(0, STAzLength - 1)];
                        else injuredPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(injuredPlayer, -0.2);

                        let anotherUser = eventedUser === user1 ? user2 : user1;
                        actedPlayer = anotherUser.players[MathService.randomInteger(0, 9)];
                        changeRating(actedPlayer, -0.4);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.4,
                        });
                        matchLogs[i + 1].players.push({
                            playerId: injuredPlayer.playerId,
                            playerName: injuredPlayer.playerName,
                            position: injuredPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `${injuredPlayer.playerName} is injured - ${actedPlayer.playerName} will be punished by a yellow card`;
                        break;

                    case 112:
                        matchLogs[i + 1].players = [];

                        AGImLength = playersWithSkills[event.user].AGIm.length;

                        if (AGImLength) actedPlayer = playersWithSkills[event.user].AGIm[MathService.randomInteger(0, AGImLength - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `Unlucky dribbling - ${actedPlayer.playerName}`;
                        break;

                    case 113:
                        matchLogs[i + 1].players = [];

                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];

                        actedPlayer = possibleActedPlayers[MathService.randomInteger(0, possibleActedPlayers.length - 1)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `Unlucky cross - ${actedPlayer.playerName}`;
                        break;

                    case 114:
                        matchLogs[i + 1].players = [];
                        matchLogs[i + 1].result = `Slow passing in the midfield`;
                        break;

                    case 115:
                        matchLogs[i + 1].players = [];

                        actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `${actedPlayer.playerName} made a mistake`;
                        break;
                }
                break;

            case 12:
                eventedUser = event.user === 0 ? user1 : user2;

                eventCode = MathService.randomInteger(121, 125);

                switch (eventCode) {
                    case 121:
                        matchLogs[i + 1].players = [];

                        actedPlayer = eventedUser.players[MathService.randomInteger(0, 9)];

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0,
                        });

                        matchLogs[i + 1].result = `Shot off target`;
                        break;

                    case 122:
                        AGIpLength = playersWithSkills[event.user].AGIp.length;

                        if (AGIpLength) actedPlayer = playersWithSkills[event.user].AGIp[MathService.randomInteger(0, AGIpLength - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(5, 9)];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players = [
                            {
                                playerId: actedPlayer.playerId,
                                playerName: actedPlayer.playerName,
                                position: actedPlayer.position,
                                ratingDiff: 0.2,
                            }
                        ];

                        matchLogs[i + 1].result = `Successful dribbling by ${actedPlayer.playerName}`;
                        break;

                    case 123:
                        matchLogs[i + 1].players = [];

                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];
                        possibleActedPlayers.sort(function (a, b) {
                            return a - b;
                        });

                        actedPlayer = possibleActedPlayers[possibleActedPlayers.length - 1];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.2,
                        });

                        matchLogs[i + 1].result = `Promising cross by ${actedPlayer.playerName}`;
                        break;

                    case 124:
                        matchLogs[i + 1].players = [];

                        TCKLpLength = playersWithSkills[event.user].TCKLp.length;

                        if (TCKLpLength) actedPlayer = playersWithSkills[event.user].TCKLp[MathService.randomInteger(0, TCKLpLength - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(5, 9)];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.2,
                        });

                        matchLogs[i + 1].result = `Interception by ${actedPlayer.playerName}`;
                        break;

                    case 125:
                        matchLogs[i + 1].players = [];

                        PASpLength = playersWithSkills[event.user].PASp.length;

                        if (PASpLength) actedPlayer = playersWithSkills[event.user].PASp[MathService.randomInteger(0, PASpLength - 1)];
                        else {
                            playersOnPositions[event.user].CM.sort(function (a, b) {
                                return a - b;
                            })
                            actedPlayer = playersOnPositions[event.user].CM[playersOnPositions[event.user].CM.length - 1];
                        }
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players.push({
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.2,
                        });

                        matchLogs[i + 1].result = `Promising through pass by ${actedPlayer.playerName}`;
                        break;
                }
                break;

            case 13:
                let chanceNumbers = Math.floor(xG[event.user] / 0.25),
                    goal = MathService.randomInteger(1, 10) <= chanceNumbers ? 1 : 0;

                if (goal) {
                    let scoredPosition, scoredIndex, scoredPlayer, assistantPosition, assistantIndex, assistantPlayer;

                    scoredUser = event.user === 0 ? user1 : user2;
                    anotherUser = event.user === 0 ? user2 : user1;

                    goals[event.user]++;
                    xG[event.user] = Math.max(0, xG[event.user] - 1); //чтобы xG игрока не был меньше 0

                    switch (scoredUser.tactic.teamFocus) {
                        case 'wing-play':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                eventCode = 131;

                                scoredPlayer = playersOnPositions[event.user].FW[0];
                                changeRating(scoredPlayer, 0.8);

                                assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                changeRating(assistantPlayer, 0.8);

                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }


                                matchLogs[i + 1].players = [
                                    {
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerId: assistantPlayer.playerId,
                                        playerName: assistantPlayer.playerName,
                                        position: assistantPlayer.position,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    },
                                ];
                                matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                            }
                            else {
                                eventCode = MathService.randomInteger(131, 136);

                                switch (eventCode) {
                                    case 131:
                                        scoredPlayer = playersOnPositions[event.user].FW[0];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                        assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                        assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.playerId,
                                                playerName: scoredPlayer.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.playerId,
                                                playerName: assistantPlayer.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                                        break;

                                    case 132:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.4);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.4,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`
                                        break;

                                    case 133:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`
                                        break;

                                    case 134:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerId: assistantPlayer.playerId,
                                            playerName: assistantPlayer.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                                        break;

                                    case 135:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`
                                        break;

                                    case 136:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.5,
                                        });

                                        matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`
                                        break;
                                }
                            }
                            break;

                        case 'midfield':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                eventCode = 134;
                                matchLogs[i + 1].players = [];

                                scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                changeRating(scoredPlayer, 0.8);

                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                changeRating(assistantPlayer, 0.8);

                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }

                                matchLogs[i + 1].players.push({
                                    playerId: scoredPlayer.playerId,
                                    playerName: scoredPlayer.playerName,
                                    position: scoredPlayer.position,
                                    role: 'player',
                                    ratingDiff: 0.8,
                                });
                                matchLogs[i + 1].players.push({
                                    playerId: assistantPlayer.playerId,
                                    playerName: assistantPlayer.playerName,
                                    position: assistantPlayer.position,
                                    role: 'assistant',
                                    ratingDiff: 0.8,
                                });
                                matchLogs[i + 1].players.push({
                                    playerName: 'Scored team players',
                                    position: 'Scored team positions',
                                    role: 'none',
                                    ratingDiff: 0.2,
                                });

                                matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                            }
                            else {
                                eventCode = MathService.randomInteger(131, 136);

                                switch (eventCode) {
                                    case 131:
                                        scoredPlayer = playersOnPositions[event.user].FW[0];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                        assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                        assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players = [
                                            {
                                                playerId: scoredPlayer.playerId,
                                                playerName: scoredPlayer.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerId: assistantPlayer.playerId,
                                                playerName: assistantPlayer.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                                        break;

                                    case 132:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.4);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.4,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`
                                        break;

                                    case 133:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`
                                        break;

                                    case 134:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerId: assistantPlayer.playerId,
                                            playerName: assistantPlayer.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                                        break;

                                    case 135:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`
                                        break;

                                    case 136:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.5,
                                        });

                                        matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`
                                        break;
                                }
                            }
                            break;

                        case 'stepUp':
                            eventCode = MathService.randomInteger(131, 136);

                            switch (eventCode) {
                                case 131:
                                    scoredPlayer = playersOnPositions[event.user].FW[0];
                                    changeRating(scoredPlayer, 0.8);

                                    assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                    assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                    assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                    changeRating(assistantPlayer, 0.8);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players = [
                                        {
                                            playerId: scoredPlayer.playerId,
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerId: assistantPlayer.playerId,
                                            playerName: assistantPlayer.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        },
                                    ];
                                    matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                                    break;

                                case 132:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 0.4);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.4,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`
                                    break;

                                case 133:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 1);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 1,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`
                                    break;

                                case 134:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 0.8);

                                    assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                    changeRating(assistantPlayer, 0.8);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerId: assistantPlayer.playerId,
                                        playerName: assistantPlayer.playerName,
                                        position: assistantPlayer.position,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                                    break;

                                case 135:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 1);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 1,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`
                                    break;

                                case 136:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 0.8);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerId: scoredPlayer.playerId,
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.5,
                                    });

                                    matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`
                                    break;
                            }
                            break;
                    }

                    for (let playerIndex = 0; playerIndex < anotherUser.players.length; playerIndex++) {
                        changeRating(anotherUser.players[playerIndex], -0.2);
                    } // -0.2 всем, кому гол
                    matchLogs[i + 1].players.push({
                        playerName: 'Another team players',
                        position: 'Another team positions',
                        role: 'none',
                        ratingDiff: -0.2,
                    });
                }
                else {
                    eventCode = 130;

                    let anotherUser = event.user === 0 ? user2 : user1;

                    actedPlayer = anotherUser.players[10];
                    changeRating(actedPlayer, 0.4);


                    matchLogs[i + 1].players = [
                        {
                            playerId: actedPlayer.playerId,
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.4,
                        }
                    ];
                    matchLogs[i + 1].result = `Shot on target`;
                }

                matchLogs[i + 1].code = eventCode;
                break;
        }

        matchLogs[i + 1].code = eventCode;
        matchLogs[i + 1].score = goals[0] + '-' + goals[1];
        debugLogs.events[i + 1].score = goals[0] + '-' + goals[1];//d
    }
    //второй тайм ===================================================================


    // рассчёт рейтинга игроков за сезон (среднее арифм)===========================
    for (let playerIndex = 0; playerIndex < 11; playerIndex++) {
        let sumOfMarks = [0, 0];

        user1.players[playerIndex].seasonRatingMarks.push(user1.players[playerIndex].matchRating);

        for (let marksIndex = 0; marksIndex < user1.players[playerIndex].seasonRatingMarks.length; marksIndex++) {
            sumOfMarks[0] += user1.players[playerIndex].seasonRatingMarks[marksIndex];
        }

        user1.players[playerIndex].averageRating = Number((sumOfMarks[0] / user1.players[playerIndex].seasonRatingMarks.length).toFixed(2));


        user2.players[playerIndex].seasonRatingMarks.push(user2.players[playerIndex].matchRating);

        for (let marksIndex = 0; marksIndex < user2.players[playerIndex].seasonRatingMarks.length; marksIndex++) {
            sumOfMarks[1] += user2.players[playerIndex].seasonRatingMarks[marksIndex];
        }

        user2.players[playerIndex].averageRating = Number((sumOfMarks[1] / user2.players[playerIndex].seasonRatingMarks.length).toFixed(2));
    }

    function sortById(a, b) {
        if (a.playerId < b.playerId) return -1;
        if (a.playerId > b.playerId) return 1;
        return 0;
    }

    user1.players.sort(sortById);
    user1.resultLastTeam.sort(sortById);
    user1.resultAllPlayers.sort(sortById);

    let allPlayersIndex = 0;
    for (let playerIndex = 0; playerIndex < 11; playerIndex++) {
        user1.resultLastTeam[playerIndex].seasonRatingMarks = user1.players[playerIndex].seasonRatingMarks;
        user1.resultLastTeam[playerIndex].averageRating = user1.players[playerIndex].averageRating;


        while (user1.players[playerIndex].playerId !== user1.resultAllPlayers[allPlayersIndex].playerId) allPlayersIndex++;

        user1.resultAllPlayers[allPlayersIndex].seasonRatingMarks = user1.players[playerIndex].seasonRatingMarks;
        user1.resultAllPlayers[allPlayersIndex].averageRating = user1.players[playerIndex].averageRating;
    }


    user2.players.sort(sortById);
    user2.resultLastTeam.sort(sortById);
    user2.resultAllPlayers.sort(sortById);

    allPlayersIndex = 0;
    for (let playerIndex = 0; playerIndex < 11; playerIndex++) {
        user2.resultLastTeam[playerIndex].seasonRatingMarks = user2.players[playerIndex].seasonRatingMarks;
        user2.resultLastTeam[playerIndex].averageRating = user2.players[playerIndex].averageRating;


        while (user2.players[playerIndex].playerId !== user2.resultAllPlayers[allPlayersIndex].playerId) allPlayersIndex++;

        user2.resultAllPlayers[allPlayersIndex].seasonRatingMarks = user2.players[playerIndex].seasonRatingMarks;
        user2.resultAllPlayers[allPlayersIndex].averageRating = user2.players[playerIndex].averageRating;
    }
    // рассчёт рейтинга игроков за сезон (среднее арифм)===========================


    //debug===========================================================================
    debugLogs.logs = matchLogs; //d
    debugLogs.score = goals[0] + '-' + goals[1]; //d
    debugLogs.user1.totalEvents = eventsArrs[0].join(' '); //d
    debugLogs.user2.totalEvents = eventsArrs[1].join(' '); //d

    let logsText = '';

    logsText += 'Рейтинг карточек перед матчем:\n=============================\n';

    logsText += 'Игрок 1:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${user1.players[i].playerName}: 6.6\n`;
    }
    logsText += '=================\n';

    logsText += 'Игрок 2:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${user2.players[i].playerName}: 6.6\n`;
    }
    logsText += '=================\n';


    logsText += '\n\nЛоги матча:\n=============================\n';
    for (let i = 1; i < matchLogs.length; i++) {
        let playersRatingString = '';

        for (let j = 0; j < matchLogs[i].players.length; j++) {
            playersRatingString += `${matchLogs[i].players[j].playerName} (${matchLogs[i].players[j].ratingDiff}), `;
        }

        playersRatingString = playersRatingString.substring(0, playersRatingString.length - 2);

        logsText += `${matchLogs[i].minute} минута, игрок ${matchLogs[i].user + 1}, событие ${matchLogs[i].momentType}.\nРезультат: ${matchLogs[i].result}.\nИзменение рейтинга: ${playersRatingString}.\n====================================\n`;
    }

    logsText += `\n\nСчёт: ${goals[0]}-${goals[1]}\n`;


    let yellowCards = [[], []];
    for (let i = 1; i < matchLogs.length; i++) {
        let event = matchLogs[i];
        if (event.momentType === 11 && event.result.endsWith('card')) yellowCards[event.user].push({
            actedPlayer: event.players[0].playerName,
            injuredPlayer: event.players[1].playerName,
        });
    }

    logsText += `\n\nЖёлтые карточки:\n\n`;

    logsText += `Игрок 1:\n===============\n`;
    for (let i = 0; i < yellowCards[0].length; i++) {
        logsText += `Injured: ${yellowCards[0][i].injuredPlayer}, Acted: ${yellowCards[0][i].actedPlayer}\n`;
    }
    logsText += `===============\n`;

    logsText += `\nИгрок 2:\n===============\n`;
    for (let i = 0; i < yellowCards[1].length; i++) {
        logsText += `Injured: ${yellowCards[1][i].injuredPlayer}, Acted: ${yellowCards[1][i].actedPlayer}\n`;
    }
    logsText += `===============\n`;


    logsText += '\n\nРейтинг карточек после матча:\n=============================\n';

    logsText += 'Игрок 1:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${user1.players[i].playerName}: ${user1.players[i].matchRating}\n`;
    }
    logsText += '=================\n';

    logsText += 'Игрок 2:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${user2.players[i].playerName}: ${user2.players[i].matchRating}\n`;
    }
    logsText += '=================\n';

    debugLogs.logsText = logsText; //d (логи в удобном формате - строке)
    //debug=================================================
    //debug===========================================================================


    if (saveToDB) {
        let
            user1UpdateLastTeamQuery = prisma.user.update({
                where: {
                    id: user1.id,
                },
                data: {
                    lastTeam: JSON.stringify(user1.resultLastTeam)
                }
            }),
            user1UpdateAllPlayersQuery = prisma.user_players.update({
                where: {
                    userId: user1.id,
                },
                data: {
                    playersJson: JSON.stringify(user1.resultAllPlayers)
                }
            }),
            user2UpdateLastTeamQuery = prisma.user.update({
                where: {
                    id: user2.id,
                },
                data: {
                    lastTeam: JSON.stringify(user2.resultLastTeam)
                }
            }),
            user2UpdateAllPlayersQuery = prisma.user_players.update({
                where: {
                    userId: user2.id,
                },
                data: {
                    playersJson: JSON.stringify(user2.resultAllPlayers)
                }
            }),
            matchUpdateQuery = prisma.match.update({
                where: {
                    id: match.id
                },
                data: {
                    logs: JSON.stringify(matchLogs),
                    score: goals[0] + ':' + goals[1],
                }
            });

        await prisma.$transaction([user1UpdateLastTeamQuery, user1UpdateAllPlayersQuery, user2UpdateLastTeamQuery, user2UpdateAllPlayersQuery, matchUpdateQuery]);
    }

    return debugLogs;
}

async function playDebugMatch_v3(matchId, saveToDB) {
    const match = await prisma.match.findFirst({
        select: {
            id: true,
            player1: {
                select: {
                    id: true,
                    avatar: true,
                    lastTactic: true,
                    lastTeam: true,
                    players: {
                        select: {
                            playersJson: true
                        }
                    },
                },
            },
            player2: {
                select: {
                    id: true,
                    avatar: true,
                    lastTactic: true,
                    lastTeam: true,
                    players: {
                        select: {
                            playersJson: true
                        }
                    },
                }
            },
        },
        where: {
            id: matchId
        },
    });

    let
        matchLogs = [],
        user1 = {
            id: match.player1.id,
            avatar: match.player1.avatar,
            tactic: JSON.parse(match.player1.lastTactic),
            players: JSON.parse(match.player1.lastTeam).map(player => {
                return {
                    id: player.id,
                    playerName: player.playerName,
                    physicalSkills: player.physicalSkills,
                    technicalSkills: player.technicalSkills,
                    mood: player.mood,
                    position: player.position,
                    isGoalKeeper: player.isGoalKeeper,
                    seasonRatingMarks: player.seasonRatingMarks,
                    averageRating: player.averageRating,
                    matchRating: 6.6,
                }
            }),
            resultLastTeam: JSON.parse(match.player1.lastTeam),
            resultAllPlayers: JSON.parse(match.player1.players.playersJson),
        },
        user2 = {
            id: match.player2.id,
            avatar: match.player2.avatar,
            tactic: JSON.parse(match.player2.lastTactic),
            players: JSON.parse(match.player2.lastTeam).map(player => {
                return {
                    id: player.id,
                    playerName: player.playerName,
                    physicalSkills: player.physicalSkills,
                    technicalSkills: player.technicalSkills,
                    mood: player.mood,
                    position: player.position,
                    isGoalKeeper: player.isGoalKeeper,
                    seasonRatingMarks: player.seasonRatingMarks,
                    averageRating: player.averageRating,
                    matchRating: 6.6,
                }
            }),
            resultLastTeam: JSON.parse(match.player2.lastTeam),
            resultAllPlayers: JSON.parse(match.player2.players.playersJson),
        },
        playersOnPositions = [
            {
                'FW': [],
                'WG': [],
                'CM': [],
                'WB': [],
                'CD': [],
                'GK': [],
            },
            {
                'FW': [],
                'WG': [],
                'CM': [],
                'WB': [],
                'CD': [],
                'GK': [],
            }
        ],
        playersWithSkills = [
            {
                AGIp: [],
                TCKLp: [],
                PASp: [],
                STAz: [],
                STAm: [],
                AGIm: [],
            },
            {
                AGIp: [],
                TCKLp: [],
                PASp: [],
                STAz: [],
                STAm: [],
                AGIm: [],
            },
        ],
        T = [0, 0],
        goals = [0, 0],
        eventsArrs = [[], []], //d
        debugLogs = {
            matchId: match.id,
            score: null,
            user1: {
                id: user1.id,
                players: user1.players,
                playersAsm: [],
                homeBonus: 3,
                avatarBonus: 0,
                T: 0,
            },
            user2: {
                id: user2.id,
                players: user2.players,
                playersAsm: [],
                homeBonus: 0,
                avatarBonus: 0,
                T: 0,
            },
            events: []
        }; //d


    user1.players.forEach((player) => {
        //распределение в массивах игроков на позициях
        playersOnPositions[0][player.position].push(player);

        switch (player.position) {
            case 'FW':
                player.technicalSkills.shoot *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.agility *= 3;
                player.physicalSkills.jump *= 3;
                break;

            case 'WG':
                player.technicalSkills.cross *= 3;
                player.technicalSkills.shoot *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.agility *= 3;
                break;

            case 'CM':
                player.technicalSkills.pass *= 3;
                player.physicalSkills.agility *= 3;
                player.physicalSkills.strength *= 3;
                break;

            case 'CD':
                player.technicalSkills.tackling *= 3;
                player.physicalSkills.strength *= 3;
                player.physicalSkills.jump *= 3;
                break;

            case 'WB':
                player.technicalSkills.cross *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.jump *= 3;
                break;
        }

        if (player.physicalSkills.agility === 3) playersWithSkills[0].AGIp.push(player);
        else if (player.physicalSkills.agility === -3) playersWithSkills[0].AGIm.push(player);

        if (player.technicalSkills.tackling === 3) playersWithSkills[0].TCKLp.push(player);

        if (player.technicalSkills.pass === 3) playersWithSkills[0].PASp.push(player);

        if (player.physicalSkills.stamina === -3) playersWithSkills[0].STAm.push(player);
        else if (player.physicalSkills.stamina === 0) playersWithSkills[0].STAz.push(player);


        //получение asm игрока
        let phy = 0, te = 0, asm;

        for (let skill in player.physicalSkills) {
            phy += player.physicalSkills[skill];
        }
        for (let skill in player.technicalSkills) {
            te += player.technicalSkills[skill];
        }

        phy = Math.min(Math.max(1, phy), 5);
        te = Math.min(Math.max(1, te), 5);

        asm = ((phy + te) / 2) + (player.mood / 2);
        asm = Math.min(Math.max(1, asm), 5);

        if (asm % 1 !== 0) {
            asm += 0.5 * (player.mood < 0 ? -1 : 1);
        }

        T[0] += asm;

        debugLogs.user1.playersAsm.push(player.playerName + '=' + asm); //d
    });
    user2.players.forEach((player) => {
        //распределение в массивах игроков на позициях
        playersOnPositions[1][player.position].push(player);

        switch (player.position) {
            case 'FW':
                player.technicalSkills.shoot *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.agility *= 3;
                player.physicalSkills.jump *= 3;
                break;

            case 'WG':
                player.technicalSkills.cross *= 3;
                player.technicalSkills.shoot *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.agility *= 3;
                break;

            case 'CM':
                player.technicalSkills.pass *= 3;
                player.physicalSkills.agility *= 3;
                player.physicalSkills.strength *= 3;
                break;

            case 'CD':
                player.technicalSkills.tackling *= 3;
                player.physicalSkills.strength *= 3;
                player.physicalSkills.jump *= 3;
                break;

            case 'WB':
                player.technicalSkills.cross *= 3;
                player.physicalSkills.pace *= 3;
                player.physicalSkills.jump *= 3;
                break;
        }

        if (player.physicalSkills.agility === 3) playersWithSkills[1].AGIp.push(player);
        else if (player.physicalSkills.agility === -3) playersWithSkills[1].AGIm.push(player);

        if (player.technicalSkills.tackling === 3) playersWithSkills[1].TCKLp.push(player);

        if (player.technicalSkills.pass === 3) playersWithSkills[1].PASp.push(player);

        if (player.physicalSkills.stamina === -3) playersWithSkills[1].STAm.push(player);
        else if (player.physicalSkills.stamina === 0) playersWithSkills[1].STAz.push(player);


        //получение asm игрока
        let phy = 0, te = 0, asm;

        for (let skill in player.physicalSkills) {
            phy += player.physicalSkills[skill];
        }
        for (let skill in player.technicalSkills) {
            te += player.technicalSkills[skill];
        }

        phy = Math.min(Math.max(1, phy), 5);
        te = Math.min(Math.max(1, te), 5);

        asm = ((phy + te) / 2) + (player.mood / 2);
        asm = Math.min(Math.max(1, asm), 5);

        if (asm % 1 !== 0) {
            asm += 0.5 * (player.mood < 0 ? -1 : 1);
        }

        T[1] += asm;


        debugLogs.user2.playersAsm.push(player.playerName + '=' + asm); //d
    });


    function sortPlayers(a, b) {
        if (a.isGoalKeeper) return 1;
        if (b.isGoalKeeper) return -1;

        if (a.averageRating < b.averageRating) return -1;
        if (a.averageRating > b.averageRating) return 1;

        return 0;
    }

    user1.players.sort(sortPlayers);
    user2.players.sort(sortPlayers); // сортировка игроков по возрастанию рейтинга (GK всегда последние)


    T[0] += 3; //доп очки за домашнюю тиму
    if (user1.avatar !== user2.avatar) {
        if (avatarDefying[user1.avatar].includes(user2.avatar)) {
            T[0] += 3;

            debugLogs.user1.avatarBonus = 3;//debug
        }
        else if (avatarDefying[user2.avatar].includes(user1.avatar)) {
            T[1] += 3;

            debugLogs.user2.avatarBonus = 3;//debug
        }
    } // доп очки за контр тренеров

    debugLogs.user1.T = T[0]; //d
    debugLogs.user2.T = T[1]; //d


    let advantage = Math.abs(T[0] - T[1]);
    if (T[0] > T[1]) {
        T[0] += advantage;
    }
    else {
        T[1] += advantage;
    }

    debugLogs.user1.T_adv = T[0]; //d
    debugLogs.user2.T_adv = T[1]; //d


    debugLogs.events.push({
        minute: 0,
        tDiff: T[0] + '-' + T[1],
        result: 'Match started!'
    }); //d
    matchLogs.push({
        minute: 0,
        user: null,
        momentType: null,
        result: 'Match started!'
    });


    function copyArray(array) {
        return JSON.parse(JSON.stringify(array));
    }

    debugLogs.user1PlayersRatingBefore = []; //d
    debugLogs.user2PlayersRatingBefore = []; //d
    for (let i = 0; i < 11; i++) {
        debugLogs.user1PlayersRatingBefore.push({
            id: user1.players[i].id,
            playerName: user1.players[i].playerName,
            matchRating: user1.players[i].matchRating,
            seasonRatingMarks: copyArray(user1.players[i].seasonRatingMarks),
            averageRating: user1.players[i].averageRating,
        });
        debugLogs.user2PlayersRatingBefore.push({
            id: user2.players[i].id,
            playerName: user2.players[i].playerName,
            matchRating: user2.players[i].matchRating,
            seasonRatingMarks: copyArray(user2.players[i].seasonRatingMarks),
            averageRating: user2.players[i].averageRating,
        });
    } //d (рейтинг игроков до матча)


    function changeRating(player, ratingDiff) {
        player.matchRating = Number((player.matchRating + ratingDiff).toFixed(2));
    }

    let momentsCount = [0, 0];


    //первый тайм ===================================================================
    momentsCount[0] = Math.round(T[0] / ((T[0] + T[1]) / 15));
    momentsCount[1] = 15 - momentsCount[0];

    // console.log(T[0], T[1]);
    // console.log(momentsCount[0], momentsCount[1]);

    let matchEvents = [], xG = [0, 0];
    for (let i = 3; i <= 45; i += 3) {
        let player = MathService.randomFloat(0, T[0] + T[1]) <= T[0] ? 0 : 1,
            randNum = MathService.randomInteger(1, 10),
            momentType = randNum >= 1 && randNum <= 2 ? 13 : randNum >= 3 && randNum <= 6 ? 12 : 11,
            momentWeight = 0.5 * (momentType - 9);

        if (momentsCount[player] === 0) player = (player + 1) % 2;
        momentsCount[player]--;

        matchEvents.push({
            minute: i,
            player,
            momentType
        });
        T[player] += momentWeight; // чтобы получить вес 1/1.5/2 (11 -9. 12 - 9, 13 - 9)
        xG[player] += momentWeight;

        matchLogs.push({
            minute: i,
            user: player,
            momentType,
            result: ''
        });

        debugLogs.events.push({
            minute: i,
            user: player,
            momentType,
            tDiff: T[0] + '-' + T[1],
            result: '',
            score: ''
        }); //debug
        eventsArrs[player].push(momentType); //d
    }

    eventsArrs[0].push("==="); //d
    eventsArrs[1].push("==="); //d

    xG[0] /= 10;
    xG[1] /= 10;

    for (let i = 0; i < 15; i++) {
        let event = matchEvents[i];

        let eventedUser, scoredUser,
            AGIpLength, TCKLpLength, PASpLength, AGImLength, STAmLength, STAzLength, // для удобства
            actedPlayer, possibleActedPlayers, injuredPlayer;

        switch (event.momentType) {
            case 11:
                eventedUser = event.user === 0 ? user1 : user2;

                switch (MathService.randomInteger(111, 115)) {
                    case 111:
                        matchLogs[i + 1].players = [];

                        STAmLength = playersWithSkills[event.user].STAm.length;
                        STAzLength = playersWithSkills[event.user].STAz.length;

                        if (STAmLength) injuredPlayer = playersWithSkills[event.user].STAm[MathService.randomInteger(0, STAmLength - 1)];
                        else if (STAzLength) injuredPlayer = playersWithSkills[event.user].STAz[MathService.randomInteger(0, STAzLength - 1)];
                        else injuredPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(injuredPlayer, -0.2);

                        let anotherUser = eventedUser === user1 ? user2 : user1;
                        actedPlayer = anotherUser.players[MathService.randomInteger(0, 9)];
                        changeRating(actedPlayer, -0.4);

                        matchLogs[i + 1].players.push({
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.4,
                        });
                        matchLogs[i + 1].players.push({
                            playerName: injuredPlayer.playerName,
                            position: injuredPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `${injuredPlayer.playerName} is injured - ${actedPlayer.playerName} will be punished by a yellow card`;
                        break;

                    case 112:
                        matchLogs[i + 1].players = [];

                        AGImLength = playersWithSkills[event.user].AGIm.length;

                        if (AGImLength) actedPlayer = playersWithSkills[event.user].AGIm[MathService.randomInteger(0, AGImLength - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].players.push({
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `Unlucky dribbling - ${actedPlayer.playerName}`;
                        break;

                    case 113:
                        matchLogs[i + 1].players = [];

                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];

                        actedPlayer = possibleActedPlayers[MathService.randomInteger(0, possibleActedPlayers.length - 1)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].players.push({
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `Unlucky cross - ${actedPlayer.playerName}`;
                        break;

                    case 114:
                        matchLogs[i + 1].players = [];
                        matchLogs[i + 1].result = `Slow passing in the midfield`;
                        break;

                    case 115:
                        matchLogs[i + 1].players = [];

                        actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].players.push({
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `${actedPlayer.playerName} made a mistake`;
                        break;
                }

                debugLogs.events[i + 1].result = matchLogs[i + 1].result; //d
                debugLogs.events[i + 1].players = matchLogs[i + 1].players; //d
                break;

            case 12:
                eventedUser = event.user === 0 ? user1 : user2;

                switch (MathService.randomInteger(121, 125)) {
                    case 121:
                        matchLogs[i + 1].players = [];

                        actedPlayer = eventedUser.players[MathService.randomInteger(0, 9)];

                        matchLogs[i + 1].players.push({
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0,
                        });

                        matchLogs[i + 1].result = `Shot off target`;
                        break;

                    case 122:
                        AGIpLength = playersWithSkills[event.user].AGIp.length;

                        if (AGIpLength) actedPlayer = playersWithSkills[event.user].AGIp[MathService.randomInteger(0, AGIpLength - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(5, 9)];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players = [
                            {
                                playerName: actedPlayer.playerName,
                                position: actedPlayer.position,
                                ratingDiff: 0.2,
                            }
                        ];

                        matchLogs[i + 1].result = `Successful dribbling by ${actedPlayer.playerName}`;
                        break;

                    case 123:
                        matchLogs[i + 1].players = [];

                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];
                        possibleActedPlayers.sort(function (a, b) {
                            return a - b;
                        });

                        actedPlayer = possibleActedPlayers[possibleActedPlayers.length - 1];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players.push({
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.2,
                        });

                        matchLogs[i + 1].result = `Promising cross by ${actedPlayer.playerName}`;
                        break;

                    case 124:
                        matchLogs[i + 1].players = [];

                        TCKLpLength = playersWithSkills[event.user].TCKLp.length;

                        if (TCKLpLength) actedPlayer = playersWithSkills[event.user].TCKLp[MathService.randomInteger(0, TCKLpLength - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(5, 9)];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players.push({
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.2,
                        });

                        matchLogs[i + 1].result = `Interception by ${actedPlayer.playerName}`;
                        break;

                    case 125:
                        matchLogs[i + 1].players = [];

                        PASpLength = playersWithSkills[event.user].PASp.length;

                        if (PASpLength) actedPlayer = playersWithSkills[event.user].PASp[MathService.randomInteger(0, PASpLength - 1)];
                        else {
                            playersOnPositions[event.user].CM.sort(function (a, b) {
                                return a - b;
                            })
                            actedPlayer = playersOnPositions[event.user].CM[playersOnPositions[event.user].CM.length - 1];
                        }
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players.push({
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.2,
                        });

                        matchLogs[i + 1].result = `Promising through pass by ${actedPlayer.playerName}`;
                        break;
                }

                debugLogs.events[i + 1].result = matchLogs[i + 1].result; //d
                debugLogs.events[i + 1].players = matchLogs[i + 1].players; //d
                break;

            case 13:
                let chanceNumbers = Math.floor(xG[event.user] / 0.25),
                    goal = MathService.randomInteger(1, 10) <= chanceNumbers ? 1 : 0;

                if (goal) {
                    goals[event.user]++;
                    xG[event.user] = Math.max(0, xG[event.user] - 1); //чтобы xG игрока не был меньше 0

                    scoredUser = event.user === 0 ? user1 : user2;


                    let scoredPosition, scoredIndex, scoredPlayer, assistantPosition, assistantIndex, assistantPlayer;
                    switch (scoredUser.tactic.teamFocus) {
                        case 'wing-play':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                scoredPlayer = playersOnPositions[event.user].FW[0];
                                changeRating(scoredPlayer, 0.8);

                                assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                changeRating(assistantPlayer, 0.8);

                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }

                                matchLogs[i + 1].players = [
                                    {
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerName: assistantPlayer.playerName,
                                        position: assistantPlayer.position,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    },
                                ];
                                matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                            }
                            else {
                                switch (MathService.randomInteger(1, 6)) {
                                    case 1:
                                        scoredPlayer = playersOnPositions[event.user].FW[0];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                        assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                        assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players = [
                                            {
                                                playerName: scoredPlayer.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: assistantPlayer.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                                        break;

                                    case 2:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.4);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.4,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`
                                        break;

                                    case 3:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`
                                        break;

                                    case 4:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: assistantPlayer.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                                        break;

                                    case 5:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`
                                        break;

                                    case 6:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.5,
                                        });

                                        matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`
                                        break;
                                }
                            }
                            break;

                        case 'midfield':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                matchLogs[i + 1].players = [];

                                scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                changeRating(scoredPlayer, 0.8);

                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                changeRating(assistantPlayer, 0.8);

                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }

                                matchLogs[i + 1].players.push({
                                    playerName: scoredPlayer.playerName,
                                    position: scoredPlayer.position,
                                    role: 'player',
                                    ratingDiff: 0.8,
                                });
                                matchLogs[i + 1].players.push({
                                    playerName: assistantPlayer.playerName,
                                    position: assistantPlayer.position,
                                    role: 'assistant',
                                    ratingDiff: 0.8,
                                });
                                matchLogs[i + 1].players.push({
                                    playerName: 'Scored team players',
                                    position: 'Scored team positions',
                                    role: 'none',
                                    ratingDiff: 0.2,
                                });

                                matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                            }
                            else {
                                switch (MathService.randomInteger(1, 6)) {
                                    case 1:
                                        scoredPlayer = playersOnPositions[event.user].FW[0];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                        assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                        assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players = [
                                            {
                                                playerName: scoredPlayer.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: assistantPlayer.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                                        break;

                                    case 2:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.4);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.4,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`
                                        break;

                                    case 3:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`
                                        break;

                                    case 4:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: assistantPlayer.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                                        break;

                                    case 5:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`
                                        break;

                                    case 6:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.5,
                                        });

                                        matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`
                                        break;
                                }
                            }
                            break;

                        case 'stepUp':
                            switch (MathService.randomInteger(1, 6)) {
                                case 1:
                                    scoredPlayer = playersOnPositions[event.user].FW[0];
                                    changeRating(scoredPlayer, 0.8);

                                    assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                    assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                    assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                    changeRating(assistantPlayer, 0.8);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players = [
                                        {
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: assistantPlayer.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        },
                                    ];
                                    matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                                    break;

                                case 2:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 0.4);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.4,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`
                                    break;

                                case 3:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 1);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 1,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`
                                    break;

                                case 4:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 0.8);

                                    assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                    changeRating(assistantPlayer, 0.8);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: assistantPlayer.playerName,
                                        position: assistantPlayer.position,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                                    break;

                                case 5:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 1);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 1,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`
                                    break;

                                case 6:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 0.8);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.5,
                                    });

                                    matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`
                                    break;
                            }
                            break;
                    }
                }
                else {
                    let anotherUser = event.user === 0 ? user2 : user1;

                    actedPlayer = anotherUser.players[10];
                    changeRating(actedPlayer, 0.4);


                    matchLogs[i + 1].players = [
                        {
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.4,
                        }
                    ];
                    matchLogs[i + 1].result = `Shot on target`;
                }

                debugLogs.events[i + 1].result = matchLogs[i + 1].result; //d
                debugLogs.events[i + 1].players = matchLogs[i + 1].players; //d
                break;
        }

        matchLogs[i + 1].score = goals[0] + '-' + goals[1];
        debugLogs.events[i + 1].score = goals[0] + '-' + goals[1];//d
    }
    //первый тайм ===================================================================


    //второй тайм ===================================================================
    momentsCount[0] = Math.round(T[0] / ((T[0] + T[1]) / 15));
    momentsCount[1] = 15 - momentsCount[0];

    // console.log(T[0], T[1]);
    // console.log(momentsCount[0], momentsCount[1]);

    for (let i = 48; i <= 90; i += 3) {
        let player = MathService.randomFloat(0, T[0] + T[1]) <= T[0] ? 0 : 1,
            randNum = MathService.randomInteger(1, 10),
            momentType = randNum >= 1 && randNum <= 2 ? 13 : randNum >= 3 && randNum <= 6 ? 12 : 11,
            momentWeight = 0.5 * (momentType - 9);

        if (momentsCount[player] === 0) player = (player + 1) % 2;
        momentsCount[player]--;

        matchEvents.push({
            minute: i,
            player,
            momentType
        });
        T[player] += momentWeight; // чтобы получить вес 1/1.5/2 (11 -9. 12 - 9, 13 - 9)
        xG[player] += momentWeight;

        matchLogs.push({
            minute: i,
            user: player,
            momentType,
            result: ''
        });

        debugLogs.events.push({
            minute: i,
            user: player,
            momentType,
            tDiff: T[0] + '-' + T[1],
            result: '',
            score: ''
        }); //d
        eventsArrs[player].push(momentType); //d
    }

    xG[0] /= 10;
    xG[1] /= 10;

    for (let i = 15; i < 30; i++) {
        let event = matchEvents[i];

        let eventedUser, scoredUser,
            AGIpLength, TCKLpLength, PASpLength, AGImLength, STAmLength, STAzLength, // для удобства
            actedPlayer, possibleActedPlayers, injuredPlayer;

        switch (event.momentType) {
            case 11:
                eventedUser = event.user === 0 ? user1 : user2;

                switch (MathService.randomInteger(111, 115)) {
                    case 111:
                        matchLogs[i + 1].players = [];

                        STAmLength = playersWithSkills[event.user].STAm.length;
                        STAzLength = playersWithSkills[event.user].STAz.length;

                        if (STAmLength) injuredPlayer = playersWithSkills[event.user].STAm[MathService.randomInteger(0, STAmLength - 1)];
                        else if (STAzLength) injuredPlayer = playersWithSkills[event.user].STAz[MathService.randomInteger(0, STAzLength - 1)];
                        else injuredPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(injuredPlayer, -0.2);

                        let anotherUser = eventedUser === user1 ? user2 : user1;
                        actedPlayer = anotherUser.players[MathService.randomInteger(0, 9)];
                        changeRating(actedPlayer, -0.4);

                        matchLogs[i + 1].players.push({
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.4,
                        });
                        matchLogs[i + 1].players.push({
                            playerName: injuredPlayer.playerName,
                            position: injuredPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `${injuredPlayer.playerName} is injured - ${actedPlayer.playerName} will be punished by a yellow card`;
                        break;

                    case 112:
                        matchLogs[i + 1].players = [];

                        AGImLength = playersWithSkills[event.user].AGIm.length;

                        if (AGImLength) actedPlayer = playersWithSkills[event.user].AGIm[MathService.randomInteger(0, AGImLength - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].players.push({
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `Unlucky dribbling - ${actedPlayer.playerName}`;
                        break;

                    case 113:
                        matchLogs[i + 1].players = [];

                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];

                        actedPlayer = possibleActedPlayers[MathService.randomInteger(0, possibleActedPlayers.length - 1)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].players.push({
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `Unlucky cross - ${actedPlayer.playerName}`;
                        break;

                    case 114:
                        matchLogs[i + 1].players = [];
                        matchLogs[i + 1].result = `Slow passing in the midfield`;
                        break;

                    case 115:
                        matchLogs[i + 1].players = [];

                        actedPlayer = eventedUser.players[MathService.randomInteger(0, 4)];
                        changeRating(actedPlayer, -0.2);

                        matchLogs[i + 1].players.push({
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: -0.2,
                        });

                        matchLogs[i + 1].result = `${actedPlayer.playerName} made a mistake`;
                        break;
                }

                debugLogs.events[i + 1].result = matchLogs[i + 1].result; //d
                debugLogs.events[i + 1].players = matchLogs[i + 1].players; //d
                break;

            case 12:
                eventedUser = event.user === 0 ? user1 : user2;

                switch (MathService.randomInteger(121, 125)) {
                    case 121:
                        matchLogs[i + 1].players = [];

                        actedPlayer = eventedUser.players[MathService.randomInteger(0, 9)];

                        matchLogs[i + 1].players.push({
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0,
                        });

                        matchLogs[i + 1].result = `Shot off target`;
                        break;

                    case 122:
                        AGIpLength = playersWithSkills[event.user].AGIp.length;

                        if (AGIpLength) actedPlayer = playersWithSkills[event.user].AGIp[MathService.randomInteger(0, AGIpLength - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(5, 9)];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players = [
                            {
                                playerName: actedPlayer.playerName,
                                position: actedPlayer.position,
                                ratingDiff: 0.2,
                            }
                        ];

                        matchLogs[i + 1].result = `Successful dribbling by ${actedPlayer.playerName}`;
                        break;

                    case 123:
                        matchLogs[i + 1].players = [];

                        possibleActedPlayers = [...playersOnPositions[event.user].WG, ...playersOnPositions[event.user].WB];
                        possibleActedPlayers.sort(function (a, b) {
                            return a - b;
                        });

                        actedPlayer = possibleActedPlayers[possibleActedPlayers.length - 1];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players.push({
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.2,
                        });

                        matchLogs[i + 1].result = `Promising cross by ${actedPlayer.playerName}`;
                        break;

                    case 124:
                        matchLogs[i + 1].players = [];

                        TCKLpLength = playersWithSkills[event.user].TCKLp.length;

                        if (TCKLpLength) actedPlayer = playersWithSkills[event.user].TCKLp[MathService.randomInteger(0, TCKLpLength - 1)];
                        else actedPlayer = eventedUser.players[MathService.randomInteger(5, 9)];
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players.push({
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.2,
                        });

                        matchLogs[i + 1].result = `Interception by ${actedPlayer.playerName}`;
                        break;

                    case 125:
                        matchLogs[i + 1].players = [];

                        PASpLength = playersWithSkills[event.user].PASp.length;

                        if (PASpLength) actedPlayer = playersWithSkills[event.user].PASp[MathService.randomInteger(0, PASpLength - 1)];
                        else {
                            playersOnPositions[event.user].CM.sort(function (a, b) {
                                return a - b;
                            })
                            actedPlayer = playersOnPositions[event.user].CM[playersOnPositions[event.user].CM.length - 1];
                        }
                        changeRating(actedPlayer, 0.2);

                        matchLogs[i + 1].players.push({
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.2,
                        });

                        matchLogs[i + 1].result = `Promising through pass by ${actedPlayer.playerName}`;
                        break;
                }

                debugLogs.events[i + 1].result = matchLogs[i + 1].result; //d
                debugLogs.events[i + 1].players = matchLogs[i + 1].players; //d
                break;

            case 13:
                let chanceNumbers = Math.floor(xG[event.user] / 0.25),
                    goal = MathService.randomInteger(1, 10) <= chanceNumbers ? 1 : 0;

                if (goal) {
                    goals[event.user]++;
                    xG[event.user] = Math.max(0, xG[event.user] - 1); //чтобы xG игрока не был меньше 0

                    scoredUser = event.user === 0 ? user1 : user2;


                    let scoredPosition, scoredIndex, scoredPlayer, assistantPosition, assistantIndex, assistantPlayer;
                    switch (scoredUser.tactic.teamFocus) {
                        case 'wing-play':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                scoredPlayer = playersOnPositions[event.user].FW[0];
                                changeRating(scoredPlayer, 0.8);

                                assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                changeRating(assistantPlayer, 0.8);

                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }

                                matchLogs[i + 1].players = [
                                    {
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerName: assistantPlayer.playerName,
                                        position: assistantPlayer.position,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    },
                                    {
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    },
                                ];
                                matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                            }
                            else {
                                switch (MathService.randomInteger(1, 6)) {
                                    case 1:
                                        scoredPlayer = playersOnPositions[event.user].FW[0];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                        assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                        assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players = [
                                            {
                                                playerName: scoredPlayer.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: assistantPlayer.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                                        break;

                                    case 2:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.4);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.4,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });
                                        matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`
                                        break;

                                    case 3:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`
                                        break;

                                    case 4:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: assistantPlayer.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                                        break;

                                    case 5:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`
                                        break;

                                    case 6:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.5,
                                        });

                                        matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`
                                        break;
                                }
                            }
                            break;

                        case 'midfield':
                            if (MathService.randomInteger(1, 3) <= 2) {
                                matchLogs[i + 1].players = [];

                                scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                changeRating(scoredPlayer, 0.8);

                                assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                changeRating(assistantPlayer, 0.8);

                                for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                    let currPlayer = scoredUser.players[playerIndex];
                                    if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                }

                                matchLogs[i + 1].players.push({
                                    playerName: scoredPlayer.playerName,
                                    position: scoredPlayer.position,
                                    role: 'player',
                                    ratingDiff: 0.8,
                                });
                                matchLogs[i + 1].players.push({
                                    playerName: assistantPlayer.playerName,
                                    position: assistantPlayer.position,
                                    role: 'assistant',
                                    ratingDiff: 0.8,
                                });
                                matchLogs[i + 1].players.push({
                                    playerName: 'Scored team players',
                                    position: 'Scored team positions',
                                    role: 'none',
                                    ratingDiff: 0.2,
                                });

                                matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                            }
                            else {
                                switch (MathService.randomInteger(1, 6)) {
                                    case 1:
                                        scoredPlayer = playersOnPositions[event.user].FW[0];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                        assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                        assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players = [
                                            {
                                                playerName: scoredPlayer.playerName,
                                                position: scoredPlayer.position,
                                                role: 'player',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: assistantPlayer.playerName,
                                                position: assistantPlayer.position,
                                                role: 'assistant',
                                                ratingDiff: 0.8,
                                            },
                                            {
                                                playerName: 'Scored team players',
                                                position: 'Scored team positions',
                                                role: 'none',
                                                ratingDiff: 0.2,
                                            },
                                        ];
                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                                        break;

                                    case 2:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.4);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.4,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`
                                        break;

                                    case 3:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`
                                        break;

                                    case 4:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                        changeRating(assistantPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: assistantPlayer.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                                        break;

                                    case 5:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 1);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 1,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        });

                                        matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`
                                        break;

                                    case 6:
                                        matchLogs[i + 1].players = [];

                                        scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                        scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                        scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                        changeRating(scoredPlayer, 0.8);

                                        for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                            let currPlayer = scoredUser.players[playerIndex];
                                            if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                        }

                                        matchLogs[i + 1].players.push({
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        });
                                        matchLogs[i + 1].players.push({
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.5,
                                        });

                                        matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`
                                        break;
                                }
                            }
                            break;

                        case 'stepUp':
                            switch (MathService.randomInteger(1, 6)) {
                                case 1:
                                    scoredPlayer = playersOnPositions[event.user].FW[0];
                                    changeRating(scoredPlayer, 0.8);

                                    assistantPosition = MathService.randomInteger(1, 2) === 1 ? 'WG' : 'WB';
                                    assistantIndex = MathService.randomInteger(0, playersOnPositions[event.user][assistantPosition].length - 1);
                                    assistantPlayer = playersOnPositions[event.user][assistantPosition][assistantIndex];
                                    changeRating(assistantPlayer, 0.8);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players = [
                                        {
                                            playerName: scoredPlayer.playerName,
                                            position: scoredPlayer.position,
                                            role: 'player',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: assistantPlayer.playerName,
                                            position: assistantPlayer.position,
                                            role: 'assistant',
                                            ratingDiff: 0.8,
                                        },
                                        {
                                            playerName: 'Scored team players',
                                            position: 'Scored team positions',
                                            role: 'none',
                                            ratingDiff: 0.2,
                                        },
                                    ];
                                    matchLogs[i + 1].result = `${scoredPlayer.playerName} scores a header delivered by ${assistantPlayer.playerName}`;
                                    break;

                                case 2:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 0.4);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.4,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `Spectacular powershot by ${scoredPlayer.playerName}`
                                    break;

                                case 3:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 1);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 1,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `${scoredPlayer.playerName} scores after solo breakthrough`
                                    break;

                                case 4:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 0.8);

                                    assistantPlayer = playersOnPositions[event.user].CM[MathService.randomInteger(0, playersOnPositions[event.user].CM.length - 1)];
                                    changeRating(assistantPlayer, 0.8);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer && currPlayer !== assistantPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: assistantPlayer.playerName,
                                        position: assistantPlayer.position,
                                        role: 'assistant',
                                        ratingDiff: 0.8,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} runs and ${assistantPlayer.playerName} provides an assist`
                                    break;

                                case 5:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 1);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.2);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 1,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.2,
                                    });

                                    matchLogs[i + 1].result = `Goal! ${scoredPlayer.playerName} used opponent’s silly mistake`
                                    break;

                                case 6:
                                    matchLogs[i + 1].players = [];

                                    scoredPosition = MathService.randomInteger(1, 2) === 1 ? 'FW' : 'WG';
                                    scoredIndex = MathService.randomInteger(0, playersOnPositions[event.user][scoredPosition].length - 1);
                                    scoredPlayer = playersOnPositions[event.user][scoredPosition][scoredIndex];
                                    changeRating(scoredPlayer, 0.8);

                                    for (let playerIndex = 0; playerIndex < scoredUser.players.length; playerIndex++) {
                                        let currPlayer = scoredUser.players[playerIndex];
                                        if (currPlayer !== scoredPlayer) changeRating(currPlayer, 0.5);
                                    }

                                    matchLogs[i + 1].players.push({
                                        playerName: scoredPlayer.playerName,
                                        position: scoredPlayer.position,
                                        role: 'player',
                                        ratingDiff: 0.8,
                                    });
                                    matchLogs[i + 1].players.push({
                                        playerName: 'Scored team players',
                                        position: 'Scored team positions',
                                        role: 'none',
                                        ratingDiff: 0.5,
                                    });

                                    matchLogs[i + 1].result = `Goal! Brilliant team-play finished by ${scoredPlayer.playerName}`
                                    break;
                            }
                            break;
                    }
                }
                else {
                    let anotherUser = event.user === 0 ? user2 : user1;

                    actedPlayer = anotherUser.players[10];
                    changeRating(actedPlayer, 0.4);


                    matchLogs[i + 1].players = [
                        {
                            playerName: actedPlayer.playerName,
                            position: actedPlayer.position,
                            ratingDiff: 0.4,
                        }
                    ];
                    matchLogs[i + 1].result = `Shot on target`;
                }

                debugLogs.events[i + 1].result = matchLogs[i + 1].result; //d
                debugLogs.events[i + 1].players = matchLogs[i + 1].players; //d
                break;
        }

        matchLogs[i + 1].score = goals[0] + '-' + goals[1];
        debugLogs.events[i + 1].score = goals[0] + '-' + goals[1];//d
    }
    //второй тайм ===================================================================


    // рассчёт рейтинга игроков за сезон (среднее арифм)===========================
    for (let playerIndex = 0; playerIndex < 11; playerIndex++) {
        let sumOfMarks = [0, 0];

        user1.players[playerIndex].seasonRatingMarks.push(user1.players[playerIndex].matchRating);

        for (let marksIndex = 0; marksIndex < user1.players[playerIndex].seasonRatingMarks.length; marksIndex++) {
            sumOfMarks[0] += user1.players[playerIndex].seasonRatingMarks[marksIndex];
        }

        user1.players[playerIndex].averageRating = Number((sumOfMarks[0] / user1.players[playerIndex].seasonRatingMarks.length).toFixed(2));


        user2.players[playerIndex].seasonRatingMarks.push(user2.players[playerIndex].matchRating);

        for (let marksIndex = 0; marksIndex < user2.players[playerIndex].seasonRatingMarks.length; marksIndex++) {
            sumOfMarks[1] += user2.players[playerIndex].seasonRatingMarks[marksIndex];
        }

        user2.players[playerIndex].averageRating = Number((sumOfMarks[1] / user2.players[playerIndex].seasonRatingMarks.length).toFixed(2));
    }

    function sortById(a, b) {
        if (a.id < b.id) return -1;
        if (a.id > b.id) return 1;
        return 0;
    }

    user1.players.sort(sortById);
    user1.resultLastTeam.sort(sortById);
    user1.resultAllPlayers.sort(sortById);

    let allPlayersIndex = 0;
    for (let playerIndex = 0; playerIndex < 11; playerIndex++) {
        user1.resultLastTeam[playerIndex].seasonRatingMarks = user1.players[playerIndex].seasonRatingMarks;
        user1.resultLastTeam[playerIndex].averageRating = user1.players[playerIndex].averageRating;


        while (user1.players[playerIndex].id !== user1.resultAllPlayers[allPlayersIndex].id) allPlayersIndex++;

        user1.resultAllPlayers[allPlayersIndex].seasonRatingMarks = user1.players[playerIndex].seasonRatingMarks;
        user1.resultAllPlayers[allPlayersIndex].averageRating = user1.players[playerIndex].averageRating;
    }


    user2.players.sort(sortById);
    user2.resultLastTeam.sort(sortById);
    user2.resultAllPlayers.sort(sortById);

    allPlayersIndex = 0;
    for (let playerIndex = 0; playerIndex < 11; playerIndex++) {
        user2.resultLastTeam[playerIndex].seasonRatingMarks = user2.players[playerIndex].seasonRatingMarks;
        user2.resultLastTeam[playerIndex].averageRating = user2.players[playerIndex].averageRating;


        while (user2.players[playerIndex].id !== user2.resultAllPlayers[allPlayersIndex].id) allPlayersIndex++;

        user2.resultAllPlayers[allPlayersIndex].seasonRatingMarks = user2.players[playerIndex].seasonRatingMarks;
        user2.resultAllPlayers[allPlayersIndex].averageRating = user2.players[playerIndex].averageRating;
    }
    // рассчёт рейтинга игроков за сезон (среднее арифм)===========================


    if (saveToDB) {
        let
            user1UpdateLastTeamQuery = prisma.user.update({
                where: {
                    id: user1.id,
                },
                data: {
                    lastTeam: JSON.stringify(user1.resultLastTeam)
                }
            }),
            user1UpdateAllPlayersQuery = prisma.user_players.update({
                where: {
                    userId: user1.id,
                },
                data: {
                    playersJson: JSON.stringify(user1.resultAllPlayers)
                }
            }),
            user2UpdateLastTeamQuery = prisma.user.update({
                where: {
                    id: user2.id,
                },
                data: {
                    lastTeam: JSON.stringify(user2.resultLastTeam)
                }
            }),
            user2UpdateAllPlayersQuery = prisma.user_players.update({
                where: {
                    userId: user2.id,
                },
                data: {
                    playersJson: JSON.stringify(user2.resultAllPlayers)
                }
            }),
            matchUpdateQuery = prisma.match.update({
                where: {
                    id: match.id
                },
                data: {
                    logs: JSON.stringify(matchLogs),
                    score: goals[0] + ':' + goals[1],
                }
            });

        await prisma.$transaction([user1UpdateLastTeamQuery, user1UpdateAllPlayersQuery, user2UpdateLastTeamQuery, user2UpdateAllPlayersQuery, matchUpdateQuery])
    }


    //debug=================================================
    debugLogs.score = goals[0] + '-' + goals[1]; //d
    debugLogs.user1.totalEvents = eventsArrs[0].join(' '); //d
    debugLogs.user2.totalEvents = eventsArrs[1].join(' '); //d
    debugLogs.user1PlayersRatingAfter = []; //d
    debugLogs.user2PlayersRatingAfter = []; //d
    for (let i = 0; i < 11; i++) {
        debugLogs.user1PlayersRatingAfter.push({
            id: user1.players[i].id,
            playerName: user1.players[i].playerName,
            matchRating: user1.players[i].matchRating,
            seasonRatingMarks: copyArray(user1.players[i].seasonRatingMarks),
            averageRating: user1.players[i].averageRating,
        });
        debugLogs.user2PlayersRatingAfter.push({
            id: user2.players[i].id,
            playerName: user2.players[i].playerName,
            matchRating: user2.players[i].matchRating,
            seasonRatingMarks: copyArray(user2.players[i].seasonRatingMarks),
            averageRating: user2.players[i].averageRating,
        });
    } //d (рейтинг игроков после матча)


    let logsText = '';

    logsText += 'Рейтинг карточек перед матчем:\n=============================\n';

    logsText += 'Игрок 1:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${user1.players[i].playerName}: 6.6\n`;
    }
    logsText += '=================\n';

    logsText += 'Игрок 2:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${user2.players[i].playerName}: 6.6\n`;
    }
    logsText += '=================\n';


    logsText += '\n\nЛоги матча:\n=============================\n';
    for (let i = 1; i < matchLogs.length; i++) {
        let playersRatingString = '';

        for (let j = 0; j < matchLogs[i].players.length; j++) {
            playersRatingString += `${matchLogs[i].players[j].playerName} (${matchLogs[i].players[j].ratingDiff}), `;
        }

        playersRatingString = playersRatingString.substring(0, playersRatingString.length - 2);

        logsText += `${matchLogs[i].minute} минута, игрок ${matchLogs[i].user + 1}, событие ${matchLogs[i].momentType}.\nРезультат: ${matchLogs[i].result}.\nИзменение рейтинга: ${playersRatingString}.\n====================================\n`;
    }

    logsText += `\n\nСчёт: ${goals[0]}-${goals[1]}\n`;


    let yellowCards = [[], []];
    for (let i = 1; i < matchLogs.length; i++) {
        let event = matchLogs[i];
        if (event.momentType === 11 && event.result.endsWith('card')) yellowCards[event.user].push({
            actedPlayer: event.players[0].playerName,
            injuredPlayer: event.players[1].playerName,
        });
    }

    logsText += `\n\nЖёлтые карточки:\n\n`;

    logsText += `Игрок 1:\n===============\n`;
    for (let i = 0; i < yellowCards[0].length; i++) {
        logsText += `Injured: ${yellowCards[0][i].injuredPlayer}, Acted: ${yellowCards[0][i].actedPlayer}\n`;
    }
    logsText += `===============\n`;

    logsText += `\nИгрок 2:\n===============\n`;
    for (let i = 0; i < yellowCards[1].length; i++) {
        logsText += `Injured: ${yellowCards[1][i].injuredPlayer}, Acted: ${yellowCards[1][i].actedPlayer}\n`;
    }
    logsText += `===============\n`;


    logsText += '\n\nРейтинг карточек после матча:\n=============================\n';

    logsText += 'Игрок 1:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${user1.players[i].playerName}: ${user1.players[i].matchRating}\n`;
    }
    logsText += '=================\n';

    logsText += 'Игрок 2:\n=================\n';
    for (let i = 0; i < 11; i++) {
        logsText += `${user2.players[i].playerName}: ${user2.players[i].matchRating}\n`;
    }
    logsText += '=================\n';

    debugLogs.logs = matchLogs;
    debugLogs.logsText = logsText; //d (логи в удобном формате - строке)
    //debug=================================================
    //debug=================================================

    return debugLogs;
}


async function playDebugMatches(mode, order, writeToDb, writeToFile) {
    let where, orderBy;

    switch (mode) {
        case 'current':
            let datetime = new Date();
            datetime.setHours(datetime.getHours() + 1, 0, 0, 0);
            where = {
                time: datetime,
                score: null
            };
            break;

        case 'late':
            where = {
                time: {
                    lte: new Date()
                },
                score: null
            };
            break;

        case 'all':
            where = {};
            break;

        default:
            console.log('Invalid mode argument!');
            return;
    }

    switch (order) {
        case 'ordbyid':
            orderBy = {
                id: 'asc'
            };
            break;

        case 'ordbyplayer1':
            orderBy = [
                {
                    player1: {
                        id: 'asc'
                    }
                },
                {
                    id: 'asc',
                },
            ];
            break;

        default:
            console.log('Invalid mode argument!');
            return;
    }

    const matches = await prisma.match.findMany({
        select: {
            id: true,
            player1: {
                select: {
                    id: true,
                    avatar: true,
                    lastTactic: true,
                    lastTeam: true,
                },
            },
            player2: {
                select: {
                    id: true,
                    avatar: true,
                    lastTactic: true,
                    lastTeam: true,
                }
            },
        },
        where,
        orderBy,
    });
    // console.log(matches.length);

    let debugLogs = []; //d

    let transactionQueries = [];

    matches.forEach(async function (match, index) {
        let
            matchLogs = [],
            user1 = {
                id: match.player1.id,
                avatar: match.player1.avatar,
                tactic: JSON.parse(match.player1.lastTactic),
                players: JSON.parse(match.player1.lastTeam)
                    .map(player => {
                        return {
                            physicalSkills: player.physicalSkills,
                            technicalSkills: player.technicalSkills,
                            mood: player.mood,
                            isGoalKeeper: player.isGoalKeeper,
                        }
                    }),
            },
            user2 = {
                id: match.player2.id,
                avatar: match.player2.avatar,
                tactic: JSON.parse(match.player2.lastTactic),
                players: JSON.parse(match.player2.lastTeam)
                    .map(player => {
                        return {
                            physicalSkills: player.physicalSkills,
                            technicalSkills: player.technicalSkills,
                            mood: player.mood,
                            isGoalKeeper: player.isGoalKeeper,
                        }
                    }),
            },
            T = [0, 0], goals = [0, 0];

        let eventsArrs = [[], []]; //d
        debugLogs.push({
            matchId: match.id,
            score: null,
            user1: {
                id: user1.id,
                playersAsm: [],
                homeBonus: 3,
                avatarBonus: 0,
                T: 0,
            },
            user2: {
                id: user2.id,
                playersAsm: [],
                homeBonus: 0,
                avatarBonus: 0,
                T: 0,
            },
            events: []
        }); //d

        user1.players.forEach((player, index1) => {
            let phy = 0, te = 0, asm;

            player.physicalSkills.forEach(skill => {
                phy += skill.level;
            });
            player.technicalSkills.forEach(skill => {
                te += skill.level;
            });

            phy = Math.min(Math.max(1, phy), 5);
            te = Math.min(Math.max(1, te), 5);

            asm = ((phy + te) / 2) + (player.mood / 2);
            asm = Math.min(Math.max(1, asm), 5);

            if (asm % 1 !== 0) {
                asm += 0.5 * (player.mood < 0 ? -1 : 1);
            }

            T[0] += asm;

            debugLogs[index].user1.playersAsm.push('player' + index1 + '=' + asm); //debug
        });
        user2.players.forEach((player, index1) => {
            let phy = 0, te = 0, asm;

            player.physicalSkills.forEach(skill => {
                phy += skill.level;
            });
            player.technicalSkills.forEach(skill => {
                te += skill.level;
            });

            phy = Math.min(Math.max(1, phy), 5);
            te = Math.min(Math.max(1, te), 5);

            asm = ((phy + te) / 2) + (player.mood / 2);
            asm = Math.min(Math.max(1, asm), 5);

            if (asm % 1 !== 0) {
                asm += 0.5 * (player.mood < 0 ? -1 : 1);
            }

            T[1] += asm;

            debugLogs[index].user2.playersAsm.push('player' + index1 + '=' + asm); //debug
        });

        T[0] += 3; //доп очки за домашнюю тиму
        if (user1.avatar !== user2.avatar) {
            if (avatarDefying[user1.avatar].includes(user2.avatar)) {
                T[0] += 3;

                debugLogs[index].user1.avatarBonus = 3;//debug
            }
            else if (avatarDefying[user2.avatar].includes(user1.avatar)) {
                T[1] += 3;

                debugLogs[index].user2.avatarBonus = 3;//debug
            }
        } // доп очки за контр тренеров

        debugLogs[index].user1.T = T[0]; //debug
        debugLogs[index].user2.T = T[1]; //debug
        debugLogs[index].events.push({
            minute: 0,
            tDiff: T[0] + '-' + T[1],
            result: 'Match started!'
        }); //d

        matchLogs.push({
            minute: 0,
            user: null,
            momentType: null,
            result: 'Match started!'
        });

        //первый тайм ===================================================================
        let matchEvents = [], xG = [0, 0];
        for (let i = 3; i <= 45; i += 3) {
            let player = MathService.randomFloat(0, T[0] + T[1]) <= T[0] ? 0 : 1,
                momentType = MathService.randomInteger(11, 13),
                momentWeight = 0.5 * (momentType - 9);
            matchEvents.push({
                minute: i,
                player,
                momentType
            });
            T[player] += momentWeight; // чтобы получить вес 1/1.5/2 (11 -9. 12 - 9, 13 - 9)
            xG[player] += momentWeight;

            matchLogs.push({
                minute: i,
                user: player,
                momentType,
                result: ''
            });

            debugLogs[index].events.push({
                minute: i,
                user: player,
                momentType,
                tDiff: T[0] + '-' + T[1],
                result: '',
                score: ''
            }); //debug
            eventsArrs[player].push(momentType); //d
        }

        eventsArrs[0].push("==="); //d
        eventsArrs[1].push("==="); //d

        xG[0] /= 10;
        xG[1] /= 10;

        for (let i = 0; i < 15; i++) {
            let event = matchEvents[i];

            if (event.momentType === 13) {
                // console.log(event)

                let chanceNumbers = Math.floor(xG[event.user] / 0.25),
                    goal = MathService.randomInteger(1, 10) <= chanceNumbers ? 1 : 0;

                if (goal) {
                    goals[event.user]++;
                    xG[event.user] = Math.max(0, xG[event.user] - 0.75); //чтобы xG игрока не был меньше 0
                    matchLogs[i + 1].result = `Игрок ${event.user + 1} забил гол!`;

                    debugLogs[index].events[i + 1].result = `Игрок ${event.user + 1} забил гол!`;
                }
                else {
                    matchLogs[i + 1].result = `Игрок ${event.user + 1} не сумел забить гол!`;

                    debugLogs[index].events[i + 1].result = `Игрок ${event.user + 1} не сумел забить гол!`;
                }
            }

            debugLogs[index].events[i + 1].score = goals[0] + '-' + goals[1];
        }
        //первый тайм ===================================================================


        //второй тайм ===================================================================
        for (let i = 48; i <= 90; i += 3) {
            let player = MathService.randomFloat(0, T[0] + T[1]) <= T[0] ? 0 : 1,
                momentType = MathService.randomInteger(11, 13),
                momentWeight = 0.5 * (momentType - 9);
            matchEvents.push({
                minute: i,
                player,
                momentType
            });
            T[player] += momentWeight; // чтобы получить вес 1/1.5/2 (11 -9. 12 - 9, 13 - 9)
            xG[player] += momentWeight;

            matchLogs.push({
                minute: i,
                user: player,
                momentType,
                result: ''
            });

            debugLogs[index].events.push({
                minute: i,
                user: player,
                momentType,
                tDiff: T[0] + '-' + T[1],
                result: '',
                score: ''
            }); //debug
            eventsArrs[player].push(momentType); //d
        }

        xG[0] /= 10;
        xG[1] /= 10;

        for (let i = 15; i < 30; i++) {
            let event = matchEvents[i];
            if (event.momentType === 13) {
                // console.log(event)
                let chanceNumbers = Math.floor(xG[event.user] / 0.25),
                    goal = MathService.randomInteger(1, 10) <= chanceNumbers ? 1 : 0;

                if (goal) {
                    goals[event.user]++;
                    xG[event.user] = Math.max(0, xG[event.user] - 0.75); //чтобы xG игрока не был меньше 0
                    matchLogs[i + 1].result = `Игрок ${event.user + 1} забил гол!`;

                    debugLogs[index].events[i + 1].result = `Игрок ${event.user + 1} забил гол!`;
                }
                else {
                    matchLogs[i + 1].result = `Игрок ${event.user + 1} не сумел забить гол!`;
                    debugLogs[index].events[i + 1].result = `Игрок ${event.user + 1} не сумел забить гол!`;
                }
            }
            debugLogs[index].events[i + 1].score = goals[0] + '-' + goals[1];
        }
        //второй тайм ===================================================================

        debugLogs[index].score = goals[0] + '-' + goals[1]; //d
        debugLogs[index].user1.totalEvents = eventsArrs[0].join(' '); //d
        debugLogs[index].user2.totalEvents = eventsArrs[1].join(' '); //d

        transactionQueries.push(prisma.match.update({
            where: {
                id: match.id
            },
            data: {
                logs: JSON.stringify(matchLogs),
                score: goals[0] + ':' + goals[1],
            }
        }))
    });

    console.log('Playing debug matches!');

    if (writeToDb) {
        let result = await prisma.$transaction(transactionQueries);
        console.log('Logged to DB!');
    }

    if (writeToFile) {
        await fileHandle.writeFile('./match-debug-logs.txt', JSON.stringify(debugLogs));
        console.log('Logged to @match-debug-logs.txt@ file!');
    }
}

async function playMatchManyTimes(matchId, player1Id, player2Id, count, raffleVersion) {
    let where;
    if (matchId !== null) {
        where = {
            id: matchId
        };
    }
    else {
        where = {
            OR: [
                {
                    player1: {
                        id: player1Id
                    },
                    player2: {
                        id: player2Id
                    }
                },
                {
                    player1: {
                        id: player2Id
                    },
                    player2: {
                        id: player1Id
                    }
                },
            ]
        };
    }

    const match = await prisma.match.findFirst({
        select: {
            id: true,
            player1: {
                select: {
                    id: true,
                    avatar: true,
                    lastTactic: true,
                    lastTeam: true,
                },
            },
            player2: {
                select: {
                    id: true,
                    avatar: true,
                    lastTactic: true,
                    lastTeam: true,
                }
            },
        },
        where,
    });
    // console.log(match);

    let debugLogs = []; //d

    switch (raffleVersion) {
        case 'V1':
            let
                user1 = {
                    id: match.player1.id,
                    avatar: match.player1.avatar,
                    tactic: JSON.parse(match.player1.lastTactic),
                    players: JSON.parse(match.player1.lastTeam)
                        .map(player => {
                            return {
                                physicalSkills: player.physicalSkills,
                                technicalSkills: player.technicalSkills,
                                mood: player.mood,
                                isGoalKeeper: player.isGoalKeeper,
                            }
                        }),
                },
                user2 = {
                    id: match.player2.id,
                    avatar: match.player2.avatar,
                    tactic: JSON.parse(match.player2.lastTactic),
                    players: JSON.parse(match.player2.lastTeam)
                        .map(player => {
                            return {
                                physicalSkills: player.physicalSkills,
                                technicalSkills: player.technicalSkills,
                                mood: player.mood,
                                isGoalKeeper: player.isGoalKeeper,
                            }
                        }),
                },
                T = [0, 0];

            debugLogs.push({
                matchId: match.id,
                user1: {
                    id: user1.id,
                    playersAsm: [],
                    homeBonus: 3,
                    avatarBonus: 0,
                    T: 0,
                },
                user2: {
                    id: user2.id,
                    playersAsm: [],
                    homeBonus: 0,
                    avatarBonus: 0,
                    T: 0,
                },
            }); //d

            user1.players.forEach((player, index1) => {
                let phy = 0, te = 0, asm;

                player.physicalSkills.forEach(skill => {
                    phy += skill.level;
                });
                player.technicalSkills.forEach(skill => {
                    te += skill.level;
                });

                phy = Math.min(Math.max(1, phy), 5);
                te = Math.min(Math.max(1, te), 5);

                asm = ((phy + te) / 2) + (player.mood / 2);
                asm = Math.min(Math.max(1, asm), 5);

                if (asm % 1 !== 0) {
                    asm += 0.5 * (player.mood < 0 ? -1 : 1);
                }

                T[0] += asm;

                debugLogs[0].user1.playersAsm.push('player' + index1 + '=' + asm); //debug
            });
            user2.players.forEach((player, index1) => {
                let phy = 0, te = 0, asm;

                player.physicalSkills.forEach(skill => {
                    phy += skill.level;
                });
                player.technicalSkills.forEach(skill => {
                    te += skill.level;
                });

                phy = Math.min(Math.max(1, phy), 5);
                te = Math.min(Math.max(1, te), 5);

                asm = ((phy + te) / 2) + (player.mood / 2);
                asm = Math.min(Math.max(1, asm), 5);

                if (asm % 1 !== 0) {
                    asm += 0.5 * (player.mood < 0 ? -1 : 1);
                }

                T[1] += asm;

                debugLogs[0].user2.playersAsm.push('player' + index1 + '=' + asm); //debug
            });

            T[0] += 3; //доп очки за домашнюю тиму
            if (user1.avatar !== user2.avatar) {
                if (avatarDefying[user1.avatar].includes(user2.avatar)) {
                    T[0] += 3;

                    debugLogs[0].user1.avatarBonus = 3;//debug
                }
                else if (avatarDefying[user2.avatar].includes(user1.avatar)) {
                    T[1] += 3;

                    debugLogs[0].user2.avatarBonus = 3;//debug
                }
            } // доп очки за контр тренеров

            debugLogs[0].user1.T = T[0]; //debug
            debugLogs[0].user2.T = T[1]; //debug

            let advantage = Math.abs(T[0] - T[1]);
            if (T[0] > T[1]) {
                T[0] += advantage;
            }
            else {
                T[1] += advantage;
            }

            debugLogs[0].user1.T_adv = T[0]; //debug
            debugLogs[0].user2.T_adv = T[1]; //debug

            let firstWon = 0, secWon = 0, draw = 0;
            console.log('Playing match many times!');
            for (let index = 0; index < count; index++) {
                let eventsArrs = [[], []]; //d

                let matchLogs = [],
                    goals = [0, 0];

                // debugLogs[index].events.push({
                //     minute: 0,
                //     tDiff: T[0] + '-' + T[1],
                //     result: 'Match started!'
                // }); //d

                matchLogs.push({
                    minute: 0,
                    user: null,
                    momentType: null,
                    result: 'Match started!'
                });

                //первый тайм ===================================================================
                let momentsCount = [0, 0];

                momentsCount[0] = Math.round(T[0] / ((T[0] + T[1]) / 15));
                momentsCount[1] = 15 - momentsCount[0];

                // console.log(T[0], T[1]);
                // console.log(momentsCount[0], momentsCount[1]);

                let matchEvents = [], xG = [0, 0];
                for (let i = 3; i <= 45; i += 3) {
                    let player = MathService.randomFloat(0, T[0] + T[1]) <= T[0] ? 0 : 1,
                        randNum = MathService.randomInteger(1, 10),
                        momentType = randNum >= 1 && randNum <= 2 ? 13 : randNum >= 3 && randNum <= 6 ? 12 : 11,
                        momentWeight = 0.5 * (momentType - 9);

                    if (momentsCount[player] === 0) player = (player + 1) % 2;
                    momentsCount[player]--;

                    matchEvents.push({
                        minute: i,
                        player,
                        momentType
                    });
                    T[player] += momentWeight; // чтобы получить вес 1/1.5/2 (11 -9. 12 - 9, 13 - 9)
                    xG[player] += momentWeight;

                    matchLogs.push({
                        minute: i,
                        user: player,
                        momentType,
                        result: ''
                    });

                    // debugLogs[index].events.push({
                    //     minute: i,
                    //     user: player,
                    //     momentType,
                    //     tDiff: T[0] + '-' + T[1],
                    //     result: '',
                    //     score: ''
                    // }); //debug

                    eventsArrs[player].push(momentType); //d
                }

                eventsArrs[0].push("==="); //d
                eventsArrs[1].push("==="); //d

                xG[0] /= 10;
                xG[1] /= 10;

                for (let i = 0; i < 15; i++) {
                    let event = matchEvents[i];

                    if (event.momentType === 13) {
                        // console.log(event)

                        let chanceNumbers = Math.floor(xG[event.user] / 0.25),
                            goal = MathService.randomInteger(1, 10) <= chanceNumbers ? 1 : 0;

                        if (goal) {
                            goals[event.user]++;
                            xG[event.user] = Math.max(0, xG[event.user] - 1); //чтобы xG игрока не был меньше 0
                            matchLogs[i + 1].result = `Игрок ${event.user + 1} забил гол!`;

                            // debugLogs[index].events[i + 1].result = `Игрок ${event.user + 1} забил гол!`;
                        }
                        else {
                            matchLogs[i + 1].result = `Игрок ${event.user + 1} не сумел забить гол!`;

                            // debugLogs[index].events[i + 1].result = `Игрок ${event.user + 1} не сумел забить гол!`;
                        }
                    }

                    // debugLogs[index].events[i + 1].score = goals[0] + '-' + goals[1];
                }
                //первый тайм ===================================================================


                //второй тайм ===================================================================
                momentsCount[0] = Math.round(T[0] / ((T[0] + T[1]) / 15));
                momentsCount[1] = 15 - momentsCount[0];

                for (let i = 48; i <= 90; i += 3) {
                    let player = MathService.randomFloat(0, T[0] + T[1]) <= T[0] ? 0 : 1,
                        randNum = MathService.randomInteger(1, 10),
                        momentType = randNum >= 1 && randNum <= 2 ? 13 : randNum >= 3 && randNum <= 6 ? 12 : 11,
                        momentWeight = 0.5 * (momentType - 9);

                    if (momentsCount[player] === 0) player = (player + 1) % 2;
                    momentsCount[player]--;

                    matchEvents.push({
                        minute: i,
                        player,
                        momentType
                    });
                    T[player] += momentWeight; // чтобы получить вес 1/1.5/2 (11 -9. 12 - 9, 13 - 9)
                    xG[player] += momentWeight;

                    matchLogs.push({
                        minute: i,
                        user: player,
                        momentType,
                        result: ''
                    });

                    // debugLogs[index].events.push({
                    //     minute: i,
                    //     user: player,
                    //     momentType,
                    //     tDiff: T[0] + '-' + T[1],
                    //     result: '',
                    //     score: ''
                    // }); //debug

                    eventsArrs[player].push(momentType); //d
                }

                xG[0] /= 10;
                xG[1] /= 10;

                for (let i = 15; i < 30; i++) {
                    let event = matchEvents[i];
                    if (event.momentType === 13) {
                        // console.log(event)
                        let chanceNumbers = Math.floor(xG[event.user] / 0.25),
                            goal = MathService.randomInteger(1, 10) <= chanceNumbers ? 1 : 0;

                        if (goal) {
                            goals[event.user]++;
                            xG[event.user] = Math.max(0, xG[event.user] - 1); //чтобы xG игрока не был меньше 0
                            matchLogs[i + 1].result = `Игрок ${event.user + 1} забил гол!`;

                            // debugLogs[index].events[i + 1].result = `Игрок ${event.user + 1} забил гол!`; //d
                        }
                        else {
                            matchLogs[i + 1].result = `Игрок ${event.user + 1} не сумел забить гол!`;

                            // debugLogs[index].events[i + 1].result = `Игрок ${event.user + 1} не сумел забить гол!`; //d
                        }
                    }

                    // debugLogs[index].events[i + 1].score = goals[0] + '-' + goals[1]; //d
                }
                //второй тайм ===================================================================

                debugLogs.push(goals[0] + '-' + goals[1]); //d

                if (goals[0] > goals[1]) firstWon++;
                else if (goals[0] < goals[1]) secWon++;
                else draw++;

                // debugLogs[index].user1.totalEvents = eventsArrs[0].join(' '); //d
                // debugLogs[index].user2.totalEvents = eventsArrs[1].join(' '); //d
                // delete debugLogs[index].events;
            }

            debugLogs.push({
                firstWon,
                secWon,
                draw,
            }); //d
            break;

        case 'V2':
            break;

        default:
            console.log('Invalid raffle version!');
            return;
    }

    return debugLogs;
}

// playing matches ======================================================================================================


// updating users ======================================================================================================
async function regenerateUserPlayersAndLastTeam(userId) {
    let playerId = 1,
        userAllPlayers = [],
        userLastTeam = [];

    for (let i = 0; i < 10; i++) userAllPlayers.push(generateCard(playerId++, false));
    userAllPlayers.push(generateCard(playerId++, true));

    userLastTeam.push(setCardPosition(userAllPlayers[0], 'FW'));
    userLastTeam.push(setCardPosition(userAllPlayers[1], 'WG'));
    userLastTeam.push(setCardPosition(userAllPlayers[2], 'WG'));
    userLastTeam.push(setCardPosition(userAllPlayers[3], 'CM'));
    userLastTeam.push(setCardPosition(userAllPlayers[4], 'CM'));
    userLastTeam.push(setCardPosition(userAllPlayers[5], 'CM'));
    userLastTeam.push(setCardPosition(userAllPlayers[6], 'WB'));
    userLastTeam.push(setCardPosition(userAllPlayers[7], 'CD'));
    userLastTeam.push(setCardPosition(userAllPlayers[8], 'CD'));
    userLastTeam.push(setCardPosition(userAllPlayers[9], 'WB'));
    userLastTeam.push(setCardPosition(userAllPlayers[10], 'GK'));

    await prisma.user.update({
        data: {
            lastTeam: JSON.stringify(userLastTeam),
            players: {
                upsert: {
                    create: {
                        playersJson: JSON.stringify(userAllPlayers),
                    },
                    update: {
                        playersJson: JSON.stringify(userAllPlayers),
                    },
                }
            },
        },
        where: {
            id: userId,
        },
    });
}

async function regenerateUserPlayersAndLastTeamMany() {
    let userIds = await prisma.user.findMany({
        select: {
            id: true,
        }
    });

    for (let i = 0; i < userIds.length; i++) {
        await regenerateUserPlayersAndLastTeam(userIds[i].id);
    }
}


async function regenerateUserLogo(userId) {
    let logoIcons = ["bee", "cherry", "city", "cottager", "devil", "eagle", "forest", "fox", "gun", "hammer", "magpie", "pen", "reds", "seagull", "toffee", "villian"],
        logoColors = ["#090E19FF", "#135AE0FF", "#A01843FF", "#A5FF5BFF", "#EC242DFF", "#90CAFFFF", "#FAFCFFFF", "#FFDA25FF"],
        shapeColorIdx = MathService.randomInteger(0, logoColors.length - 1),
        iconColorIdx = MathService.randomIntegerExcluding(0, logoColors.length - 1, [shapeColorIdx]),
        outlineColorIdx = MathService.randomIntegerExcluding(0, logoColors.length - 1, [shapeColorIdx, iconColorIdx]),
        logo = `{"shapeColor":"${logoColors[shapeColorIdx]}",` +
            `"iconColor":"${logoColors[iconColorIdx]}",` +
            `"outlineColor":"${logoColors[outlineColorIdx]}",` +
            `"iconName":"${logoIcons[MathService.randomInteger(0, logoIcons.length - 1)]}"}`;

    await prisma.user.update({
        data: {
            logo
        },
        where: {
            id: userId,
        },
    });
}

async function regenerateUserLogoMany() {
    let userIds = await prisma.user.findMany({
        select: {
            id: true,
        }
    });

    for (let i = 0; i < userIds.length; i++) {
        await regenerateUserLogo(userIds[i].id);
    }
}


async function regenerateUserPlayersAndLastTeamWithRandomRatings(userId) {
    let user = await prisma.user.findFirst({
            select: {
                avatar: true,
                leaguePlayers: {
                    select: {
                        league: {
                            select: {
                                level: true
                            }
                        }
                    }
                }
            },
            where: {
                id: userId
            }
        }),
        avatarId = user.avatar,
        leagueLevel = user.leaguePlayers[0].league.level,
        userPlayers,
        userLastTeam;

    userPlayers = generateStartCardsSet(avatarId, leagueLevel);


    // создание рандомных оценок за матчи игроку ==============================================
    for (let plIdx = 0; plIdx < userPlayers.length; plIdx++) {

        let playedMatchesCount = MathService.randomInteger(1, 10),
            sumOfMarks = 0;

        for (let mI = 0; mI < playedMatchesCount; mI++) {
            let mark = Number(MathService.randomFloat(5, 8).toFixed(2));

            userPlayers[plIdx].seasonRatingMarks.push(mark);
            sumOfMarks += mark;
        }

        userPlayers[plIdx].averageRating = Number((sumOfMarks / playedMatchesCount).toFixed(2));
    }


    userLastTeam = createLastTeam(userPlayers);

    await prisma.user.update({
        data: {
            lastTeam: JSON.stringify(userLastTeam),
            players: {
                upsert: {
                    create: {
                        playersJson: JSON.stringify(userPlayers),
                    },
                    update: {
                        playersJson: JSON.stringify(userPlayers),
                    },
                }
            },
        },
        where: {
            id: userId,
        },
    });
}

async function regenerateUserPlayersAndLastTeamWithRandomRatingsMany() {
    let userIds = await prisma.user.findMany({
        select: {
            id: true,
        }
    });

    for (let i = 0; i < userIds.length; i++) {
        await regenerateUserPlayersAndLastTeamWithRandomRatings(userIds[i].id);
    }
}

// updating users ======================================================================================================


// another ======================================================================================================
async function timeWasted(func, args) {
    let start = new Date();
    await func(...args);
    console.log(`Wasted ${new Date() - start} ms`);
}


function composePlayersArray(lastTeam, allPlayers) {
    function sortPlayersById_1(a, b) {
        if (a.playerId < b.playerId) return -1;
        if (a.playerId > b.playerId) return 1;
        return 0;
    }

    lastTeam.sort(sortPlayersById_1);
    allPlayers.sort(sortPlayersById_1);

    let players = [], apPlIdx = 0;
    for (let ltPlIdx = 0; ltPlIdx < lastTeam.length; ltPlIdx++) {
        while (allPlayers[apPlIdx].playerId !== lastTeam[ltPlIdx].playerId) apPlIdx++;
        players.push({
            card: allPlayers[apPlIdx],
            position: lastTeam[ltPlIdx].position,
        });
    }

    return players;
}

function calculatePlayerAsm(player) {
    let T = 0;


    let technicalSkills = {},
        physicalSkills = {};

    for (let skill in player.card.physicalSkills) physicalSkills[skill] = player.card.physicalSkills[skill];
    for (let skill in player.card.technicalSkills) technicalSkills[skill] = player.card.technicalSkills[skill];

    switch (player.position) {
        case 'FW':
            technicalSkills.shoot *= 3;
            physicalSkills.pace *= 3;
            physicalSkills.agility *= 3;
            physicalSkills.jump *= 3;
            break;

        case 'WG':
            technicalSkills.cross *= 3;
            technicalSkills.shoot *= 3;
            physicalSkills.pace *= 3;
            physicalSkills.agility *= 3;
            break;

        case 'CM':
            technicalSkills.pass *= 3;
            physicalSkills.agility *= 3;
            physicalSkills.strength *= 3;
            break;

        case 'CD':
            technicalSkills.tackling *= 3;
            physicalSkills.strength *= 3;
            physicalSkills.jump *= 3;
            break;

        case 'WB':
            technicalSkills.cross *= 3;
            physicalSkills.pace *= 3;
            physicalSkills.jump *= 3;
            break;
    }


    //получение asm игрока
    let phy = 0, te = 0, asm;

    for (let skill in physicalSkills) phy += physicalSkills[skill];
    for (let skill in technicalSkills) te += technicalSkills[skill];

    phy = Math.min(Math.max(1, phy), 5);
    te = Math.min(Math.max(1, te), 5);

    asm = (phy + te) + player.card.mood;
    asm = Math.min(Math.max(1, asm), 10);

    if (asm % 1 !== 0) asm += 0.5 * (player.card.mood < 0 ? -1 : 1);

    T += asm;

    return T;
} //players total asm with positions bonuses

function calculatePlayersTotalAsm(players) {
    let T = 0;
    for (let plIdx = 0; plIdx < players.length; plIdx++) {
        let player = players[plIdx];

        let technicalSkills = {},
            physicalSkills = {};

        for (let skill in player.card.physicalSkills) physicalSkills[skill] = player.card.physicalSkills[skill];
        for (let skill in player.card.technicalSkills) technicalSkills[skill] = player.card.technicalSkills[skill];

        switch (player.position) {
            case 'FW':
                technicalSkills.shoot *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.agility *= 3;
                physicalSkills.jump *= 3;
                break;

            case 'WG':
                technicalSkills.cross *= 3;
                technicalSkills.shoot *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.agility *= 3;
                break;

            case 'CM':
                technicalSkills.pass *= 3;
                physicalSkills.agility *= 3;
                physicalSkills.strength *= 3;
                break;

            case 'CD':
                technicalSkills.tackling *= 3;
                physicalSkills.strength *= 3;
                physicalSkills.jump *= 3;
                break;

            case 'WB':
                technicalSkills.cross *= 3;
                physicalSkills.pace *= 3;
                physicalSkills.jump *= 3;
                break;
        }


        //получение asm игрока
        let phy = 0, te = 0, asm;

        for (let skill in physicalSkills) phy += physicalSkills[skill];
        for (let skill in technicalSkills) te += technicalSkills[skill];

        phy = Math.min(Math.max(1, phy), 5);
        te = Math.min(Math.max(1, te), 5);

        asm = (phy + te) + player.card.mood;
        asm = Math.min(Math.max(1, asm), 10);

        if (asm % 1 !== 0) asm += 0.5 * (player.card.mood < 0 ? -1 : 1);

        T += asm;
    }

    return T;
} //players total asm with positions bonuses
// another ======================================================================================================


module.exports = {
    playDebugMatch_vc,
    playMatchManyTimes_vc,
    playMatchManyTimes_v_12_08_2022,
    playMatchManyTimes_v_12_08_2022_2,
    playMatchManyTimes_v_16otr_v1,
    playDebugMatch_v_17otr_v1,
    playMatchManyTimes_v_17otr_v1,
    regenerateUserPlayersAndLastTeamMany,
    regenerateUserPlayersAndLastTeamWithRandomRatingsMany,
    regenerateUserLogoMany,
    composePlayersArray,
    calculatePlayerAsm,
    calculatePlayersTotalAsm,
    timeWasted,
    playMatchManyTimes_17otr_v2,
    playDebugMatch_17otr_v2,
    playMatchManyTimes_17otr_v3_09I19,
    playDebugMatch_17otr_v3_09I19,
    playPhaseMatches_debug,
    playWeekendLeagues_debug
};